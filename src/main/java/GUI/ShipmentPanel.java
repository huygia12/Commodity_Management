/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Controllers.GoodsController;
import Controllers.HistoryController;
import Controllers.ShipmentController;
import Models.Goods;
import Models.Shipment;
import Models.Store;
import java.awt.Component;
import java.math.BigDecimal;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.*;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ms Linh
 */
public class ShipmentPanel extends javax.swing.JPanel {

    /**
     * Creates new form ShipmentPanel
     */
    public ShipmentPanel() {
        initComponents();

        defaultSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        goodsInfoPanel = new javax.swing.JPanel();
        filterCategories = new javax.swing.JComboBox<>();
        filterExtraOption = new javax.swing.JComboBox<>();
        filterBtn = new javax.swing.JButton();
        shipmentControlPanel = new javax.swing.JPanel();
        shipmentIDLabel = new javax.swing.JLabel();
        shipmentIDTextField = new javax.swing.JTextField();
        importPriceLabel = new javax.swing.JLabel();
        importPriceTextField = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        doesExpiredToggleBtn = new javax.swing.JToggleButton();
        doesExpiredLabel = new javax.swing.JLabel();
        NSXLabel = new javax.swing.JLabel();
        NSXDayTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        NSXMonthTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        NSXYearTextField = new javax.swing.JTextField();
        HSDLabel = new javax.swing.JLabel();
        HSDDayTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        HSDMonthTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        HSDYearTextField = new javax.swing.JTextField();
        DayLabel = new javax.swing.JLabel();
        MonthLabel = new javax.swing.JLabel();
        YearLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        errorIDLabel = new javax.swing.JLabel();
        errorPriceLabel = new javax.swing.JLabel();
        errorQuantityLabel = new javax.swing.JLabel();
        errorDateLabel = new javax.swing.JLabel();
        shipmentTablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 204, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 2), "SHIPMENT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        setMaximumSize(new java.awt.Dimension(980, 620));
        setMinimumSize(new java.awt.Dimension(980, 620));
        setPreferredSize(new java.awt.Dimension(980, 620));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        goodsInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bộ lọc"));

        filterCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Số lượng", "Giá nhập hàng", "Ngày", "Tình trạng" }));
        filterCategories.setSelectedIndex(-1);
        filterCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCategoriesActionPerformed(evt);
            }
        });

        filterExtraOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterExtraOptionActionPerformed(evt);
            }
        });

        filterBtn.setText("Lọc");
        filterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout goodsInfoPanelLayout = new javax.swing.GroupLayout(goodsInfoPanel);
        goodsInfoPanel.setLayout(goodsInfoPanelLayout);
        goodsInfoPanelLayout.setHorizontalGroup(
            goodsInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(goodsInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterCategories, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filterExtraOption, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(194, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, goodsInfoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        goodsInfoPanelLayout.setVerticalGroup(
            goodsInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(goodsInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(goodsInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterExtraOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(goodsInfoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, 670, 150));

        shipmentControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lô hàng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        shipmentIDLabel.setText("Mã lô hàng:");

        shipmentIDTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                shipmentIDTextFieldKeyReleased(evt);
            }
        });

        importPriceLabel.setText("Giá nhập hàng:");

        importPriceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                importPriceTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                importPriceTextFieldKeyTyped(evt);
            }
        });

        quantityLabel.setText("Số lượng: ");

        quantityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityTextFieldKeyReleased(evt);
            }
        });

        doesExpiredToggleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doesExpiredToggleBtnActionPerformed(evt);
            }
        });

        doesExpiredLabel.setText("Có ngày sản xuất, hạn sử dụng?");

        NSXLabel.setText("Ngày sản xuất:");

        NSXDayTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NSXDayTextFieldActionPerformed(evt);
            }
        });
        NSXDayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NSXDayTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("/");

        NSXMonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NSXMonthTextFieldKeyReleased(evt);
            }
        });

        jLabel3.setText("/");

        NSXYearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NSXYearTextFieldKeyReleased(evt);
            }
        });

        HSDLabel.setText("Hạn sử dụng:");

        HSDDayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                HSDDayTextFieldKeyReleased(evt);
            }
        });

        jLabel5.setText("/");

        HSDMonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                HSDMonthTextFieldKeyReleased(evt);
            }
        });

        jLabel6.setText("/");

        HSDYearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                HSDYearTextFieldKeyReleased(evt);
            }
        });

        DayLabel.setText("Ngày");

        MonthLabel.setText("Tháng");

        YearLabel.setText("Năm");

        addButton.setText("Thêm");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Xóa");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Sửa");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Hủy");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        errorIDLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorIDLabel.setText("Mã không hợp lệ!");

        errorPriceLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorPriceLabel.setText("Giá không hợp lệ!");

        errorQuantityLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorQuantityLabel.setText("Số lượng không hợp lệ!");

        errorDateLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorDateLabel.setText("Ngày không hợp lệ!");

        javax.swing.GroupLayout shipmentControlPanelLayout = new javax.swing.GroupLayout(shipmentControlPanel);
        shipmentControlPanel.setLayout(shipmentControlPanelLayout);
        shipmentControlPanelLayout.setHorizontalGroup(
            shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(shipmentIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorIDLabel)
                    .addComponent(shipmentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, shipmentControlPanelLayout.createSequentialGroup()
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(importPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(importPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(doesExpiredToggleBtn)
                        .addGap(12, 12, 12)
                        .addComponent(doesExpiredLabel))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(NSXLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(NSXDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(NSXMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(NSXYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(HSDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(HSDDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6)
                        .addComponent(HSDMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6)
                        .addComponent(HSDYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorPriceLabel)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errorQuantityLabel)))
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorDateLabel)
                            .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                                .addComponent(DayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(MonthLabel)
                                .addGap(30, 30, 30)
                                .addComponent(YearLabel)))))
                .addContainerGap())
        );
        shipmentControlPanelLayout.setVerticalGroup(
            shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(shipmentIDLabel))
                    .addComponent(shipmentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorIDLabel)
                .addGap(15, 15, 15)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(importPriceLabel))
                    .addComponent(importPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(errorPriceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(quantityLabel))
                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorQuantityLabel)
                .addGap(12, 12, 12)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doesExpiredToggleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doesExpiredLabel))
                .addGap(12, 12, 12)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NSXDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NSXMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NSXYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NSXLabel)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addGap(18, 18, 18)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HSDDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HSDMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HSDYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(shipmentControlPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HSDLabel)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))))
                .addGap(6, 6, 6)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DayLabel)
                    .addComponent(MonthLabel)
                    .addComponent(YearLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorDateLabel)
                .addGap(9, 9, 9)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(editButton))
                .addGap(18, 18, 18)
                .addGroup(shipmentControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteButton)
                    .addComponent(cancelButton))
                .addGap(118, 118, 118))
        );

        add(shipmentControlPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 260, 560));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã lô hàng", "Giá nhập hàng", "Số lượng", "Ngày sản xuất", "Hạn sử dụng", "Tình trạng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout shipmentTablePanelLayout = new javax.swing.GroupLayout(shipmentTablePanel);
        shipmentTablePanel.setLayout(shipmentTablePanelLayout);
        shipmentTablePanelLayout.setHorizontalGroup(
            shipmentTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        shipmentTablePanelLayout.setVerticalGroup(
            shipmentTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shipmentTablePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(shipmentTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, 670, 400));
    }// </editor-fold>//GEN-END:initComponents

    public void defaultSettings() {
        Instance = this;
        shipmentTableModel = (DefaultTableModel) jTable1.getModel();
        errorDateLabel.setVisible(false);
        errorIDLabel.setVisible(false);
        errorPriceLabel.setVisible(false);
        errorQuantityLabel.setVisible(false);
        setVisibleDate(false, false);
        doesExpiredToggleBtn.setSelected(false);
        filterExtraOption.setVisible(false);
        filterCategories.setSelectedIndex(-1);

        addButton.setEnabled(false);
        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
        cancelButton.setEnabled(false);
        filterBtn.setEnabled(false);

        shipmentIDTextField.setText("");
        importPriceTextField.setText("");
        quantityTextField.setText("");

        NSXDay = "";
        NSXMonth = "";
        NSXYear = "";
        HSDDay = "";
        HSDMonth = "";
        HSDYear = "";

        shipmentID = "";
        shipmentPrice = BigDecimal.ZERO;
        shipmentQuantity = BigDecimal.ZERO;
    }

    private void setVisibleDate(Boolean isVisible, Boolean isError) {
        NSXLabel.setVisible(isVisible);
        NSXDayTextField.setVisible(isVisible);
        NSXMonthTextField.setVisible(isVisible);
        NSXYearTextField.setVisible(isVisible);
        NSXDayTextField.setText("");
        NSXMonthTextField.setText("");
        NSXYearTextField.setText("");

        HSDLabel.setVisible(isVisible);
        HSDDayTextField.setVisible(isVisible);
        HSDMonthTextField.setVisible(isVisible);
        HSDYearTextField.setVisible(isVisible);
        HSDDayTextField.setText("");
        HSDMonthTextField.setText("");
        HSDYearTextField.setText("");

        jLabel2.setVisible(isVisible);
        jLabel3.setVisible(isVisible);
        jLabel5.setVisible(isVisible);
        jLabel6.setVisible(isVisible);

        DayLabel.setVisible(isVisible);
        MonthLabel.setVisible(isVisible);
        YearLabel.setVisible(isVisible);

        if (isVisible) {
            if (isError) {
                errorDateLabel.setVisible(true);
            } else {
                errorDateLabel.setVisible(false);
            }
        } else {
            errorDateLabel.setVisible(false);
        }
    }

    private void saveDateData(boolean isToggled) {
        if (isToggled) {
            NSXDayTextField.setText(NSXDay);
            NSXMonthTextField.setText(NSXMonth);
            NSXYearTextField.setText(NSXYear);
            HSDDayTextField.setText(HSDDay);
            HSDMonthTextField.setText(HSDMonth);
            HSDYearTextField.setText(HSDYear);
            errorDateLabel.setVisible(isDateError);
        } else {
            NSXDay = NSXDayTextField.getText();
            NSXMonth = NSXMonthTextField.getText();
            NSXYear = NSXYearTextField.getText();
            HSDDay = HSDDayTextField.getText();
            HSDMonth = HSDMonthTextField.getText();
            HSDYear = HSDYearTextField.getText();
        }
    }
    private void NSXDayTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NSXDayTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NSXDayTextFieldActionPerformed

    private void shipmentIDTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shipmentIDTextFieldKeyReleased
        // TODO add your handling code here:
        long dupedID = shipments.stream().filter(x -> x.getID().equalsIgnoreCase(shipmentIDTextField.getText())).count();
        if (shipmentIDTextField.getText().isEmpty()) {
            errorIDLabel.setVisible(false);
        }
        boolean dupedIDOnTable = true;
        try {
            dupedIDOnTable = shipmentIDTextField.getText().equals(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 0).toString());
        } catch (ArrayIndexOutOfBoundsException | NullPointerException aioobe) {

        }
        if (dupedID == 0 || (dupedIDOnTable && jTable1.getSelectedRow() != -1)) {
            shipmentID = shipmentIDTextField.getText();
            addCheck();
            errorIDLabel.setVisible(false);
        } else {
            errorIDLabel.setVisible(true);
        }
        cancelCheck();
        addCheck();
        editCheck();
        deleteCheck();
    }//GEN-LAST:event_shipmentIDTextFieldKeyReleased

    private void doesExpiredToggleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doesExpiredToggleBtnActionPerformed
        // TODO add your handling code here:
        Boolean isOn;
        isOn = doesExpiredToggleBtn.getSelectedObjects() != null;
        if (!isOn) {
            saveDateData(false);
        }
        setVisibleDate(isOn, isDateError);
        if (isOn) {
            saveDateData(true);
        }
        addCheck();
        deleteCheck();
        editCheck();
        cancelCheck();
    }//GEN-LAST:event_doesExpiredToggleBtnActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:
        if (jTable1.getSelectedRow() != -1) {
            shipmentIDTextField.setText((String) shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 0));
            importPriceTextField.setText(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 1).toString());
            quantityTextField.setText(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 2).toString());
            shipmentID = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 0).toString();
            shipmentQuantity = new BigDecimal(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 2).toString());
            shipmentPrice = new BigDecimal(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 1).toString());
            if (!(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 3)).toString().isEmpty()) {
                doesExpiredToggleBtn.setSelected(true);
                setVisibleDate(true, isDateError);
                saveDateData(false);
                NSXDayTextField.setText(NSXDay = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 3).toString().substring(8, 10));
                NSXMonthTextField.setText(NSXMonth = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 3).toString().substring(5, 7));
                NSXYearTextField.setText(NSXYear = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 3).toString().substring(0, 4));
                HSDDayTextField.setText(HSDDay = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 4).toString().substring(8, 10));
                HSDMonthTextField.setText(HSDMonth = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 4).toString().substring(5, 7));
                HSDYearTextField.setText(HSDYear = shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 4).toString().substring(0, 4));
            }
        }
        deleteCheck();
        cancelCheck();
        addCheck();
        editCheck();
    }//GEN-LAST:event_jTable1MouseReleased

    private void importPriceTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importPriceTextFieldKeyReleased
        // TODO add your handling code here:
        try {
            String input = importPriceTextField.getText();
            if (input.length() == 0) {
                errorPriceLabel.setVisible(false);
                addButton.setEnabled(false);
                return;
            }
            double check = Double.parseDouble(input);
            if (check < 0) {
                errorPriceLabel.setVisible(true);
                addButton.setEnabled(false);
            } else {
                errorPriceLabel.setVisible(false);
                shipmentPrice = BigDecimal.valueOf(check);
                addCheck();
            }
        } catch (NumberFormatException nfe) {
            errorPriceLabel.setVisible(true);
            addButton.setEnabled(false);
        }
        deleteCheck();
        editCheck();
        cancelCheck();
        addCheck();
    }//GEN-LAST:event_importPriceTextFieldKeyReleased

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String deletedShipmentID = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString();
        shipments = shipments.stream().filter(x -> !x.getID().equals(deletedShipmentID)).collect(Collectors.toList());
        reloadTable(shipments);
        transferData();
        defaultSettings();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        reloadTable(shipments);
        defaultSettings();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void quantityTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTextFieldKeyReleased
        // TODO add your handling code here:
        try {
            String input = quantityTextField.getText();
            if (input.length() == 0) {
                errorQuantityLabel.setVisible(false);
                addButton.setEnabled(false);
                return;
            }
            double check = Double.parseDouble(input);
            if (check < 0) {
                errorQuantityLabel.setVisible(true);
                addButton.setEnabled(false);
            } else {
                errorQuantityLabel.setVisible(false);
                shipmentQuantity = BigDecimal.valueOf(check);
                addCheck();
            }
        } catch (NumberFormatException nfe) {
            errorQuantityLabel.setVisible(true);
            addButton.setEnabled(false);
        }
        cancelCheck();
        deleteCheck();
        editCheck();
        addCheck();
    }//GEN-LAST:event_quantityTextFieldKeyReleased

    private void importPriceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importPriceTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_importPriceTextFieldKeyTyped

    private void NSXDayTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NSXDayTextFieldKeyReleased
        // TODO add your handling code here:
        NSXDay = dateCheck(NSXDayTextField, NSXMonthTextField, NSXDay, 2);
    }//GEN-LAST:event_NSXDayTextFieldKeyReleased

    private void NSXMonthTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NSXMonthTextFieldKeyReleased
        // TODO add your handling code here:
        NSXMonth = dateCheck(NSXMonthTextField, NSXYearTextField, NSXMonth, 2);
    }//GEN-LAST:event_NSXMonthTextFieldKeyReleased

    private void NSXYearTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NSXYearTextFieldKeyReleased
        // TODO add your handling code here:
        NSXYear = dateCheck(NSXYearTextField, HSDDayTextField, NSXYear, 4);
    }//GEN-LAST:event_NSXYearTextFieldKeyReleased

    private void HSDDayTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HSDDayTextFieldKeyReleased
        // TODO add your handling code here:
        HSDDay = dateCheck(HSDDayTextField, HSDMonthTextField, HSDDay, 2);
    }//GEN-LAST:event_HSDDayTextFieldKeyReleased

    private void HSDMonthTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HSDMonthTextFieldKeyReleased
        // TODO add your handling code here:
        HSDMonth = dateCheck(HSDMonthTextField, HSDYearTextField, HSDMonth, 2);
    }//GEN-LAST:event_HSDMonthTextFieldKeyReleased

    private void HSDYearTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HSDYearTextFieldKeyReleased
        // TODO add your handling code here:
        HSDYear = dateCheck(HSDYearTextField, HSDYearTextField, HSDYear, 4);
    }//GEN-LAST:event_HSDYearTextFieldKeyReleased

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (shipments.stream().filter(x -> x.getID().equals(shipmentID)).count() == 0) {
            if (doesExpiredToggleBtn.isSelected()) {
                try {
                    if (LocalDate.of(Integer.parseInt(NSXYear), Integer.parseInt(NSXMonth), Integer.parseInt(NSXDay)).isBefore(LocalDate.of(Integer.parseInt(HSDYear), Integer.parseInt(HSDMonth), Integer.parseInt(HSDDay))) || LocalDate.of(Integer.parseInt(NSXYear), Integer.parseInt(NSXMonth), Integer.parseInt(NSXDay)).isAfter(LocalDate.now())) {
                        Shipment newShipment = new Shipment(shipmentQuantity,
                                shipmentPrice,
                                LocalDate.of(Integer.parseInt(NSXYear),
                                        Integer.parseInt(NSXMonth), Integer.parseInt(NSXDay)),
                                LocalDate.of(Integer.parseInt(HSDYear), Integer.parseInt(HSDMonth), Integer.parseInt(HSDDay)),
                                shipmentID, LocalDate.now());
                        shipments.add(newShipment);
                        //
                        addToImportHistory(newShipment);
                    } else {
                        JOptionPane.showMessageDialog(null, "Ngày sản xuất không thể trước hạn sử dụng!", "Oh no!", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                } catch (DateTimeException dte) {
                    JOptionPane.showMessageDialog(null, "Ngày không tồn tại!", "Oh no!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } else {
                Shipment newShipment = new Shipment(shipmentQuantity, shipmentPrice, null, null, shipmentID, LocalDate.now());
                shipments.add(newShipment);
                //
                addToImportHistory(newShipment);
            }
            defaultSettings();
            reloadTable(shipments);
            transferData();
        } else {
            JOptionPane.showMessageDialog(null, "Mặt hàng đã tồn tại!", "Oh no!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:

        if (doesExpiredToggleBtn.isSelected()) {
            if (LocalDate.of(Integer.parseInt(NSXYearTextField.getText()), Integer.parseInt(NSXMonthTextField.getText()), Integer.parseInt(NSXDayTextField.getText())).isAfter(LocalDate.of(Integer.parseInt(HSDYearTextField.getText()), Integer.parseInt(HSDMonthTextField.getText()), Integer.parseInt(HSDDayTextField.getText())))) {
                JOptionPane.showMessageDialog(null, "Ngày sản xuất không thể trước hạn sử dụng!", "Oh no!", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        LocalDate importedDate = shipments.get(findShipmentIndex(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 0).toString())).getImportedDate();
//        String shipmentIDBeforeEdit = shipments.get(findShipmentIndex(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 0).toString())).getID();
        
        shipments.set(findShipmentIndex(shipmentTableModel.getValueAt(jTable1.getSelectedRow(), 0).toString()), new Shipment(BigDecimal.ZERO, BigDecimal.ZERO, null, null, shipmentIDTextField.getText(), null));
        shipments.set(jTable1.getSelectedRow(), new Shipment(new BigDecimal(quantityTextField.getText()),
                new BigDecimal(importPriceTextField.getText()),
                null, null, shipmentIDTextField.getText(), importedDate));
        if (doesExpiredToggleBtn.isSelected()) {
            shipments.get(findShipmentIndex(shipmentIDTextField.getText())).setNsx(LocalDate.of(Integer.parseInt(NSXYearTextField.getText()), Integer.parseInt(NSXMonthTextField.getText()), Integer.parseInt(NSXDayTextField.getText())));
            shipments.get(findShipmentIndex(shipmentIDTextField.getText())).setHsd(LocalDate.of(Integer.parseInt(HSDYearTextField.getText()), Integer.parseInt(HSDMonthTextField.getText()), Integer.parseInt(HSDDayTextField.getText())));
        }
        reloadTable(shipments);
        addCheck();
        deleteCheck();
        editCheck();
        cancelCheck();
        defaultSettings();
        transferData();
    }//GEN-LAST:event_editButtonActionPerformed

    private void filterCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterCategoriesActionPerformed
        // TODO add your handling code here:
        filterExtraOption.setVisible(true);
        filterExtraOption.removeAllItems();
        switch (filterCategories.getSelectedIndex()) {
            case 0:
            case 1:
                filterExtraOption.addItem("Từ nhiều nhất tới ít nhất");
                filterExtraOption.addItem("Từ ít nhất tới nhiều nhất");
                break;
            case 2:
                filterExtraOption.addItem("Ngày sản xuất gần với hiện tại nhất");
                filterExtraOption.addItem("Hạn sử dụng sắp hết");
                break;
            case 3:
                filterExtraOption.addItem("Còn hạn");
                filterExtraOption.addItem("Hết hạn");
                filterExtraOption.addItem("Không có hạn");
                break;
            default:
        }
        cancelCheck();
    }//GEN-LAST:event_filterCategoriesActionPerformed

    private void filterExtraOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterExtraOptionActionPerformed
        // TODO add your handling code here:
        filterBtn.setEnabled(true);
        cancelCheck();
    }//GEN-LAST:event_filterExtraOptionActionPerformed

    private void filterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBtnActionPerformed
        // TODO add your handling code here:
        switch (filterCategories.getSelectedIndex()) {
            case 0:
                switch (filterExtraOption.getSelectedIndex()) {
                    case 0:
                        reloadTable(shipments.stream().sorted((s1, s2) -> -s1.getQuantity().compareTo(s2.getQuantity())).collect(Collectors.toList()));
                        break;
                    case 1:
                        reloadTable(shipments.stream().sorted((s1, s2) -> s1.getQuantity().compareTo(s2.getQuantity())).collect(Collectors.toList()));
                        break;
                }
                break;
            case 1:
                switch (filterExtraOption.getSelectedIndex()) {
                    case 0:
                        reloadTable(shipments.stream().sorted((s1, s2) -> -s1.getImportPrice().compareTo(s2.getImportPrice())).collect(Collectors.toList()));
                        break;
                    case 1:
                        reloadTable(shipments.stream().sorted((s1, s2) -> s1.getImportPrice().compareTo(s2.getImportPrice())).collect(Collectors.toList()));
                        break;
                }
                break;
            case 2:
                switch (filterExtraOption.getSelectedIndex()) {
                    case 0:
                        reloadTable(shipments.stream().sorted((s1, s2) -> s1.getNsx().compareTo(s2.getNsx())).collect(Collectors.toList()));
                        break;
                    case 1:
                        reloadTable(shipments.stream().sorted((s1, s2) -> s1.getHsd().compareTo(s2.getHsd())).collect(Collectors.toList()));
                        break;
                }
                break;
            case 3:
                switch (filterExtraOption.getSelectedIndex()) {
                    case 0:
                        reloadTable(shipments.stream().filter(x -> x.getHsd().isAfter(LocalDate.now()) || x.getHsd() == null).collect(Collectors.toList()));
                        break;
                    case 1:
                        reloadTable(shipments.stream().filter(x -> x.getHsd().isBefore(LocalDate.now()) || x.getHsd() == null).collect(Collectors.toList()));
                        break;
                    case 3:
                        reloadTable(shipments.stream().filter(x -> x.getHsd() != null).collect(Collectors.toList()));
                        break;
                }
                break;

        }
        cancelCheck();
        errorDateLabel.setVisible(false);
        errorIDLabel.setVisible(false);
        errorPriceLabel.setVisible(false);
        errorQuantityLabel.setVisible(false);
        setVisibleDate(false, false);
        doesExpiredToggleBtn.setSelected(false);
        shipmentIDTextField.setText("");
        importPriceTextField.setText("");
        quantityTextField.setText("");

        NSXDay = "";
        NSXMonth = "";
        NSXYear = "";
        HSDDay = "";
        HSDMonth = "";
        HSDYear = "";

        shipmentID = "";
        shipmentPrice = BigDecimal.ZERO;
        shipmentQuantity = BigDecimal.ZERO;
    }//GEN-LAST:event_filterBtnActionPerformed

    private void addToImportHistory(Shipment shipment) {
        Goods goodsCloned = new GoodsController().cloneGoods(attachedGood);
        Shipment shipmentCloned = new ShipmentController().cloneShipment(shipment);
        goodsCloned.getShipments().clear();
        goodsCloned.getShipments().add(shipmentCloned);
        store.getHistory().getImportGoodsList().add(goodsCloned);
    }
//    
//    private void editShipmentInImportHistory(String shipmentID, Shipment shipment) {
//        Goods goods = new HistoryController().containImportGoods(shipmentID, store.getHistory());
//        goods.getShipments().clear();
//        goods.getShipments().add(new ShipmentController().cloneShipment(shipment));
//    }
//
//    private void removeShipmentInToImportHistory(String shipmentID) {
//        Goods goods = new HistoryController().containImportGoods(shipmentID, store.getHistory());
//        store.getHistory().getImportGoodsList().remove(goods);
//    }
    
    private void addCheck() {
        if (doesExpiredToggleBtn.isSelected()) {
            if (!shipmentIDTextField.getText().isEmpty()
                    && !importPriceTextField.getText().isEmpty()
                    && !quantityTextField.getText().isEmpty()
                    && !errorIDLabel.isVisible()
                    && !errorPriceLabel.isVisible()
                    && !errorQuantityLabel.isVisible()
                    && !NSXDayTextField.getText().isEmpty()
                    && !NSXMonthTextField.getText().isEmpty()
                    && !NSXYearTextField.getText().isEmpty()
                    && !HSDDayTextField.getText().isEmpty()
                    && !HSDMonthTextField.getText().isEmpty()
                    && !HSDYearTextField.getText().isEmpty()
                    && !errorDateLabel.isVisible()) {
                addButton.setEnabled(true);
            } else {
                addButton.setEnabled(false);
            }
        } else {
            if (!shipmentIDTextField.getText().isEmpty()
                    && !importPriceTextField.getText().isEmpty()
                    && !quantityTextField.getText().isEmpty()
                    && !errorIDLabel.isVisible()
                    && !errorPriceLabel.isVisible()
                    && !errorQuantityLabel.isVisible()) {
                addButton.setEnabled(true);
            } else {
                addButton.setEnabled(false);
            }
        }
    }

    private void editCheck() {
        if (jTable1.getSelectedRow() != -1
                && !errorIDLabel.isVisible()
                && !errorPriceLabel.isVisible()
                && !errorQuantityLabel.isVisible()
                && !errorDateLabel.isVisible()) {
            editButton.setEnabled(true);
        } else {
            editButton.setEnabled(false);
        }
    }

    private void deleteCheck() {
        if (jTable1.getSelectedRow() != -1) {
            deleteButton.setEnabled(true);
        } else {
            deleteButton.setEnabled(false);
        }
    }

    public void cancelCheck() {
        if (jTable1.getSelectedRow() != -1
                || !shipmentIDTextField.getText().isEmpty()
                || !importPriceTextField.getText().isEmpty()
                || !quantityTextField.getText().isEmpty()
                || !NSXDayTextField.getText().isEmpty()
                || !NSXMonthTextField.getText().isEmpty() || ! !NSXYearTextField.getText().isEmpty()
                || !HSDDayTextField.getText().isEmpty()
                || !HSDMonthTextField.getText().isEmpty()
                || !HSDYearTextField.getText().isEmpty()
                || filterCategories.getSelectedIndex() != -1) {
            cancelButton.setEnabled(true);
        } else {
            cancelButton.setEnabled(false);
        }
    }

    private String dateCheck(JTextField textField, Component nextField, String date, int maxLength) {
        if (textField.getText().length() == 0) {
            errorDateLabel.setVisible(false);
            return "";
        }
        String currentText;
        if ((currentText = textField.getText()).length() > maxLength) {
            textField.setText(currentText.substring(0, maxLength));
        }
        try {
            Integer.parseInt(textField.getText());
            date = textField.getText();
            errorDateLabel.setVisible(false);
        } catch (NumberFormatException nfe) {
            errorDateLabel.setVisible(true);
        }
        if (textField.getText().length() == maxLength) {
            nextField.requestFocusInWindow();
        }
        addCheck();
        deleteCheck();
        editCheck();
        cancelCheck();
        return date;
    }

    public void setOpenButton(Boolean isSelected) {
        doesExpiredToggleBtn.setSelected(isSelected);
    }

    public void reloadTable(List<Shipment> shipments) {
        int rowToRemove = shipmentTableModel.getRowCount();
        for (int i = 0; i < rowToRemove; i++) {
            shipmentTableModel.removeRow(0);
        }
        try {
            for (Shipment shipment : shipments) {
                if (shipment.getNsx() == null) {
                    shipmentTableModel.addRow(new Object[]{
                        shipment.getID(),
                        shipment.getImportPrice(),
                        shipment.getQuantity(),
                        "", "",
                        shipment.calculateStatus()
                    });
                } else {
                    shipmentTableModel.addRow(new Object[]{
                        shipment.getID(),
                        shipment.getImportPrice(),
                        shipment.getQuantity(),
                        shipment.getNsx(),
                        shipment.getHsd(),
                        shipment.calculateStatus()
                    });
                }
            }
        } catch (NullPointerException npe) {

        }
    }

    private int findShipmentIndex(String ID) {
        for (Shipment shipment : shipments) {
            if (ID.equals(shipment.getID())) {
                return shipments.indexOf(shipment);
            }
        }
        return -1;
    }

    public void attachGood(Goods good, Store store) {
        this.store = store;
        this.attachedGood = good;
        this.shipments = good.getShipments();
    }

    public void transferData() {
        RepoPanel.Instance.findSelectedGood(attachedGood.getID(), shipments);
    }

    // Custom variables declaration
    private Goods attachedGood;
    private List<Shipment> shipments;
    private Store store;
    private String shipmentID = "";
    private BigDecimal shipmentPrice = BigDecimal.ZERO;
    private BigDecimal shipmentQuantity = BigDecimal.ZERO;
    private String NSXDay;
    private String NSXMonth;
    private String NSXYear;
    private String HSDDay;
    private String HSDMonth;
    private String HSDYear;
    private boolean isDateError = false;

    public static ShipmentPanel Instance;
    private DefaultTableModel shipmentTableModel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DayLabel;
    private javax.swing.JTextField HSDDayTextField;
    private javax.swing.JLabel HSDLabel;
    private javax.swing.JTextField HSDMonthTextField;
    private javax.swing.JTextField HSDYearTextField;
    private javax.swing.JLabel MonthLabel;
    private javax.swing.JTextField NSXDayTextField;
    private javax.swing.JLabel NSXLabel;
    private javax.swing.JTextField NSXMonthTextField;
    private javax.swing.JTextField NSXYearTextField;
    private javax.swing.JLabel YearLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel doesExpiredLabel;
    private javax.swing.JToggleButton doesExpiredToggleBtn;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel errorDateLabel;
    private javax.swing.JLabel errorIDLabel;
    private javax.swing.JLabel errorPriceLabel;
    private javax.swing.JLabel errorQuantityLabel;
    private javax.swing.JButton filterBtn;
    private javax.swing.JComboBox<String> filterCategories;
    private javax.swing.JComboBox<String> filterExtraOption;
    private javax.swing.JPanel goodsInfoPanel;
    private javax.swing.JLabel importPriceLabel;
    private javax.swing.JTextField importPriceTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JPanel shipmentControlPanel;
    private javax.swing.JLabel shipmentIDLabel;
    private javax.swing.JTextField shipmentIDTextField;
    private javax.swing.JPanel shipmentTablePanel;
    // End of variables declaration//GEN-END:variables
}
