/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Controllers.HistoryController;
import Controllers.OrderController;
import Models.*;
import Ultility.Cautions;
import Ultility.IDGenerator;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chi Cute
 */
public class CustomerCardPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerCardPanel
     */
    public CustomerCardPanel() {
        initComponents();
        customerModel = (DefaultTableModel) customerTable.getModel();
    }

    private boolean checkString(String str) {
        return !str.isBlank();
    }

    private boolean checkInteger(String str) {
        if (str.isBlank()) {
            return false;
        } else if (new Cautions().checkIfANumberSequenceForGUI(str)) {
            return true;
        }
        return false;
    }

    private boolean checkDouble(String str) {
        try {
            Double.valueOf(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean checkInputPayment() {
        if (!checkInteger(copperPay.getText())) {
            return false;
        }

        if (!checkInteger(silvePay.getText())) {
            return false;
        }

        if (!checkInteger(goldenPay.getText())) {
            return false;
        }

        return checkInteger(diamondPay.getText());
    }

    private boolean checkInputDiscount() {
        if (!checkDouble(copperDiscount.getText())) {
            return false;
        }

        if (!checkDouble(silveDiscount.getText())) {
            return false;
        }

        if (!checkDouble(goldenDiscount.getText())) {
            return false;
        }

        return checkDouble(diamondDiscount.getText());
    }

    private void createNewMemberCard() {
        CustomerCard newCard = new CustomerCard();
        newCard.setID(idGenerator.generateID(CustomerCard.class.getName(), 6));
        Gender newCustomerGender = castStringToGender(memberGenderComboBox.getSelectedItem().toString());
        newCard.setCustomer(new Customer(
                memberFirstNameTextField.getText(),
                memberLastNameTextField.getText(),
                memberPhoneNumberTextField.getText(),
                memberAddressTextPane.getText(),
                Integer.parseInt(memberAgeTextField.getText()),
                newCustomerGender));
        customerCardList.getList().add(newCard);
    }

    private Gender castStringToGender(String str) {
        switch (str) {
            case "Nam":
                return Gender.MALE;
            case "Khác":
                return Gender.OTHER;
        }
        return Gender.FEMALE;
    }

    private String valueOfGenderEnum(Gender g) {
        switch (g) {
            case MALE:
                return "Nam";
            case FEMALE:
                return "Nữ";
        }
        return "Khác";
    }

    private void addAllCustomerCardToTable() {
        clearTableModel(customerModel);
        for (int i = 0; i < customerCardList.getList().size(); i++) {
            addNewCustomerCardToTable(customerCardList.getList().get(i));
        }
    }

    private void addNewCustomerCardToTable(CustomerCard customerCard) {
        String customerGender = valueOfGenderEnum(customerCard.getCustomer().getGender());
        customerModel.addRow(new Object[]{
            customerCard.getID(),
            customerCard.getCustomer().getFirstName(),
            customerCard.getCustomer().getLastName(),
            customerCard.getCustomer().getAge(),
            customerGender,
            customerCard.getCustomer().getPhoneNumber(),
            customerCard.getCustomer().getAddress()
        });
    }

    private void clearTableModel(DefaultTableModel tableModel) {
        int numberOfRow = tableModel.getRowCount();
        for (int i = 0; i < numberOfRow; i++) {
            tableModel.removeRow(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CustomerInforPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        memberCardIDTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        memberAddressTextPane = new javax.swing.JTextPane();
        DeleteCardButton = new javax.swing.JButton();
        UpdateCustomerDateButton = new javax.swing.JButton();
        CardInforPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        memberTotalPayTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        memberUsagePointTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        memberUsedPointTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        memberCardRankTextField = new javax.swing.JTextField();
        needMore = new javax.swing.JLabel();
        toNextRank = new javax.swing.JLabel();
        morePayToNextRank = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        memberFirstNameTextField = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        memberLastNameTextField = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        memberAgeTextField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        memberPhoneNumberTextField = new javax.swing.JTextField();
        memberGenderComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        CreateNewCardButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        ToolsPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        SearchTextField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        ShowCardListButton = new javax.swing.JButton();
        MainPanel = new javax.swing.JPanel();
        CustomerCardTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        searchResultQuantity = new javax.swing.JLabel();
        totalQuantity = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        copperDiscount = new javax.swing.JTextField();
        copperPay = new javax.swing.JTextField();
        silveDiscount = new javax.swing.JTextField();
        silvePay = new javax.swing.JTextField();
        goldenDiscount = new javax.swing.JTextField();
        goldenPay = new javax.swing.JTextField();
        diamondDiscount = new javax.swing.JTextField();
        diamondPay = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        changePolicyButton = new javax.swing.JButton();
        agreeWithNewPolicy = new javax.swing.JButton();
        cancelPolicyChange = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(970, 560));
        setLayout(new java.awt.BorderLayout());

        CustomerInforPanel.setBackground(new java.awt.Color(255, 255, 255));
        CustomerInforPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin khách hàng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        jLabel1.setText("Mã khách/Mã thẻ:");

        memberCardIDTextField.setEditable(false);
        memberCardIDTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        memberCardIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        memberCardIDTextField.setFocusable(false);

        jLabel6.setText("Địa chỉ:");

        memberAddressTextPane.setPreferredSize(new java.awt.Dimension(62, 48));
        jScrollPane1.setViewportView(memberAddressTextPane);

        DeleteCardButton.setBackground(new java.awt.Color(255, 51, 0));
        DeleteCardButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteCardButton.setText("XÓA");
        DeleteCardButton.setFocusable(false);
        DeleteCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCardButtonActionPerformed(evt);
            }
        });

        UpdateCustomerDateButton.setBackground(new java.awt.Color(153, 255, 0));
        UpdateCustomerDateButton.setText("SỬA");
        UpdateCustomerDateButton.setFocusable(false);
        UpdateCustomerDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateCustomerDateButtonActionPerformed(evt);
            }
        });

        CardInforPanel.setBackground(new java.awt.Color(255, 255, 255));
        CardInforPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin thẻ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        jLabel7.setText("Điểm khả dụng:");

        memberTotalPayTextField.setEditable(false);
        memberTotalPayTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        memberTotalPayTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        memberTotalPayTextField.setFocusable(false);

        jLabel8.setText("Điểm đã quy đổi:");

        memberUsagePointTextField.setEditable(false);
        memberUsagePointTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        memberUsagePointTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        memberUsagePointTextField.setFocusable(false);

        jLabel9.setText("Tổng chi tiêu:");

        memberUsedPointTextField.setEditable(false);
        memberUsedPointTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        memberUsedPointTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        memberUsedPointTextField.setFocusable(false);

        jLabel10.setText("Thứ hạng thẻ:");

        memberCardRankTextField.setEditable(false);
        memberCardRankTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        memberCardRankTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        memberCardRankTextField.setFocusable(false);

        needMore.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        needMore.setForeground(new java.awt.Color(153, 153, 153));
        needMore.setText("Chi tiêu thêm");

        toNextRank.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        toNextRank.setForeground(new java.awt.Color(153, 153, 153));
        toNextRank.setText("để lên thứ hạng tiếp theo");

        morePayToNextRank.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        morePayToNextRank.setForeground(new java.awt.Color(153, 153, 153));
        morePayToNextRank.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        morePayToNextRank.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout CardInforPanelLayout = new javax.swing.GroupLayout(CardInforPanel);
        CardInforPanel.setLayout(CardInforPanelLayout);
        CardInforPanelLayout.setHorizontalGroup(
            CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardInforPanelLayout.createSequentialGroup()
                .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CardInforPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(needMore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(morePayToNextRank, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(toNextRank))
                    .addGroup(CardInforPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(10, 10, 10)
                        .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(memberUsedPointTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberUsagePointTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberTotalPayTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberCardRankTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CardInforPanelLayout.setVerticalGroup(
            CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardInforPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(memberUsagePointTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(memberUsedPointTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(memberTotalPayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(memberCardRankTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CardInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(needMore)
                        .addComponent(toNextRank))
                    .addComponent(morePayToNextRank, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel36.setText("Họ:");

        memberFirstNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel37.setText("Tên:");

        memberLastNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel38.setText("Tuổi:");

        memberAgeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel39.setText("SĐT:");

        memberPhoneNumberTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        memberGenderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));

        jLabel3.setText("Giới tính:");

        CreateNewCardButton.setBackground(new java.awt.Color(153, 255, 255));
        CreateNewCardButton.setText("THÊM");
        CreateNewCardButton.setFocusable(false);
        CreateNewCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateNewCardButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("HỦY");
        refreshButton.setFocusPainted(false);
        refreshButton.setFocusable(false);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        reloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/reload (3).png"))); // NOI18N
        reloadButton.setBorder(null);
        reloadButton.setContentAreaFilled(false);
        reloadButton.setFocusable(false);
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CustomerInforPanelLayout = new javax.swing.GroupLayout(CustomerInforPanel);
        CustomerInforPanel.setLayout(CustomerInforPanelLayout);
        CustomerInforPanelLayout.setHorizontalGroup(
            CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CardInforPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomerInforPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CustomerInforPanelLayout.createSequentialGroup()
                        .addComponent(DeleteCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CreateNewCardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateCustomerDateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CustomerInforPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memberCardIDTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reloadButton)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CustomerInforPanelLayout.createSequentialGroup()
                        .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel38)
                            .addComponent(jLabel39)
                            .addComponent(jLabel36)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CustomerInforPanelLayout.createSequentialGroup()
                                .addComponent(memberAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(memberGenderComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(CustomerInforPanelLayout.createSequentialGroup()
                                .addComponent(memberPhoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(CustomerInforPanelLayout.createSequentialGroup()
                                .addComponent(memberFirstNameTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(memberLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        CustomerInforPanelLayout.setVerticalGroup(
            CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerInforPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reloadButton)
                    .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(memberCardIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(memberFirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37)
                    .addComponent(memberLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(memberGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel38)
                        .addComponent(memberAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(memberPhoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CustomerInforPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DeleteCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CreateNewCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UpdateCustomerDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CardInforPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(CustomerInforPanel, java.awt.BorderLayout.LINE_END);

        jPanel6.setLayout(new java.awt.BorderLayout());

        ToolsPanel.setBackground(new java.awt.Color(255, 255, 255));
        ToolsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setText("ID/SĐT/Tên khách hàng:");
        ToolsPanel.add(jLabel4);

        SearchTextField.setPreferredSize(new java.awt.Dimension(160, 26));
        ToolsPanel.add(SearchTextField);

        SearchButton.setBackground(new java.awt.Color(153, 255, 255));
        SearchButton.setText("Tìm kiếm");
        SearchButton.setFocusable(false);
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        ToolsPanel.add(SearchButton);

        ShowCardListButton.setBackground(new java.awt.Color(153, 255, 255));
        ShowCardListButton.setText("Hiển thị toàn bộ danh sách");
        ShowCardListButton.setFocusable(false);
        ShowCardListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCardListButtonActionPerformed(evt);
            }
        });
        ToolsPanel.add(ShowCardListButton);

        jPanel6.add(ToolsPanel, java.awt.BorderLayout.PAGE_START);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MainPanel.setPreferredSize(new java.awt.Dimension(652, 557));

        CustomerCardTable.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã khách/Mã thẻ", "Họ", "Tên", "Tuổi", "Giới tính", "SĐT", "Địa chỉ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        customerTable.setFocusable(false);
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(customerTable);

        searchResultQuantity.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        searchResultQuantity.setForeground(new java.awt.Color(0, 153, 255));

        totalQuantity.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        totalQuantity.setForeground(new java.awt.Color(0, 153, 255));
        totalQuantity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cài đặt chính sách", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        jLabel2.setText("Tổng chi tiêu tối thiểu:");

        jLabel5.setText("Ưu đãi chiết khấu:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 102, 0));
        jLabel12.setText("Đồng");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 153, 153));
        jLabel13.setText("Bạc");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 204, 0));
        jLabel14.setText("Vàng");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 255, 255));
        jLabel15.setText("Kim cương");

        copperDiscount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        copperDiscount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        copperPay.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        copperPay.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        silveDiscount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        silveDiscount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        silvePay.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        silvePay.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        goldenDiscount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        goldenDiscount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        goldenPay.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        goldenPay.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        diamondDiscount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        diamondDiscount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        diamondPay.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        diamondPay.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel17.setText("VNĐ");

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("%");

        changePolicyButton.setBackground(new java.awt.Color(153, 255, 255));
        changePolicyButton.setText("CHỈNH SỬA CHÍNH SÁCH");
        changePolicyButton.setFocusable(false);
        changePolicyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePolicyButtonMouseClicked(evt);
            }
        });
        changePolicyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePolicyButtonActionPerformed(evt);
            }
        });

        agreeWithNewPolicy.setBackground(new java.awt.Color(153, 255, 0));
        agreeWithNewPolicy.setText("ĐỒNG Ý");
        agreeWithNewPolicy.setFocusable(false);
        agreeWithNewPolicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agreeWithNewPolicyActionPerformed(evt);
            }
        });

        cancelPolicyChange.setBackground(new java.awt.Color(255, 51, 0));
        cancelPolicyChange.setForeground(new java.awt.Color(255, 255, 255));
        cancelPolicyChange.setText("HỦY");
        cancelPolicyChange.setFocusable(false);

        jLabel22.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 153, 153));
        jLabel22.setText("(Chiết khấu trên tổng giá trị hóa đơn)");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(302, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addGap(71, 71, 71))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(changePolicyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(agreeWithNewPolicy)
                        .addGap(18, 18, 18)
                        .addComponent(cancelPolicyChange, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(77, 77, 77)
                                .addComponent(jLabel13)
                                .addGap(79, 79, 79)
                                .addComponent(jLabel14)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel15)
                                .addGap(9, 9, 9))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(copperPay))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(copperDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(silvePay)
                                    .addComponent(silveDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(goldenDiscount)
                                    .addComponent(goldenPay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(diamondPay)
                                    .addComponent(diamondDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jLabel14)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(copperPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(goldenPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(silvePay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(diamondPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(copperDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(silveDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(goldenDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diamondDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelPolicyChange, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agreeWithNewPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changePolicyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout CustomerCardTableLayout = new javax.swing.GroupLayout(CustomerCardTable);
        CustomerCardTable.setLayout(CustomerCardTableLayout);
        CustomerCardTableLayout.setHorizontalGroup(
            CustomerCardTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerCardTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CustomerCardTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CustomerCardTableLayout.createSequentialGroup()
                        .addComponent(searchResultQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );
        CustomerCardTableLayout.setVerticalGroup(
            CustomerCardTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomerCardTableLayout.createSequentialGroup()
                .addGroup(CustomerCardTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchResultQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                    .addComponent(totalQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(CustomerCardTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CustomerCardTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.add(MainPanel, java.awt.BorderLayout.CENTER);

        add(jPanel6, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCardButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = customerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Bạn chưa chọn khách hàng!");
        } else {
            int response = JOptionPane.showConfirmDialog(CustomerCardPanel.this,
                    "Bạn muốn xóa thẻ?",
                    "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                customerModel.removeRow(selectedRow);
                customerCardList.getList().remove(selectedRow);
                resetMemberCardValue();
                totalQuantity.setText(String.valueOf("Tổng số: " + customerCardList.getList().size()));
                if (searchResultQuantity.getText().isBlank()) {
                    return;
                }
                setSearchResult();
            }
        }
    }//GEN-LAST:event_DeleteCardButtonActionPerformed

    private void setEnablePolicy(boolean b) {
        silvePay.setEditable(b);
        silveDiscount.setEditable(b);
        goldenDiscount.setEditable(b);
        goldenPay.setEditable(b);
        diamondDiscount.setEditable(b);
        diamondPay.setEditable(b);
        agreeWithNewPolicy.setEnabled(b);
        cancelPolicyChange.setEnabled(b);
        reloadButton.setEnabled(b);
    }

    private void setPolicy(String cp, String cd,
            String sp, String sd,
            String gp, String gd,
            String dp, String dd) {

        copperPay.setText(cp);
        copperDiscount.setText(cd);
        silveDiscount.setText(sd);
        silvePay.setText(sp);
        goldenDiscount.setText(gd);
        goldenPay.setText(gp);
        diamondDiscount.setText(dd);
        diamondPay.setText(dp);

        store.getBronzeDiscountOffer().setK(new BigDecimal(cp));
        store.getBronzeDiscountOffer().setV(Double.valueOf(cd));
        store.getSilverDiscountOffer().setK(new BigDecimal(sp));
        store.getSilverDiscountOffer().setV(Double.valueOf(sd));
        store.getGoldDiscountOffer().setK(new BigDecimal(gp));
        store.getGoldDiscountOffer().setV(Double.valueOf(gd));
        store.getDiamondDiscountOffer().setK(new BigDecimal(dp));
        store.getDiamondDiscountOffer().setV(Double.valueOf(dd));
    }

    private void resetMemberCardValue() {
        memberAddressTextPane.setText("");
        memberAgeTextField.setText("");
        memberCardIDTextField.setText("");
        memberFirstNameTextField.setText("");
        memberGenderComboBox.setSelectedIndex(0);
        memberLastNameTextField.setText("");
        memberPhoneNumberTextField.setText("");
        memberUsagePointTextField.setText("");
        memberTotalPayTextField.setText("");
        memberUsedPointTextField.setText("");
        memberCardRankTextField.setText("");
        setVisibleNeedPay(false);
        customerTable.clearSelection();
        reloadButton.setEnabled(false);
    }

    private boolean checkInformation(String firstName, String lastName, String age, String phone, String address) {
        if (!(checkString(firstName) || checkString(lastName))) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Thông tin họ tên không hợp lệ!\nVui lòng thử lại.",
                    "Đăng kí thất bại!",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (!checkInteger(age)) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Thông tin tuổi không hợp lệ!\nVui lòng thử lại.",
                    "Đăng kí thất bại!",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (!checkPhoneNumber(phone)) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Thông tin số điện thoại không hợp lệ!\nVui lòng thử lại.",
                    "Đăng kí thất bại!",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (!checkString(address)) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Thông tin địa chỉ không hợp lệ!\nVui lòng thử lại.",
                    "Đăng kí thất bại!",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    private void CreateNewCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateNewCardButtonActionPerformed
        // TODO add your handling code here:
        if (checkInformation(
                memberFirstNameTextField.getText(),
                memberLastNameTextField.getText(),
                memberAgeTextField.getText(),
                memberPhoneNumberTextField.getText(),
                memberAddressTextPane.getText())) {
            if (existedPhoneNumber(memberPhoneNumberTextField.getText())) {
                JOptionPane.showMessageDialog(CustomerCardPanel.this,
                        "Số điện thoại đã được đăng kí!");
                return;
            }
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Đăng kí thành công!");
            createNewMemberCard();
            resetMemberCardValue();
            addAllCustomerCardToTable();
            totalQuantity.setText(String.valueOf("Tổng số: " + customerCardList.getList().size()));
        }
    }//GEN-LAST:event_CreateNewCardButtonActionPerformed

    private void ShowCardListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCardListButtonActionPerformed
        // TODO add your handling code here:
        SearchTextField.setText("");
        resetMemberCardValue();
        searchResultQuantity.setText("");
        if (customerCardList.getList().isEmpty()) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Danh sách trống!");
        } else {
            clearTableModel(customerModel);
            addAllCustomerCardToTable();
        }
    }//GEN-LAST:event_ShowCardListButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        String searchingKey = SearchTextField.getText().toLowerCase();
        boolean found = false;
        if (!searchingKey.isBlank()) {
            if (customerCardList.getList().isEmpty()) {
                JOptionPane.showMessageDialog(CustomerCardPanel.this,
                        "Danh sách trống!");
            } else {
                clearTableModel(customerModel);
                for (int i = 0; i < customerCardList.getList().size(); i++) {
                    if (customerCardList.getList().get(i).getID().equals(searchingKey)
                            || customerCardList.getList().get(i).getCustomer().getFirstName().toLowerCase().contains(searchingKey)
                            || customerCardList.getList().get(i).getCustomer().getLastName().toLowerCase().contains(searchingKey)
                            || customerCardList.getList().get(i).getCustomer().getPhoneNumber().equals(searchingKey)) {
                        CustomerCard card = customerCardList.getList().get(i);
                        addNewCustomerCardToTable(card);
                        setSearchResult();
                        found = true;
                    }
                }
                if (!found) {
                    setSearchResult();
                    JOptionPane.showMessageDialog(CustomerCardPanel.this,
                            "Không tìm thấy!");
                    SearchTextField.setText("");
                } else {
                }
            }
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private String cardRank(BigInteger pay) {

        long silverAmount, goldenAmount, diamondAmount;
        silverAmount = Long.parseLong(this.silvePay.getText());
        goldenAmount = Long.parseLong(this.goldenPay.getText());
        diamondAmount = Long.parseLong(this.diamondPay.getText());

        int silve = pay.compareTo(BigInteger.valueOf(silverAmount));
        int golden = pay.compareTo(BigInteger.valueOf(goldenAmount));
        int diamond = pay.compareTo(BigInteger.valueOf(diamondAmount));

        if (silve == -1) {
            return "Đồng";
        } else if (golden == -1) {
            return "Bạc";
        } else if (diamond == -1) {
            return "Vàng";
        }
        return "Kim cương";
    }

    private void setSearchResult() {
        searchResultQuantity.setText("Kết quả phù hợp: " + customerModel.getRowCount());
    }

    private void setVisibleNeedPay(boolean b) {
        needMore.setVisible(b);
        toNextRank.setVisible(b);
        morePayToNextRank.setVisible(b);
    }

    private boolean checkPhoneNumber(String str) {
        if (str.isBlank()) {
            return false;
        } else {
            String reg = "^(0|\\+84)(\\s|\\.)?((3[0-9])|(5[0-9])|(7[0-9])|(8[0-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$";
            if (!str.matches(reg)) {
                return false;
            }
        }
        return true;
    }

    private void showPoint() {
        
        long silverPay, goldPay, diamonPay;
        diamonPay = Long.parseLong(this.diamondPay.getText());
        silverPay = Long.parseLong(this.silvePay.getText());
        goldPay = Long.parseLong(this.goldenPay.getText());

        int rowIndex = customerTable.getSelectedRow();
        if(rowIndex == -1){
            return;
        }
        CustomerCard cc = customerCardList.getList().get(rowIndex);
        BigInteger usedPoint = cc.getUsedPoint();

        BigDecimal pay = BigDecimal.ZERO;
        for (int i = 0; i < cc.getIDOfBoughtOrders().size(); i++) {
            String orderID = cc.getIDOfBoughtOrders().get(i);
            Order order = new HistoryController().containOrder(orderID, store.getHistory());
            BigDecimal bill = new OrderController().getTotal(order, store);
            pay = pay.add(bill);
        }

        BigInteger usagePoint = cc.getPoint();
        String rank = cardRank(cc.getPoint());
        BigDecimal needPay;

        memberCardRankTextField.setText(rank);
        memberUsagePointTextField.setText(usagePoint.toString());
        memberUsedPointTextField.setText(usedPoint.toString());
        memberTotalPayTextField.setText(String.format("%.1f", pay));

        switch (rank) {
            case "Đồng":
                needPay = BigDecimal.valueOf(silverPay).subtract(pay);
                morePayToNextRank.setText(needPay.toString());
                setVisibleNeedPay(true);
                break;
            case "Bạc":
                needPay = BigDecimal.valueOf(goldPay).subtract(pay);
                morePayToNextRank.setText(needPay.toString());
                setVisibleNeedPay(true);
                break;
            case "Vàng":
                needPay = BigDecimal.valueOf(diamonPay).subtract(pay);
                morePayToNextRank.setText(needPay.toString());
                setVisibleNeedPay(true);
                break;
        }
    }

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked
        // TODO add your handling code here:
        int rowIndex = customerTable.getSelectedRow();
        reloadButton.setEnabled(true);

        memberCardIDTextField.setText(customerModel.getValueAt(rowIndex, 0).toString());
        memberFirstNameTextField.setText(customerModel.getValueAt(rowIndex, 1).toString());
        memberLastNameTextField.setText(customerModel.getValueAt(rowIndex, 2).toString());
        memberAgeTextField.setText(customerModel.getValueAt(rowIndex, 3).toString());
        memberGenderComboBox.setSelectedItem(customerModel.getValueAt(rowIndex, 4).toString());
        memberPhoneNumberTextField.setText(customerModel.getValueAt(rowIndex, 5).toString());
        memberAddressTextPane.setText(customerModel.getValueAt(rowIndex, 6).toString());

        showPoint();

    }//GEN-LAST:event_customerTableMouseClicked

    private boolean existedPhoneNumber(String str) {
        for (int i = 0; i < customerCardList.getList().size(); i++) {
            if (str.equals(customerCardList.getList().get(i).getCustomer().getPhoneNumber())) {
                return true;
            }
        }
        return false;
    }

    private void UpdateCustomerDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateCustomerDateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = customerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Bạn chưa chọn khách hàng!");
        } else {
            String firstName = memberFirstNameTextField.getText();
            String lastName = memberLastNameTextField.getText();
            String ageStr = memberAgeTextField.getText();
            String genderStr = memberGenderComboBox.getSelectedItem().toString();
            Gender genderEnum = castStringToGender(genderStr);
            String phoneNo = memberPhoneNumberTextField.getText();
            String address = memberAddressTextPane.getText();

            int age = Integer.parseInt(ageStr);
            if (firstName.equalsIgnoreCase(customerCardList.getList().get(selectedRow).getCustomer().getFirstName())
                    && lastName.equalsIgnoreCase(customerCardList.getList().get(selectedRow).getCustomer().getLastName())
                    && age == customerCardList.getList().get(selectedRow).getCustomer().getAge()
                    && genderEnum.equals(customerCardList.getList().get(selectedRow).getCustomer().getGender())
                    && phoneNo.equals(customerCardList.getList().get(selectedRow).getCustomer().getPhoneNumber())
                    && address.equals(customerCardList.getList().get(selectedRow).getCustomer().getAddress())) {
                JOptionPane.showMessageDialog(CustomerCardPanel.this,
                        "Bạn chưa thay đổi bất kì thông tin nào!");
                return;
            }
            if (checkInformation(firstName, lastName, ageStr, phoneNo, address)) {
                String phone = customerCardList.getList().get(selectedRow).getCustomer().getPhoneNumber();
                customerCardList.getList().get(selectedRow).getCustomer().setPhoneNumber("0000000000");
                if (existedPhoneNumber(phoneNo)) {
                    JOptionPane.showMessageDialog(CustomerCardPanel.this,
                            "Số điện thoại đã được đăng kí!");
                    customerCardList.getList().get(selectedRow).getCustomer().setPhoneNumber(phone);
                    memberPhoneNumberTextField.setText("");
                    return;
                }
                int response = JOptionPane.showConfirmDialog(CustomerCardPanel.this,
                        "Bạn muốn thay đổi thông tin khách hàng?",
                        "Xác nhận",
                        JOptionPane.YES_NO_OPTION);

                if (response == JOptionPane.YES_OPTION) {
                    customerCardList.getList().get(selectedRow).getCustomer().setFirstName(firstName);
                    customerCardList.getList().get(selectedRow).getCustomer().setLastName(lastName);
                    customerCardList.getList().get(selectedRow).getCustomer().setAge(age);
                    customerCardList.getList().get(selectedRow).getCustomer().setGender(genderEnum);
                    customerCardList.getList().get(selectedRow).getCustomer().setPhoneNumber(phoneNo);
                    customerCardList.getList().get(selectedRow).getCustomer().setAddress(address);
                    addAllCustomerCardToTable();
                    resetMemberCardValue();
                }

            }
        }
    }//GEN-LAST:event_UpdateCustomerDateButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        resetMemberCardValue();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void changePolicyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePolicyButtonActionPerformed
        setEnablePolicy(true);
    }//GEN-LAST:event_changePolicyButtonActionPerformed

    private boolean checkIncreasing(String a, String b, String c, String d) {
        return (Double.parseDouble(a) < Double.parseDouble(b)
                && Double.parseDouble(b) < Double.parseDouble(c)
                && Double.parseDouble(c) < Double.parseDouble(d));
    }

    private boolean checkDiscount(String s) {
        double d = Double.parseDouble(s);
        return (d > 100);
    }

    private void agreeWithNewPolicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agreeWithNewPolicyActionPerformed
        // TODO add your handling code here:
        boolean check = true;
        if (!checkInputPayment()) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Thông tin <Chi tiêu tối thiểu> phải là một số nguyên.",
                    "Không hợp lệ!",
                    JOptionPane.WARNING_MESSAGE);
            check = false;
            return;
        }
        if (!checkInputDiscount()) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "Thông tin <Ưu đãi chiết khấu> phải là một số.",
                    "Không hợp lệ!",
                    JOptionPane.WARNING_MESSAGE);
            check = false;
            return;
        }
        getPolicy();
        if (checkDiscount(silveDis) || checkDiscount(copperDis) || checkDiscount(goldenDis) || checkDiscount(diamondDis)) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "<Ưu đãi chiết khấu> không thể lớn hơn 100.");
            check = false;
            return;
        }
        if (!checkIncreasing(copperPayment, silvePayment, goldenPayment, diamondPayment)) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "<Tổng chi tiêu tối thiểu> của thứ hạng sau phải lớn hơn thứ hạng trước.");
            check = false;
            return;
        }
        if (!checkIncreasing(copperDis, silveDis, goldenDis, diamondDis)) {
            JOptionPane.showMessageDialog(CustomerCardPanel.this,
                    "<Ưu đãi chiết khấu> của thứ hạng sau phải lớn hơn thứ hạng trước.");
            check = false;
            return;
        }
        if (check) {
            int response = JOptionPane.showConfirmDialog(CustomerCardPanel.this,
                    "Bạn có chắc muốn thay đổi chính sách ưu đãi?",
                    "Xác nhận thao tác",
                    JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                getPolicy();
                setPolicy(String.valueOf(Long.parseLong(copperPayment)),
                        String.valueOf(Double.parseDouble(copperDis)),
                        String.valueOf(Long.parseLong(silvePayment)),
                        String.valueOf(Double.parseDouble(silveDis)),
                        String.valueOf(Long.parseLong(goldenPayment)),
                        String.valueOf(Double.parseDouble(goldenDis)),
                        String.valueOf(Long.parseLong(diamondPayment)),
                        String.valueOf(Double.parseDouble(diamondDis)));
                setEnablePolicy(false);
                JOptionPane.showMessageDialog(CustomerCardPanel.this,
                        "Thay đổi chính sách ưu đãi thành công!");
            }
        }
        if (customerTable.isRowSelected(customerTable.getSelectedRow())) {
            showPoint();
        }
    }//GEN-LAST:event_agreeWithNewPolicyActionPerformed

    private void changePolicyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePolicyButtonMouseClicked
        getPolicy();
    }//GEN-LAST:event_changePolicyButtonMouseClicked

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        reload();
    }//GEN-LAST:event_reloadButtonActionPerformed
    
    private void setSizeOfEachColumnInGoodsListTable() {
        customerTable.getColumnModel().getColumn(0).setMinWidth(customerIDMaxSize);
        customerTable.getColumnModel().getColumn(1).setMinWidth(customerFirstNameMaxSize);
        customerTable.getColumnModel().getColumn(2).setMinWidth(customerlastNameMaxSize);
        customerTable.getColumnModel().getColumn(3).setMinWidth(customerAgeMaxSize);
        customerTable.getColumnModel().getColumn(4).setMinWidth(customerGenderMaxSize);
        customerTable.getColumnModel().getColumn(5).setMinWidth(customerPhoneNumMaxSize);
        customerTable.getColumnModel().getColumn(6).setMinWidth(customerAddressMaxSize);
    }
    
    private void getPolicy() {
        copperDis = copperDiscount.getText();
        copperPayment = copperPay.getText();
        silveDis = silveDiscount.getText();
        silvePayment = silvePay.getText();
        goldenDis = goldenDiscount.getText();
        goldenPayment = goldenPay.getText();
        diamondDis = diamondDiscount.getText();
        diamondPayment = diamondPay.getText();
    }

    public void setPolicyValue() {
        copperPayment = store.getBronzeDiscountOffer().getK().toString();
        silvePayment = store.getSilverDiscountOffer().getK().toString();
        goldenPayment = store.getGoldDiscountOffer().getK().toString();
        diamondPayment = store.getDiamondDiscountOffer().getK().toString();

        copperDis = store.getBronzeDiscountOffer().getV().toString();
        silveDis = store.getSilverDiscountOffer().getV().toString();
        goldenDis = store.getGoldDiscountOffer().getV().toString();
        diamondDis = store.getDiamondDiscountOffer().getV().toString();
    }
    
    public void reload() {
        setSizeOfEachColumnInGoodsListTable();
        setPolicyValue();
        showPoint();
    }

    public void passData(Store store) {
        this.customerCardList = store.getCustomerCardList();
        this.idGenerator = store.getiDGenerator();
        this.store = store;
        addAllCustomerCardToTable();
        setVisibleNeedPay(false);
        totalQuantity.setText(String.valueOf("Tổng số: " + customerCardList.getList().size()));
        setEnablePolicy(false);
        searchResultQuantity.setText("");
        copperPay.setEditable(false);
        copperDiscount.setEditable(false);
        setPolicyValue();
        setPolicy(copperPayment, copperDis, 
                silvePayment, silveDis, 
                goldenPayment, goldenDis, 
                diamondPayment, diamondDis);
    }

    private CustomerCardList customerCardList;
    private IDGenerator idGenerator;
    private final DefaultTableModel customerModel;
    private Store store;
    public String copperPayment;
    public String copperDis;
    public String silvePayment;
    public String silveDis;
    public String goldenPayment;
    public String goldenDis;
    public String diamondPayment;
    public String diamondDis;
    private final int extraLength = 100;
    private final int customerIDMaxSize = "Mã Khách/Mã thẻ".length() + extraLength;
    private final int customerFirstNameMaxSize = "Họ".length() + extraLength;
    private final int customerlastNameMaxSize = "Tên".length() + extraLength;
    private final int customerAgeMaxSize = "Tuổi".length() + extraLength;
    private final int customerGenderMaxSize = "Giới tính".length() + extraLength;
    private final int customerPhoneNumMaxSize = "SDT".length() + extraLength;
    private final int customerAddressMaxSize = "Địa chỉ".length() + extraLength;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CardInforPanel;
    private javax.swing.JButton CreateNewCardButton;
    private javax.swing.JPanel CustomerCardTable;
    private javax.swing.JPanel CustomerInforPanel;
    private javax.swing.JButton DeleteCardButton;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JButton ShowCardListButton;
    private javax.swing.JPanel ToolsPanel;
    private javax.swing.JButton UpdateCustomerDateButton;
    private javax.swing.JButton agreeWithNewPolicy;
    private javax.swing.JButton cancelPolicyChange;
    private javax.swing.JButton changePolicyButton;
    private javax.swing.JTextField copperDiscount;
    private javax.swing.JTextField copperPay;
    private javax.swing.JTable customerTable;
    private javax.swing.JTextField diamondDiscount;
    private javax.swing.JTextField diamondPay;
    private javax.swing.JTextField goldenDiscount;
    private javax.swing.JTextField goldenPay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane memberAddressTextPane;
    private javax.swing.JTextField memberAgeTextField;
    private javax.swing.JTextField memberCardIDTextField;
    private javax.swing.JTextField memberCardRankTextField;
    private javax.swing.JTextField memberFirstNameTextField;
    private javax.swing.JComboBox<String> memberGenderComboBox;
    private javax.swing.JTextField memberLastNameTextField;
    private javax.swing.JTextField memberPhoneNumberTextField;
    private javax.swing.JTextField memberTotalPayTextField;
    private javax.swing.JTextField memberUsagePointTextField;
    private javax.swing.JTextField memberUsedPointTextField;
    private javax.swing.JLabel morePayToNextRank;
    private javax.swing.JLabel needMore;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton reloadButton;
    private javax.swing.JLabel searchResultQuantity;
    private javax.swing.JTextField silveDiscount;
    private javax.swing.JTextField silvePay;
    private javax.swing.JLabel toNextRank;
    private javax.swing.JLabel totalQuantity;
    // End of variables declaration//GEN-END:variables
}
