/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Controllers.HistoryController;
import Controllers.OrderController;
import Models.EmployeeList;
import Models.Goods;
import Models.History;
import Models.Order;
import Models.Shift;
import Models.Shipment;
import Models.Store;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chi Cute
 */
public class HistoryPanel extends javax.swing.JPanel {

    /**
     * Creates new form HistoryPanel
     */
    public HistoryPanel() {
        initComponents();
        initVariables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historyTabPane = new javax.swing.JTabbedPane();
        orderHistoryPanel = new javax.swing.JPanel();
        searchOrderPanel = new javax.swing.JPanel();
        orderIDToSearchLabel = new javax.swing.JLabel();
        searchOrderIDTextField = new javax.swing.JTextField();
        cashierPhoneNumLable1 = new javax.swing.JLabel();
        fromLabel1 = new javax.swing.JLabel();
        fromDayTextField = new javax.swing.JTextField();
        fromMonthTextField = new javax.swing.JTextField();
        separatorLabel7 = new javax.swing.JLabel();
        separatorLabel8 = new javax.swing.JLabel();
        orderDateLabel1 = new javax.swing.JLabel();
        searchCashierComboBox = new javax.swing.JComboBox<>();
        toLabel2 = new javax.swing.JLabel();
        toDayTextField = new javax.swing.JTextField();
        separatorLabel9 = new javax.swing.JLabel();
        toMonthTextField = new javax.swing.JTextField();
        separatorLabel10 = new javax.swing.JLabel();
        fromYearTextField = new javax.swing.JTextField();
        searchOrderBtn = new javax.swing.JButton();
        toYearTextField = new javax.swing.JTextField();
        refreshBtn = new javax.swing.JButton();
        orderListPanel = new javax.swing.JPanel();
        overViewTableJScrollPane = new javax.swing.JScrollPane();
        overViewTable = new javax.swing.JTable();
        amountOfOrderLabel = new javax.swing.JLabel();
        totalProceedsLabel = new javax.swing.JLabel();
        totalProceedsLabel1 = new javax.swing.JLabel();
        totalProceedsLabel2 = new javax.swing.JLabel();
        orderDetailPanel = new javax.swing.JPanel();
        orderDetailJScrollPane = new javax.swing.JScrollPane();
        orderDetailTable = new javax.swing.JTable();
        reprintBtn = new javax.swing.JButton();
        totalPayment = new javax.swing.JLabel();
        statisticGoodsPanel = new javax.swing.JPanel();
        productReportJScrollPane = new javax.swing.JScrollPane();
        productReportTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        totalReportProceeds = new javax.swing.JLabel();
        totalReportQuantity = new javax.swing.JLabel();
        importHistoryPanel = new javax.swing.JPanel();
        searchShipmentPanel = new javax.swing.JPanel();
        fromLabel = new javax.swing.JLabel();
        fromImportDayTextField = new javax.swing.JTextField();
        toImportMonthTextField = new javax.swing.JTextField();
        separatorLabel11 = new javax.swing.JLabel();
        fromImportMonthTextField = new javax.swing.JTextField();
        fromImportYearTextField = new javax.swing.JTextField();
        toImportYearTextField = new javax.swing.JTextField();
        separatorLabel12 = new javax.swing.JLabel();
        separatorLabel13 = new javax.swing.JLabel();
        orderDateLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        toImportDayTextField = new javax.swing.JTextField();
        separatorLabel14 = new javax.swing.JLabel();
        manufactureLabel = new javax.swing.JLabel();
        manufactureComboBox = new javax.swing.JComboBox<>();
        goodsNameLabel = new javax.swing.JLabel();
        refreashSearchImportHistoryBtn = new javax.swing.JButton();
        searchImportHistoryBtn = new javax.swing.JButton();
        goodsNameTextField = new javax.swing.JTextField();
        displayShipmentPanel = new javax.swing.JPanel();
        importDetailJScrollPane = new javax.swing.JScrollPane();
        importDetailTable = new javax.swing.JTable();
        printImportReportBtn = new javax.swing.JButton();
        staticShipmentsPanel = new javax.swing.JPanel();
        numberOfImportLabel = new javax.swing.JLabel();
        totalOfImportLabel = new javax.swing.JLabel();
        displayNumberOfImportLabel = new javax.swing.JLabel();
        displayTotalOfImportLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(980, 580));
        setPreferredSize(new java.awt.Dimension(980, 580));

        historyTabPane.setBackground(new java.awt.Color(255, 255, 255));
        historyTabPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyTabPaneMouseClicked(evt);
            }
        });

        orderHistoryPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderHistoryPanel.setMinimumSize(new java.awt.Dimension(960, 0));
        orderHistoryPanel.setPreferredSize(new java.awt.Dimension(978, 554));

        searchOrderPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchOrderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm Kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        searchOrderPanel.setMaximumSize(new java.awt.Dimension(32767, 214));
        searchOrderPanel.setMinimumSize(new java.awt.Dimension(315, 214));
        searchOrderPanel.setPreferredSize(new java.awt.Dimension(315, 214));

        orderIDToSearchLabel.setText("Mã HĐ: ");

        searchOrderIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cashierPhoneNumLable1.setText("Thu Ngân:");

        fromLabel1.setText("Từ:");

        fromDayTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromDayTextField.setText("00");
        fromDayTextField.setMaximumSize(new java.awt.Dimension(64, 26));
        fromDayTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fromHourTextFieldMouseExited(evt);
            }
        });
        fromDayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromHourTextFieldKeyPressed(evt);
            }
        });

        fromMonthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromMonthTextField.setText("00");
        fromMonthTextField.setMaximumSize(new java.awt.Dimension(64, 26));
        fromMonthTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fromMinuteTextFieldMouseExited(evt);
            }
        });
        fromMonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromMinuteTextFieldKeyPressed(evt);
            }
        });

        separatorLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel7.setText("/");

        separatorLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel8.setText("/");

        orderDateLabel1.setText("Ngày lập HĐ:");

        toLabel2.setText("Đến:");

        toDayTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toDayTextField.setText("00");
        toDayTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toHourTextField1MouseExited(evt);
            }
        });
        toDayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toHourTextField1KeyPressed(evt);
            }
        });

        separatorLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel9.setText(" /");

        toMonthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toMonthTextField.setText("00");
        toMonthTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toMinuteTextField1MouseExited(evt);
            }
        });
        toMonthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMonthTextFieldActionPerformed(evt);
            }
        });
        toMonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toMinuteTextField1KeyPressed(evt);
            }
        });

        separatorLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel10.setText(" /");

        fromYearTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromYearTextField.setText("2023");
        fromYearTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toSecondTextField1MouseExited(evt);
            }
        });
        fromYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromYearTextFieldActionPerformed(evt);
            }
        });
        fromYearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toSecondTextField1KeyPressed(evt);
            }
        });

        searchOrderBtn.setBackground(new java.awt.Color(0, 255, 0));
        searchOrderBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchOrderBtn.setText("Tìm Kiếm");

        toYearTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toYearTextField.setText("2023");
        toYearTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toYearTextFieldtoSecondTextField1MouseExited(evt);
            }
        });
        toYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toYearTextFieldActionPerformed(evt);
            }
        });
        toYearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toYearTextFieldtoSecondTextField1KeyPressed(evt);
            }
        });

        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/reload (3).png"))); // NOI18N
        refreshBtn.setBorder(null);
        refreshBtn.setContentAreaFilled(false);
        refreshBtn.setFocusable(false);

        javax.swing.GroupLayout searchOrderPanelLayout = new javax.swing.GroupLayout(searchOrderPanel);
        searchOrderPanel.setLayout(searchOrderPanelLayout);
        searchOrderPanelLayout.setHorizontalGroup(
            searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchOrderPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orderIDToSearchLabel)
                                    .addComponent(cashierPhoneNumLable1))
                                .addGap(26, 26, 26)
                                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(searchOrderIDTextField)
                                    .addComponent(searchCashierComboBox, 0, 151, Short.MAX_VALUE)))
                            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                .addComponent(orderDateLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(fromLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(separatorLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(separatorLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(searchOrderPanelLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(toDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                .addComponent(toLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                .addComponent(separatorLabel9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                .addComponent(searchOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addComponent(refreshBtn))
                            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                                .addComponent(toMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(separatorLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        searchOrderPanelLayout.setVerticalGroup(
            searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchOrderIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderIDToSearchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashierPhoneNumLable1)
                    .addComponent(searchCashierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderDateLabel1)
                    .addComponent(fromLabel1)
                    .addComponent(separatorLabel7)
                    .addComponent(fromMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel8)
                    .addComponent(fromYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchOrderPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(searchOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toLabel2)
                            .addComponent(toDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(separatorLabel9)
                            .addComponent(toMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(separatorLabel10)
                            .addComponent(toYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchOrderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(searchOrderPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshBtn)))
                .addContainerGap())
        );

        orderListPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách hóa đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        overViewTableJScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        overViewTableJScrollPane.setToolTipText("");
        overViewTableJScrollPane.setPreferredSize(new java.awt.Dimension(452, 410));

        overViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã HĐ", "Thời gian lập", "Tổng tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        overViewTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        overViewTable.setFocusable(false);
        overViewTable.setPreferredSize(new java.awt.Dimension(350, 80));
        overViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                overViewTableMouseClicked(evt);
            }
        });
        overViewTableJScrollPane.setViewportView(overViewTable);

        amountOfOrderLabel.setText("Số HĐ:");

        totalProceedsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalProceedsLabel.setText("Lợi nhuận ròng:");

        totalProceedsLabel1.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        totalProceedsLabel1.setForeground(new java.awt.Color(255, 0, 0));
        totalProceedsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalProceedsLabel1.setText(" ");
        totalProceedsLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        totalProceedsLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        totalProceedsLabel2.setForeground(new java.awt.Color(255, 0, 0));
        totalProceedsLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalProceedsLabel2.setText(" ");

        javax.swing.GroupLayout orderListPanelLayout = new javax.swing.GroupLayout(orderListPanel);
        orderListPanel.setLayout(orderListPanelLayout);
        orderListPanelLayout.setHorizontalGroup(
            orderListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(overViewTableJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(orderListPanelLayout.createSequentialGroup()
                .addComponent(amountOfOrderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalProceedsLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(totalProceedsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalProceedsLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        orderListPanelLayout.setVerticalGroup(
            orderListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderListPanelLayout.createSequentialGroup()
                .addComponent(overViewTableJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(orderListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(amountOfOrderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalProceedsLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(totalProceedsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(totalProceedsLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        orderDetailPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi tiết hóa đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        orderDetailJScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        orderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "ĐVT", "Đơn giá", "Tổng SL", "Mã lô", "SL hàng", "Tiền hàng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetailTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        orderDetailTable.setShowGrid(true);
        orderDetailJScrollPane.setViewportView(orderDetailTable);

        reprintBtn.setBackground(new java.awt.Color(153, 255, 255));
        reprintBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-print-30.png"))); // NOI18N
        reprintBtn.setText("IN LẠI HĐ");
        reprintBtn.setFocusable(false);
        reprintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reprintBtnActionPerformed(evt);
            }
        });

        totalPayment.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalPayment.setText("Tổng thanh toán:");

        javax.swing.GroupLayout orderDetailPanelLayout = new javax.swing.GroupLayout(orderDetailPanel);
        orderDetailPanel.setLayout(orderDetailPanelLayout);
        orderDetailPanelLayout.setHorizontalGroup(
            orderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderDetailJScrollPane)
                    .addGroup(orderDetailPanelLayout.createSequentialGroup()
                        .addComponent(reprintBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        orderDetailPanelLayout.setVerticalGroup(
            orderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderDetailPanelLayout.createSequentialGroup()
                .addComponent(orderDetailJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(orderDetailPanelLayout.createSequentialGroup()
                        .addComponent(reprintBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        statisticGoodsPanel.setBackground(new java.awt.Color(255, 255, 255));
        statisticGoodsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Báo cáo theo mặt hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        statisticGoodsPanel.setMaximumSize(new java.awt.Dimension(32767, 214));
        statisticGoodsPanel.setMinimumSize(new java.awt.Dimension(661, 214));
        statisticGoodsPanel.setPreferredSize(new java.awt.Dimension(661, 214));

        productReportJScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        productReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "ĐVT", "Tổng SL", "Mã lô", "SL hàng", "Tiền hàng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productReportTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        productReportTable.setMinimumSize(new java.awt.Dimension(651, 136));
        productReportTable.setPreferredSize(new java.awt.Dimension(651, 136));
        productReportTable.setShowGrid(true);
        productReportJScrollPane.setViewportView(productReportTable);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Tổng số:");

        totalReportProceeds.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        totalReportProceeds.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalReportProceeds.setText("...");

        totalReportQuantity.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        totalReportQuantity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalReportQuantity.setText("...");

        javax.swing.GroupLayout statisticGoodsPanelLayout = new javax.swing.GroupLayout(statisticGoodsPanel);
        statisticGoodsPanel.setLayout(statisticGoodsPanelLayout);
        statisticGoodsPanelLayout.setHorizontalGroup(
            statisticGoodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticGoodsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statisticGoodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statisticGoodsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalReportQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addComponent(totalReportProceeds, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(productReportJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        statisticGoodsPanelLayout.setVerticalGroup(
            statisticGoodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticGoodsPanelLayout.createSequentialGroup()
                .addComponent(productReportJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statisticGoodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(totalReportProceeds)
                    .addComponent(totalReportQuantity)))
        );

        javax.swing.GroupLayout orderHistoryPanelLayout = new javax.swing.GroupLayout(orderHistoryPanel);
        orderHistoryPanel.setLayout(orderHistoryPanelLayout);
        orderHistoryPanelLayout.setHorizontalGroup(
            orderHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderHistoryPanelLayout.createSequentialGroup()
                .addGroup(orderHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statisticGoodsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        orderHistoryPanelLayout.setVerticalGroup(
            orderHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderHistoryPanelLayout.createSequentialGroup()
                .addGroup(orderHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statisticGoodsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(searchOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(orderHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orderListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        historyTabPane.addTab("Lịch sử bán hàng", orderHistoryPanel);

        importHistoryPanel.setBackground(new java.awt.Color(255, 255, 255));
        importHistoryPanel.setMinimumSize(new java.awt.Dimension(982, 558));
        importHistoryPanel.setPreferredSize(new java.awt.Dimension(982, 558));

        searchShipmentPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchShipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        fromLabel.setText("Từ:");

        fromImportDayTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromImportDayTextField.setText("00");
        fromImportDayTextField.setMaximumSize(new java.awt.Dimension(64, 26));
        fromImportDayTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fromImportDayTextFieldMouseExited(evt);
            }
        });
        fromImportDayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromImportDayTextFieldKeyPressed(evt);
            }
        });

        toImportMonthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toImportMonthTextField.setText("00");
        toImportMonthTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toImportMonthTextFieldMouseExited(evt);
            }
        });
        toImportMonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toImportMonthTextFieldKeyPressed(evt);
            }
        });

        separatorLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel11.setText("/");

        fromImportMonthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromImportMonthTextField.setText("00");
        fromImportMonthTextField.setMaximumSize(new java.awt.Dimension(64, 26));
        fromImportMonthTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fromImportMonthTextFieldMouseExited(evt);
            }
        });
        fromImportMonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromImportMonthTextFieldKeyPressed(evt);
            }
        });

        fromImportYearTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromImportYearTextField.setText("2023");
        fromImportYearTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fromImportYearTextFieldMouseExited(evt);
            }
        });
        fromImportYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromImportYearTextFieldActionPerformed(evt);
            }
        });
        fromImportYearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromImportYearTextFieldKeyPressed(evt);
            }
        });

        toImportYearTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toImportYearTextField.setText("2023");
        toImportYearTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toImportYearTextFieldMouseExited(evt);
            }
        });
        toImportYearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toImportYearTextFieldKeyPressed(evt);
            }
        });

        separatorLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel12.setText("/");

        separatorLabel13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel13.setText("/");

        orderDateLabel.setText("Ngày nhập:");

        toLabel.setText("Đến:");

        toImportDayTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toImportDayTextField.setText("00");
        toImportDayTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                toImportDayTextFieldMouseExited(evt);
            }
        });
        toImportDayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toImportDayTextFieldKeyPressed(evt);
            }
        });

        separatorLabel14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel14.setText("/");

        manufactureLabel.setText("Nhà sản xuất:");

        goodsNameLabel.setText("Mặt hàng:");

        refreashSearchImportHistoryBtn.setBackground(new java.awt.Color(0, 0, 0));
        refreashSearchImportHistoryBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreashSearchImportHistoryBtn.setText("Làm Mới");
        refreashSearchImportHistoryBtn.setMaximumSize(new java.awt.Dimension(80, 23));
        refreashSearchImportHistoryBtn.setMinimumSize(new java.awt.Dimension(80, 23));
        refreashSearchImportHistoryBtn.setPreferredSize(new java.awt.Dimension(80, 23));

        searchImportHistoryBtn.setBackground(new java.awt.Color(0, 255, 0));
        searchImportHistoryBtn.setText("Tìm Kiếm");

        javax.swing.GroupLayout searchShipmentPanelLayout = new javax.swing.GroupLayout(searchShipmentPanel);
        searchShipmentPanel.setLayout(searchShipmentPanelLayout);
        searchShipmentPanelLayout.setHorizontalGroup(
            searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchShipmentPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchShipmentPanelLayout.createSequentialGroup()
                        .addComponent(manufactureLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manufactureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchShipmentPanelLayout.createSequentialGroup()
                        .addComponent(orderDateLabel)
                        .addGap(18, 18, 18)
                        .addComponent(fromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromImportDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromImportMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromImportYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchShipmentPanelLayout.createSequentialGroup()
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(toImportDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toImportMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toImportYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchShipmentPanelLayout.createSequentialGroup()
                        .addComponent(goodsNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goodsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchImportHistoryBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreashSearchImportHistoryBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        searchShipmentPanelLayout.setVerticalGroup(
            searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchShipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manufactureLabel)
                    .addComponent(manufactureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goodsNameLabel)
                    .addComponent(goodsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreashSearchImportHistoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderDateLabel)
                    .addComponent(fromLabel)
                    .addComponent(fromImportDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel12)
                    .addComponent(fromImportMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel13)
                    .addComponent(fromImportYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(toImportDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel14)
                    .addComponent(toImportMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel11)
                    .addComponent(toImportYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchImportHistoryBtn))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        displayShipmentPanel.setBackground(new java.awt.Color(255, 255, 255));
        displayShipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Báo cáo chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        importDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Nhà sản xuất", "Ngày nhập", "ĐVT", "Tổng SL", "Mã lô", "Giá nhập", "SL hàng", "Tiền hàng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        importDetailTable.setAutoscrolls(false);
        importDetailTable.setShowGrid(true);
        importDetailJScrollPane.setViewportView(importDetailTable);

        printImportReportBtn.setBackground(new java.awt.Color(153, 255, 255));
        printImportReportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-print-30.png"))); // NOI18N
        printImportReportBtn.setText("IN BÁO CÁO");
        printImportReportBtn.setFocusable(false);
        printImportReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printImportReportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayShipmentPanelLayout = new javax.swing.GroupLayout(displayShipmentPanel);
        displayShipmentPanel.setLayout(displayShipmentPanelLayout);
        displayShipmentPanelLayout.setHorizontalGroup(
            displayShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayShipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(importDetailJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayShipmentPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(printImportReportBtn)))
                .addContainerGap())
        );
        displayShipmentPanelLayout.setVerticalGroup(
            displayShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayShipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importDetailJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printImportReportBtn))
        );

        staticShipmentsPanel.setBackground(new java.awt.Color(255, 255, 255));
        staticShipmentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Báo cáo chung", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        numberOfImportLabel.setText("Số lần nhập hàng:");

        totalOfImportLabel.setText("Tổng tiền hàng:");

        displayNumberOfImportLabel.setText("...");

        displayTotalOfImportLabel.setText("...");

        javax.swing.GroupLayout staticShipmentsPanelLayout = new javax.swing.GroupLayout(staticShipmentsPanel);
        staticShipmentsPanel.setLayout(staticShipmentsPanelLayout);
        staticShipmentsPanelLayout.setHorizontalGroup(
            staticShipmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staticShipmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(staticShipmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(totalOfImportLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numberOfImportLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(staticShipmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayNumberOfImportLabel)
                    .addComponent(displayTotalOfImportLabel))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        staticShipmentsPanelLayout.setVerticalGroup(
            staticShipmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staticShipmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(staticShipmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfImportLabel)
                    .addComponent(displayNumberOfImportLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(staticShipmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalOfImportLabel)
                    .addComponent(displayTotalOfImportLabel))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout importHistoryPanelLayout = new javax.swing.GroupLayout(importHistoryPanel);
        importHistoryPanel.setLayout(importHistoryPanelLayout);
        importHistoryPanelLayout.setHorizontalGroup(
            importHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importHistoryPanelLayout.createSequentialGroup()
                .addGroup(importHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(importHistoryPanelLayout.createSequentialGroup()
                        .addComponent(searchShipmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(staticShipmentsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(displayShipmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        importHistoryPanelLayout.setVerticalGroup(
            importHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importHistoryPanelLayout.createSequentialGroup()
                .addGroup(importHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchShipmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(staticShipmentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayShipmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        historyTabPane.addTab("Lịch sử nhập hàng", importHistoryPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyTabPane))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(historyTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 585, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void toSecondTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toSecondTextField1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toSecondTextField1KeyPressed

    private void toSecondTextField1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toSecondTextField1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toSecondTextField1MouseExited

    private void toMinuteTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toMinuteTextField1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toMinuteTextField1KeyPressed

    private void toMinuteTextField1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toMinuteTextField1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toMinuteTextField1MouseExited

    private void toHourTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toHourTextField1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toHourTextField1KeyPressed

    private void toHourTextField1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toHourTextField1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toHourTextField1MouseExited

    private void fromMinuteTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromMinuteTextFieldKeyPressed

    }//GEN-LAST:event_fromMinuteTextFieldKeyPressed

    private void fromMinuteTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromMinuteTextFieldMouseExited

    }//GEN-LAST:event_fromMinuteTextFieldMouseExited

    private void fromHourTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromHourTextFieldKeyPressed

    }//GEN-LAST:event_fromHourTextFieldKeyPressed

    private void fromHourTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromHourTextFieldMouseExited

    }//GEN-LAST:event_fromHourTextFieldMouseExited

    private void overViewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_overViewTableMouseClicked
        int selectedRow = overViewTable.getSelectedRow();
        if (selectedRow != -1) {
            String orderID = (String)overViewModel.getValueAt(selectedRow, 0);
            Order order = historyCtr.containOrder(orderID, history);
            insertOrderToOrderDetailTable(order);
        }
    }//GEN-LAST:event_overViewTableMouseClicked

    private void reprintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprintBtnActionPerformed

    }//GEN-LAST:event_reprintBtnActionPerformed

    private void fromImportDayTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromImportDayTextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportDayTextFieldMouseExited

    private void fromImportDayTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromImportDayTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportDayTextFieldKeyPressed

    private void toImportMonthTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toImportMonthTextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toImportMonthTextFieldMouseExited

    private void toImportMonthTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toImportMonthTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toImportMonthTextFieldKeyPressed

    private void fromImportMonthTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromImportMonthTextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportMonthTextFieldMouseExited

    private void fromImportMonthTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromImportMonthTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportMonthTextFieldKeyPressed

    private void fromImportYearTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromImportYearTextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportYearTextFieldMouseExited

    private void fromImportYearTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromImportYearTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportYearTextFieldKeyPressed

    private void toImportYearTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toImportYearTextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toImportYearTextFieldMouseExited

    private void toImportYearTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toImportYearTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toImportYearTextFieldKeyPressed

    private void toImportDayTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toImportDayTextFieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toImportDayTextFieldMouseExited

    private void toImportDayTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toImportDayTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toImportDayTextFieldKeyPressed

    private void fromYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromYearTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromYearTextFieldActionPerformed

    private void toYearTextFieldtoSecondTextField1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toYearTextFieldtoSecondTextField1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_toYearTextFieldtoSecondTextField1MouseExited

    private void toYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toYearTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toYearTextFieldActionPerformed

    private void toYearTextFieldtoSecondTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toYearTextFieldtoSecondTextField1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_toYearTextFieldtoSecondTextField1KeyPressed

    private void toMonthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toMonthTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toMonthTextFieldActionPerformed

    private void fromImportYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromImportYearTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromImportYearTextFieldActionPerformed

    private void printImportReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printImportReportBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printImportReportBtnActionPerformed

    private void historyTabPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyTabPaneMouseClicked
        int selectedIndex = historyTabPane.getSelectedIndex();
        currentPanel = (selectedIndex == 0);
    }//GEN-LAST:event_historyTabPaneMouseClicked

    private void passValueToSearchCashierComboBox() {
        searchCashierComboBox.removeAllItems();
        employeeList.getList().stream().forEach(e -> searchCashierComboBox.addItem(e.toString()));
    }

    private void clearTableModel(DefaultTableModel tableModel) {
        int count = tableModel.getRowCount();
        for (int i = 0; i < count; i++) {
            tableModel.removeRow(i);
        }
    }

    private void insertOrderToOrderDetailTable(Order order) {
        clearTableModel(orderDetailModel);
        for (Goods goods : order.getList()) {
            int size = goods.getShipments().size();
            for (int i = 0; i < size; i++) {
                if(i == 0){
                    insertNewGoodsToOrderDetailTable(goods, goods.getShipments().get(i));
                }else{
                    insertExistedGoodsToOrderDetailTable(goods, goods.getShipments().get(i));
                }
            }
        }
    }

    private void insertNewGoodsToOrderDetailTable(Goods goods, Shipment shipment) {
        orderDetailModel.addRow(new Object[]{
            goods.getID(),
            goods.getGoodsName(),
            goods.getUnit(),
            String.format(".1f",goods.getListPrice()),
            String.format(".1f",goods.getTotalQuantity()),
            shipment.getID(),
            shipment.getQuantity(),
            String.format(".1f", shipment.getQuantity().multiply(goods.getListPrice()))
        });
    }

    private void insertExistedGoodsToOrderDetailTable(Goods goods, Shipment shipment) {
        orderDetailModel.addRow(new Object[]{
            "",
            "",
            "",
            "",
            "",
            shipment.getID(),
            shipment.getQuantity(),
            String.format(".1f", shipment.getQuantity().multiply(goods.getListPrice()))
        });
    }
    
    private void insertOrderToOverViewTable(List<Order> orderHistory) {
        clearTableModel(overViewModel);
        history.getShiftHistory()
                .stream()
                .forEach(shift -> shift
                .getOrderHisPerShift()
                .forEach(order -> overViewModel.addRow(new Object[]{
            order.getID(),
            order.getOrderDateTime().format(DateTimeFormatter
            .ofPattern(DATE_TIME_PATTERN)),
            String.format("%.1f", orderCtr.getTotal(order, store))
        })));
    }

    private void computeSizeOfEachColumnInTable() {
        // duyet tu dau den cuoi mang de tim MAX_SIZE cua giatri input tung thuoc tinh
        for (Shift shift : history.getShiftHistory()) {
            for (Order order : shift.getOrderHisPerShift()) {
                if (order.getID().length() + extraLength > orderIDMaxSize) {
                    orderIDMaxSize = order.getID().length() + extraLength;
                }
                if (order.getOrderDateTime().format(DateTimeFormatter
                        .ofPattern(DATE_TIME_PATTERN)).length() + extraLength > orderDateTimeMaxSize) {
                    orderDateTimeMaxSize = order.getOrderDateTime().format(DateTimeFormatter
                            .ofPattern(DATE_TIME_PATTERN)).length() + extraLength;
                }
                if (String.format(".1f", orderCtr.getTotal(order, store)).length() + extraLength
                        > orderTotalMaxSize) {
                    orderTotalMaxSize = String.format(".1f", orderCtr.getTotal(order, store)).length() + extraLength;
                }
                for (Goods goods : order.getList()) {
                    if (goods.getID().length() + extraLength > goodsIDMaxSize) {
                        goodsIDMaxSize = goods.getID().length() + extraLength;
                    }
                    if (goods.getGoodsName().length() + extraLength > goodsNameMaxSize) {
                        goodsNameMaxSize = goods.getGoodsName().length() + extraLength;
                    }
                    if (goods.getUnit().length() + extraLength > unitMaxSize) {
                        unitMaxSize = goods.getUnit().length() + extraLength;
                    }
                    if (String.format(".1f", goods.getListPrice()).length() + extraLength > listPriceMaxSize) {
                        listPriceMaxSize = String.format(".1f", goods.getListPrice()).length() + extraLength;
                    }
                    if (String.format(".1f", goods.getTotalQuantity()).length() + extraLength > totalQuanMaxSize) {
                        totalQuanMaxSize = String.format(".1f", goods.getTotalQuantity()).length() + extraLength;
                    }
                    for (Shipment shipment : goods.getShipments()) {
                        if (shipment.getID().length() + extraLength > shipmentIDMaxSize) {
                            shipmentIDMaxSize = shipment.getID().length() + extraLength;
                        }
//                        if (shipment.getID().length() + extraLength > shipmentIDMaxSize) {
//                            shipmentIDMaxSize = shipment.getID().length() + extraLength;
//                        }
                        if (String.format(".1f", shipment.getQuantity()).length() + extraLength > quanMaxSize) {
                            quanMaxSize = String.format(".1f", shipment.getQuantity()).length() + extraLength;
                        }
                    }
                }
            }
        }
        overViewTable.getColumnModel().getColumn(0).setMinWidth(orderIDMaxSize);
        overViewTable.getColumnModel().getColumn(1).setMinWidth(orderDateTimeMaxSize);
        overViewTable.getColumnModel().getColumn(2).setMinWidth(orderTotalMaxSize);
        orderDetailTable.getColumnModel().getColumn(0).setMinWidth(goodsIDMaxSize);
        orderDetailTable.getColumnModel().getColumn(1).setMinWidth(goodsNameMaxSize);
        orderDetailTable.getColumnModel().getColumn(2).setMinWidth(unitMaxSize);
        orderDetailTable.getColumnModel().getColumn(3).setMinWidth(listPriceMaxSize);
        orderDetailTable.getColumnModel().getColumn(4).setMinWidth(totalQuanMaxSize);
        orderDetailTable.getColumnModel().getColumn(5).setMinWidth(shipmentIDMaxSize);
        orderDetailTable.getColumnModel().getColumn(6).setMinWidth(quanMaxSize);
//        orderDetailTable.getColumnModel().getColumn(7).setMinWidth();
        productReportTable.getColumnModel().getColumn(0).setMinWidth(goodsIDMaxSize);
        productReportTable.getColumnModel().getColumn(1).setMinWidth(goodsNameMaxSize);
        productReportTable.getColumnModel().getColumn(2).setMinWidth(unitMaxSize);
        productReportTable.getColumnModel().getColumn(3).setMinWidth(totalQuanMaxSize);
        productReportTable.getColumnModel().getColumn(4).setMinWidth(shipmentIDMaxSize);
        productReportTable.getColumnModel().getColumn(5).setMinWidth(quanMaxSize);
//        productReportTable.getColumnModel().getColumn(6).setMinWidth();
    }

    public void passData(History history, EmployeeList employeeList, Store store) {
        this.history = history;
        this.employeeList = employeeList;
        this.store = store;
    }

    private void refreshOrderHistoryPanel() {
        computeSizeOfEachColumnInTable();
        passValueToSearchCashierComboBox();
    }

    private void refreshImportHistoryPanel() {

    }

    public void refresh() {
        if (currentPanel) {
            refreshOrderHistoryPanel();
        } else {
            refreshImportHistoryPanel();
        }
    }

    private void initVariables() {
        // Table 
        overViewModel = (DefaultTableModel) overViewTable.getModel();
        overViewTableJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        overViewTableJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        orderDetailModel = (DefaultTableModel) orderDetailTable.getModel();
        orderDetailJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        orderDetailJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        productReportModel = (DefaultTableModel) productReportTable.getModel();
        productReportJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        productReportJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        // Biến khác
        orderCtr = new OrderController();
        historyCtr = new HistoryController();
    }

    private OrderController orderCtr;
    private HistoryController historyCtr;
    // currentPanel == true : đang ở lịch sử hóa đơn; == false thì đang ở lịch sử nhập hàng
    private boolean currentPanel = true;
    private EmployeeList employeeList;
    private Store store;
    private History history;
    private DefaultTableModel overViewModel;
    private DefaultTableModel productReportModel;
    private DefaultTableModel orderDetailModel;
    private DefaultTableModel importDetailModel;
    private final int extraLength = 40;
    private int orderIDMaxSize = "Ma hd".length() + extraLength;
    private int orderDateTimeMaxSize = "Thoi gian lap".length() + extraLength;
    private int orderTotalMaxSize = "Tong tien".length() + extraLength;
    private int goodsNameMaxSize = "Ten SP".length() + extraLength;
    private int goodsIDMaxSize = "Ma SP".length() + extraLength;
    private int unitMaxSize = "dvt".length() + extraLength;
    private int totalQuanMaxSize = "Tong sl".length() + extraLength;
    private int shipmentIDMaxSize = "ma lo".length() + extraLength;
    private int quanMaxSize = "SL hang".length() + extraLength;
    private int totalPerGoodsMaxSize = "tien hang".length() + extraLength;
    private int listPriceMaxSize = "don gia".length() + extraLength;
    private final String DATE_TIME_PATTERN = "HH:mm:ss dd/MM/yyyy";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amountOfOrderLabel;
    private javax.swing.JLabel cashierPhoneNumLable1;
    private javax.swing.JLabel displayNumberOfImportLabel;
    private javax.swing.JPanel displayShipmentPanel;
    private javax.swing.JLabel displayTotalOfImportLabel;
    private javax.swing.JTextField fromDayTextField;
    private javax.swing.JTextField fromImportDayTextField;
    private javax.swing.JTextField fromImportMonthTextField;
    private javax.swing.JTextField fromImportYearTextField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel fromLabel1;
    private javax.swing.JTextField fromMonthTextField;
    private javax.swing.JTextField fromYearTextField;
    private javax.swing.JLabel goodsNameLabel;
    private javax.swing.JTextField goodsNameTextField;
    private javax.swing.JTabbedPane historyTabPane;
    private javax.swing.JScrollPane importDetailJScrollPane;
    private javax.swing.JTable importDetailTable;
    private javax.swing.JPanel importHistoryPanel;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox<String> manufactureComboBox;
    private javax.swing.JLabel manufactureLabel;
    private javax.swing.JLabel numberOfImportLabel;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JLabel orderDateLabel1;
    private javax.swing.JScrollPane orderDetailJScrollPane;
    private javax.swing.JPanel orderDetailPanel;
    private javax.swing.JTable orderDetailTable;
    private javax.swing.JPanel orderHistoryPanel;
    private javax.swing.JLabel orderIDToSearchLabel;
    private javax.swing.JPanel orderListPanel;
    private javax.swing.JTable overViewTable;
    private javax.swing.JScrollPane overViewTableJScrollPane;
    private javax.swing.JButton printImportReportBtn;
    private javax.swing.JScrollPane productReportJScrollPane;
    private javax.swing.JTable productReportTable;
    private javax.swing.JButton refreashSearchImportHistoryBtn;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton reprintBtn;
    private javax.swing.JComboBox<String> searchCashierComboBox;
    private javax.swing.JButton searchImportHistoryBtn;
    private javax.swing.JButton searchOrderBtn;
    private javax.swing.JTextField searchOrderIDTextField;
    private javax.swing.JPanel searchOrderPanel;
    private javax.swing.JPanel searchShipmentPanel;
    private javax.swing.JLabel separatorLabel10;
    private javax.swing.JLabel separatorLabel11;
    private javax.swing.JLabel separatorLabel12;
    private javax.swing.JLabel separatorLabel13;
    private javax.swing.JLabel separatorLabel14;
    private javax.swing.JLabel separatorLabel7;
    private javax.swing.JLabel separatorLabel8;
    private javax.swing.JLabel separatorLabel9;
    private javax.swing.JPanel staticShipmentsPanel;
    private javax.swing.JPanel statisticGoodsPanel;
    private javax.swing.JTextField toDayTextField;
    private javax.swing.JTextField toImportDayTextField;
    private javax.swing.JTextField toImportMonthTextField;
    private javax.swing.JTextField toImportYearTextField;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel toLabel2;
    private javax.swing.JTextField toMonthTextField;
    private javax.swing.JTextField toYearTextField;
    private javax.swing.JLabel totalOfImportLabel;
    private javax.swing.JLabel totalPayment;
    private javax.swing.JLabel totalProceedsLabel;
    private javax.swing.JLabel totalProceedsLabel1;
    private javax.swing.JLabel totalProceedsLabel2;
    private javax.swing.JLabel totalReportProceeds;
    private javax.swing.JLabel totalReportQuantity;
    // End of variables declaration//GEN-END:variables
}
