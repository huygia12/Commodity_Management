/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import static GUI.MainFrame.employeeList;
import Models.Employee;
import Models.EmployeeList;
import Models.Gender;
import Models.Shift;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DTuyen16
 */
public class EmployJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EmployJPanel
     */
    public EmployJPanel() {
        initComponents();
        displayEmployees();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderbuttonGroup = new javax.swing.ButtonGroup();
        inputInfoPanel = new javax.swing.JPanel();
        inputFirstNameLabel = new javax.swing.JLabel();
        inputFirstNameTextField = new javax.swing.JTextField();
        inputLastNameLabel = new javax.swing.JLabel();
        inputLastNameTextField1 = new javax.swing.JTextField();
        inputAgeLabel = new javax.swing.JLabel();
        inputAgeTextField = new javax.swing.JTextField();
        inputGenderLabel = new javax.swing.JLabel();
        maleButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        otherRadioButton = new javax.swing.JRadioButton();
        inputPhoneLabel = new javax.swing.JLabel();
        inputPhoneTextField = new javax.swing.JTextField();
        inputAdressLabel = new javax.swing.JLabel();
        inputAdressField = new javax.swing.JTextField();
        inputCCCDLabel = new javax.swing.JLabel();
        inputCCCDTextField = new javax.swing.JTextField();
        inputSalaryLabel = new javax.swing.JLabel();
        inputSalaryTextField = new javax.swing.JTextField();
        functionPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        changeButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        searchIDTextField = new javax.swing.JTextField();
        showAllButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        quantityEmployLabel = new javax.swing.JLabel();
        quantityEmploytextField = new javax.swing.JTextField();
        displayPanel = new javax.swing.JPanel();
        displayScrollPane = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "THÔNG TIN NHÂN VIÊN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18))); // NOI18N
        setPreferredSize(new java.awt.Dimension(970, 560));

        inputFirstNameLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputFirstNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputFirstNameLabel.setText("Họ:");
        inputFirstNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        inputFirstNameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputFirstNameTextFieldMouseClicked(evt);
            }
        });

        inputLastNameLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputLastNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputLastNameLabel.setText("Tên:");

        inputLastNameTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputLastNameTextField1MouseClicked(evt);
            }
        });
        inputLastNameTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputLastNameTextField1ActionPerformed(evt);
            }
        });

        inputAgeLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputAgeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputAgeLabel.setText("Tuổi:");

        inputGenderLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputGenderLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputGenderLabel.setText("Giới tính:");

        genderbuttonGroup.add(maleButton);
        maleButton.setSelected(true);
        maleButton.setText("MALE");
        maleButton.setAutoscrolls(true);

        genderbuttonGroup.add(femaleRadioButton);
        femaleRadioButton.setText("FEMALE");
        femaleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleRadioButtonActionPerformed(evt);
            }
        });

        genderbuttonGroup.add(otherRadioButton);
        otherRadioButton.setText("OTHER");

        inputPhoneLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputPhoneLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputPhoneLabel.setText("SĐT:");

        inputPhoneTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputPhoneTextFieldMouseClicked(evt);
            }
        });

        inputAdressLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputAdressLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputAdressLabel.setText("Địa chỉ:");

        inputCCCDLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputCCCDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputCCCDLabel.setText("CCCD:");

        inputCCCDTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputCCCDTextFieldMouseClicked(evt);
            }
        });

        inputSalaryLabel.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        inputSalaryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputSalaryLabel.setText("Lương/h:");

        javax.swing.GroupLayout inputInfoPanelLayout = new javax.swing.GroupLayout(inputInfoPanel);
        inputInfoPanel.setLayout(inputInfoPanelLayout);
        inputInfoPanelLayout.setHorizontalGroup(
            inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputGenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputLastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(inputLastNameTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(otherRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputAgeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maleButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(femaleRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFirstNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputInfoPanelLayout.createSequentialGroup()
                        .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputAdressLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputCCCDLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputSalaryLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputInfoPanelLayout.createSequentialGroup()
                        .addComponent(inputPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(inputPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputAdressField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputCCCDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inputSalaryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        inputInfoPanelLayout.setVerticalGroup(
            inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputInfoPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputInfoPanelLayout.createSequentialGroup()
                        .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputFirstNameLabel)
                            .addComponent(inputFirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputPhoneLabel)
                            .addComponent(inputPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputLastNameLabel)
                            .addComponent(inputLastNameTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputAdressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputAdressLabel))
                        .addGap(18, 18, 18)
                        .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputAgeLabel)
                            .addComponent(inputAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputCCCDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputCCCDLabel))
                        .addGap(18, 18, 18)
                        .addGroup(inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputGenderLabel)
                            .addComponent(maleButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputSalaryLabel)
                        .addComponent(inputSalaryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(femaleRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(otherRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        addButton.setText("THÊM");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        changeButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        changeButton.setText("SỬA");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        removeButton.setText("XÓA");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        searchButton.setText("TÌM KIẾM");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        showAllButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        showAllButton.setText("Hiện thị thông tin ");
        showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cancelButton.setText("HỦY");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        quantityEmployLabel.setText("Số lượng nhân viên: ");

        quantityEmploytextField.setEditable(false);

        javax.swing.GroupLayout functionPanelLayout = new javax.swing.GroupLayout(functionPanel);
        functionPanel.setLayout(functionPanelLayout);
        functionPanelLayout.setHorizontalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, functionPanelLayout.createSequentialGroup()
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(functionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(changeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(functionPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(functionPanelLayout.createSequentialGroup()
                                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(searchIDTextField)
                                    .addComponent(showAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(31, 31, 31)
                                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(functionPanelLayout.createSequentialGroup()
                                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(functionPanelLayout.createSequentialGroup()
                                        .addComponent(quantityEmployLabel)
                                        .addGap(1, 1, 1)
                                        .addComponent(quantityEmploytextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(1, 1, 1)))))
                .addGap(38, 38, 38))
        );
        functionPanelLayout.setVerticalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, functionPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(showAllButton))
                .addGap(18, 18, 18)
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(functionPanelLayout.createSequentialGroup()
                        .addComponent(changeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 20, Short.MAX_VALUE)
                        .addComponent(removeButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton))
                    .addGroup(functionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityEmployLabel)
                            .addComponent(quantityEmploytextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Họ", "Tên", "Tuổi", "Giới tính", "Địa chỉ", "SĐT", "CCCD", "Lương/h"
            }
        ));
        displayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayTableMouseClicked(evt);
            }
        });
        displayScrollPane.setViewportView(displayTable);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 936, Short.MAX_VALUE)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(displayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 461, Short.MAX_VALUE)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(displayPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(displayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(functionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(functionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
 private void displayEmployees() {
        DefaultTableModel model = (DefaultTableModel) displayTable.getModel();
        model.setRowCount(0);
        for (Employee employee : employeeList.getList()) {
            Object[] rowData = {employee.getFirstName(), employee.getLastName(), employee.getAge(), employee.getGender(), employee.getAddress(), employee.getPhoneNumber(), employee.getCCCD(), employee.getSalaryPerDay()};
            model.addRow(rowData);
        }
        updateEmployeeCount();
    }

    private void showTable(List<Employee> employees) {
        DefaultTableModel model = (DefaultTableModel) displayTable.getModel();
        model.setRowCount(0);
        for (Employee employee : employees) {
            Object[] rowData = {employee.getFirstName(), employee.getLastName(), employee.getAge(), employee.getGender(), employee.getAddress(), employee.getPhoneNumber(), employee.getCCCD(), employee.getSalaryPerDay()};
            model.addRow(rowData);
        }
    }

    private void setTextFieldProperties(javax.swing.JTextField textField, int fontSize) {
        textField.setFont(new java.awt.Font("Segoe UI", 0, fontSize));
        textField.setForeground(new java.awt.Color(0, 0, 0));
        textField.setEditable(true);
    }

    private void clearInputFields() {
        setTextFieldProperties(inputFirstNameTextField, 11);
        setTextFieldProperties(inputLastNameTextField1, 11);
        setTextFieldProperties(inputAgeTextField, 11);
        setTextFieldProperties(inputAdressField, 11);
        setTextFieldProperties(inputCCCDTextField, 11);
        setTextFieldProperties(inputPhoneTextField, 11);
        setTextFieldProperties(inputSalaryTextField, 11);
        // genderbuttonGroup.clearSelection();

        inputFirstNameTextField.setText("");
        inputLastNameTextField1.setText("");
        inputAgeTextField.setText("");
        inputAdressField.setText("");
        inputCCCDTextField.setText("");
        inputPhoneTextField.setText("");
        inputSalaryTextField.setText("");
    }

    private void updateEmployeeCount() {
        quantityEmploytextField.setText(Integer.toString(employeeList.getList().size()));
    }

    private void insertWarningToTextField(javax.swing.JTextField textField, String warningText, int size) {
        textField.setFont(new java.awt.Font("Segoe UI", java.awt.Font.ITALIC, size));
        textField.setForeground(new java.awt.Color(255, 0, 0));
        textField.setText(warningText);
        textField.setEditable(true);

    }

    private void textFieldMouseClick(javax.swing.JTextField textField, int size) {
        setDefaultOptionToTextField(textField, size);
        textField.setEditable(true);
    }

    private void setDefaultOptionToTextField(javax.swing.JTextField textField, int size) {
        textField.setFont(new java.awt.Font("Segoe UI", 0, size)); // NOI18N
        textField.setForeground(new java.awt.Color(0, 0, 0));
        textField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textField.setText("");
    }

    private boolean validateRequiredFields() {
        boolean isAllRequiredFieldsFilled = true;

        if (inputCCCDTextField.getText().isBlank()) {
            insertWarningToTextField(inputCCCDTextField, BAT_BUOC_NHAP, 11);
            isAllRequiredFieldsFilled = false;
        }

        if (inputFirstNameTextField.getText().isBlank()) {
            insertWarningToTextField(inputFirstNameTextField, BAT_BUOC_NHAP, 11);
            isAllRequiredFieldsFilled = false;
        }

        if (inputLastNameTextField1.getText().isBlank()) {
            insertWarningToTextField(inputLastNameTextField1, BAT_BUOC_NHAP, 11);
            isAllRequiredFieldsFilled = false;
        }

        if (inputPhoneTextField.getText().isBlank()) {
            insertWarningToTextField(inputPhoneTextField, BAT_BUOC_NHAP, 11);
            isAllRequiredFieldsFilled = false;
        }

        return isAllRequiredFieldsFilled;
    }

    private void inputLastNameTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputLastNameTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputLastNameTextField1ActionPerformed

    private void femaleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleRadioButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        // Kiểm tra xem có dữ liệu được nhập vào hay không
        if (inputFirstNameTextField.getText().isEmpty() && inputLastNameTextField1.getText().isEmpty() && inputAgeTextField.getText().isEmpty()
                && inputAdressField.getText().isEmpty() && inputCCCDTextField.getText().isEmpty() && inputPhoneTextField.getText().isEmpty()
                && inputSalaryTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn chưa thêm gì !", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Kiểm tra các trường bắt buộc
        if (!validateRequiredFields()) {
            return;
        }

        // Xử lý khi tất cả các trường bắt buộc đã được điền
        BigDecimal salary = BigDecimal.ZERO;
        String firstName = inputFirstNameTextField.getText();
        String lastName = inputLastNameTextField1.getText();
        int age = 0;
        String cccd = inputCCCDTextField.getText();
        long cccdInt;

        try {
            age = Integer.parseInt(inputAgeTextField.getText());
            salary = new BigDecimal(inputSalaryTextField.getText());
            cccdInt = Long.parseLong(cccd);
            // Kiểm tra số âm cho age và salary
            if (age < 0 || salary.compareTo(BigDecimal.ZERO) < 0 || cccdInt < 0) {
                JOptionPane.showMessageDialog(this, "Nhập tuổi, lương, CCCD số âm! Bạn bị ngu à?", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Lương, tuổi, CCCD cần là một số.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String address = inputAdressField.getText();
        String phone = inputPhoneTextField.getText();
        String reg = "^(0|\\+84)(\\s|\\.)?((3[0-9])|(5[0-9])|(7[0-9])|(8[0-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$";
        if (!phone.matches(reg)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không đúng định dạng! Vui lòng nhập lại.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String gender = "";
        if (maleButton.isSelected()) {
            gender = "MALE";
        } else if (femaleRadioButton.isSelected()) {
            gender = "FEMALE";
        } else if (otherRadioButton.isSelected()) {
            gender = "OTHER";
        }

        // Kiểm tra thông tin nhân viên trùng lặp
        for (Employee employee : employeeList.getList()) {
            if (employee.getLastName().equals(lastName) && employee.getCCCD().equals(cccd)) {
                JOptionPane.showMessageDialog(this, "Thông tin nhân viên đã trùng! Mong bạn kiểm tra và nhập lại.\n(Không được trùng Tên, CCCD)", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        // Tạo một đối tượng Employee mới với thông tin được nhập vào và STT mới
        Employee newEmployee = new Employee(firstName, lastName, age, address, cccd, phone, salary, gender);

        // Thêm đối tượng Employee mới vào danh sách nhân viên trong đối tượng EmployeeList
        employeeList.getList().add(newEmployee);

        // Hiển thị danh sách nhân viên trong bảng
        showTable(employeeList.getList());

        // Xóa các trường nhập để chuẩn bị cho việc nhập thông tin nhân viên tiếp theo
        clearInputFields();

        JOptionPane.showMessageDialog(this, "Chào mừng nhân viên mới", "Thành công", JOptionPane.INFORMATION_MESSAGE);
        updateEmployeeCount();
    }//GEN-LAST:event_addButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // TODO add your handling code here:
        // Lấy chỉ số của hàng được chọn trong bảng
        int rowIndex = displayTable.getSelectedRow();

        // Kiểm tra xem một hàng đã được chọn hay chưa
        if (rowIndex >= 0) {
            // Lấy DefaultTableModel của bảng
            DefaultTableModel model = (DefaultTableModel) displayTable.getModel();

            // Lấy các giá trị của hàng được chọn
            String firstName = model.getValueAt(rowIndex, 0).toString();
            String lastName = model.getValueAt(rowIndex, 1).toString();
            int age = Integer.parseInt(model.getValueAt(rowIndex, 2).toString());
            String gender = model.getValueAt(rowIndex, 3).toString();
            String address = model.getValueAt(rowIndex, 4).toString();
            String phone = model.getValueAt(rowIndex, 5).toString();
            String cccd = model.getValueAt(rowIndex, 6).toString();
            BigDecimal salary = new BigDecimal(model.getValueAt(rowIndex, 7).toString());

            // Lấy giá trị mới từ các trường nhập liệu
            String newFirstName = inputFirstNameTextField.getText();
            String newLastName = inputLastNameTextField1.getText();
            String newGender = maleButton.isSelected() ? "MALE" : femaleRadioButton.isSelected() ? "FEMALE" : "OTHER";
            String newAddress = inputAdressField.getText();
            String newPhone = inputPhoneTextField.getText();
            String reg = "^(0|\\+84)(\\s|\\.)?((3[0-9])|(5[0-9])|(7[0-9])|(8[0-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$";
            if (!newPhone.matches(reg)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại không đúng định dạng! Vui lòng nhập lại .", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            String newCCCD = inputCCCDTextField.getText();
            long cccdInt;

            try {
                int newAge = Integer.parseInt(inputAgeTextField.getText());

                BigDecimal newSalary = new BigDecimal(inputSalaryTextField.getText());
                cccdInt = Long.parseLong(newCCCD);

                if (newAge < 0 || newSalary.compareTo(BigDecimal.ZERO) < 0 || cccdInt < 0) {
                    JOptionPane.showMessageDialog(this, "Sửa tuổi ,lương,cccd số âm! Bạn bị ngu à?", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Kiểm tra xem thông tin nhân viên đã được thay đổi hay không
                boolean hasChanged = !newFirstName.equals(firstName)
                        || !newLastName.equals(lastName)
                        || newAge != age
                        || !newGender.equals(gender)
                        || !newAddress.equals(address)
                        || !newPhone.equals(phone)
                        || !newCCCD.equals(cccd)
                        || !newSalary.equals(salary);

                if (hasChanged) {
                    // Kiểm tra trùng lặp thông tin
                    for (Employee employee : employeeList.getList()) {
                        if (employee != employeeList.getList().get(rowIndex) && (employee.getPhoneNumber().equals(newPhone) || employee.getCCCD().equals(newCCCD))) {
                            // Hiển thị cảnh báo trùng lặp thông tin
                            JOptionPane.showMessageDialog(this, "CCCD hoặc SĐT này đã trùng lặp với một nhân viên khác!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
                    // Hiển thị thông báo cho người dùng để xác nhận việc chỉnh sửa thông tin
                    int option = JOptionPane.showOptionDialog(this,
                            "Bạn có chắc muốn chỉnh sửa thông tin nhân viên ?",
                            "Xác nhận chỉnh sửa",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            new Object[]{"Yes", "No"},
                            "No");

                    if (option == JOptionPane.YES_OPTION) {
                        // Cập nhật các giá trị của hàng được chọn trong bảng với các giá trị mới
                        model.setValueAt(newFirstName, rowIndex, 0);
                        model.setValueAt(newLastName, rowIndex, 1);
                        model.setValueAt(newAge, rowIndex, 2);
                        model.setValueAt(newGender, rowIndex, 3);
                        model.setValueAt(newAddress, rowIndex, 4);
                        model.setValueAt(newPhone, rowIndex, 5);
                        model.setValueAt(newCCCD, rowIndex, 6);
                        model.setValueAt(newSalary, rowIndex, 7);

                        // Cập nhật thông tin nhân viên trong employeeList
                        Employee selectedEmployee = employeeList.getList().get(rowIndex);
                        selectedEmployee.setFirstName(newFirstName);
                        selectedEmployee.setLastName(newLastName);
                        selectedEmployee.setAge(newAge);
                        selectedEmployee.setGender(Gender.valueOf(newGender.toUpperCase()));
                        selectedEmployee.setAddress(newAddress);
                        selectedEmployee.setPhoneNumber(newPhone);
                        selectedEmployee.setCCCD(newCCCD);
                        selectedEmployee.setSalaryPerDay(newSalary);

                        // Hiển thị thông báo cho người dùng để thông báo rằng thông tin nhân viên đã được cập nhật thành công
                        JOptionPane.showMessageDialog(this, "Thông tin nhân viên đã được cập nhật thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    // Hiển thị thông báo cho người dùng rằng không có thay đổi thông tin
                    JOptionPane.showMessageDialog(this, "Không có thay đổi thông tin nhân viên.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Lương,tuổi,cccd cần là một số .", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Nếu không có hàng nào được chọn, hiển thị một thông báo cho người dùng
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để cập nhật thông tin!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }

        clearInputFields();
        updateEmployeeCount();

    }//GEN-LAST:event_changeButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) displayTable.getModel();
        int selectedRowIndex = displayTable.getSelectedRow();
        // Kiểm tra xem người dùng đã chọn hàng nào hay chưa
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng cần xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Hiển thị thông báo xác nhận việc xóa
        int reply = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa thông tin không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            // Lấy đối tượng Employee từ dữ liệu bảng
            Employee employeeToRemove = employeeList.getList().get(selectedRowIndex);
            // Xóa đối tượng Employee khỏi danh sách
            employeeList.getList().remove(employeeToRemove);
            // Xóa dòng được chọn trong bảng
            model.removeRow(selectedRowIndex);
            // Cập nhật bảng
            model.fireTableDataChanged();
            // Hiển thị thông báo cho người dùng
            JOptionPane.showMessageDialog(this, "Thông tin nhân viên đã được xóa thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            // Cập nhật số lượng nhân viên
            clearInputFields();

            updateEmployeeCount();
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String searchValue = searchIDTextField.getText();

        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Bạn cần nhập thông tin nhân viên tại thanh tìm kiếm");
            return;
        }

        // Tìm kiếm vị trí của tất cả các nhân viên có firstName,lastName,CCCD tương ứng trong danh sách nhân viên
        List<Employee> searchResult = new ArrayList<>();
        for (Employee employee : employeeList.getList()) {
            if (employee.getFirstName().toLowerCase().contains(searchValue.toLowerCase())
                    || employee.getLastName().toLowerCase().contains(searchValue.toLowerCase())
                    || employee.getCCCD().contains(searchValue)) {
                searchResult.add(employee);
            }
        }

        if (searchResult.size() > 0) {
            // Hiển thị danh sách nhân viên trong bảng, chỉ hiển thị thông tin của nhân viên tìm kiếm
            showTable(searchResult);
        } else {
            // Nếu không tìm thấy, hiển thị thông báo lỗi
            JOptionPane.showMessageDialog(null, "Không tìm thấy nhân viên có thông tin tương ứng");
        }

    }//GEN-LAST:event_searchButtonActionPerformed
// Phương thức tìm kiếm dựa trên nhiều trường

    private List<Integer> getRowsForFieldValue(String fieldValue) {
        DefaultTableModel model = (DefaultTableModel) displayTable.getModel();
        int rowCount = model.getRowCount();
        List<Integer> resultRows = new ArrayList<>();

        for (int i = 0; i < rowCount; i++) {
            String firstName = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
            String lastName = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
            String cccd = model.getValueAt(i, 6) != null ? model.getValueAt(i, 6).toString() : "";
            if (firstName.toLowerCase().contains(fieldValue.toLowerCase()) || lastName.toLowerCase().contains(fieldValue.toLowerCase()) || cccd.contains(fieldValue)) {
                resultRows.add(i);
            }
        }

        return resultRows;
    }
    private void displayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayTableMouseClicked
        // TODO add your handling code here:
        // Lấy chỉ số của hàng được chọn trong bảng
        clearInputFields();
        int rowIndex = displayTable.getSelectedRow();

        // Kiểm tra xem một hàng đã được chọn hay chưa
        if (rowIndex >= 0) {
            // Lấy DefaultTableModel của bảng
            DefaultTableModel model = (DefaultTableModel) displayTable.getModel();

            // Lấy các giá trị của hàng được chọn
            String firstName = model.getValueAt(rowIndex, 0) != null ? model.getValueAt(rowIndex, 0).toString() : "";
            String lastName = model.getValueAt(rowIndex, 1) != null ? model.getValueAt(rowIndex, 1).toString() : "";
            String age = model.getValueAt(rowIndex, 2) != null ? model.getValueAt(rowIndex, 2).toString() : "";
            String gender = model.getValueAt(rowIndex, 3) != null ? model.getValueAt(rowIndex, 3).toString().trim() : "";
            String address = model.getValueAt(rowIndex, 4) != null ? model.getValueAt(rowIndex, 4).toString() : "";
            String phone = model.getValueAt(rowIndex, 5) != null ? model.getValueAt(rowIndex, 5).toString() : "";
            String cccd = model.getValueAt(rowIndex, 6) != null ? model.getValueAt(rowIndex, 6).toString() : "";
            String salary = model.getValueAt(rowIndex, 7) != null ? model.getValueAt(rowIndex, 7).toString() : "";

            // Cập nhật các trường nhập liệu với các giá trị của nhân viên được chọn
            inputFirstNameTextField.setText(firstName);
            inputLastNameTextField1.setText(lastName);
            inputAgeTextField.setText(age);
            inputAdressField.setText(address);
            inputCCCDTextField.setText(cccd);
            inputPhoneTextField.setText(phone);
            inputSalaryTextField.setText(salary);

            // Kiểm tra nút radio giới tính tương ứng với giới tính của nhân viên được chọn
            switch (gender) {
                case "MALE":
                    maleButton.setSelected(true);
                    break;
                case "FEMALE":
                    femaleRadioButton.setSelected(true);
                    break;
                default:
                    otherRadioButton.setSelected(true);
                    break;
            }
        }
    }//GEN-LAST:event_displayTableMouseClicked

    private void showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButtonActionPerformed
        // TODO add your handling code here:
        // Hiển thị danh sách nhân viên trên bảng
        showTable(employeeList.getList());
        updateEmployeeCount();
    }//GEN-LAST:event_showAllButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        clearInputFields();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void inputCCCDTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputCCCDTextFieldMouseClicked
        // TODO add your handling code here:

        if (!validateRequiredFields()) {
            return;
        }
        textFieldMouseClick(inputCCCDTextField, 11);


    }//GEN-LAST:event_inputCCCDTextFieldMouseClicked

    private void inputPhoneTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputPhoneTextFieldMouseClicked
        // TODO add your handling code here:
        if (!validateRequiredFields()) {

            return;
        }
        textFieldMouseClick(inputPhoneTextField, 11);

    }//GEN-LAST:event_inputPhoneTextFieldMouseClicked

    private void inputFirstNameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputFirstNameTextFieldMouseClicked
        // TODO add your handling code here:
        // Kiểm tra các trường bắt buộc
        if (!validateRequiredFields()) {

            return;
        }
        textFieldMouseClick(inputFirstNameTextField, 11);

    }//GEN-LAST:event_inputFirstNameTextFieldMouseClicked

    private void inputLastNameTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputLastNameTextField1MouseClicked
        // TODO add your handling code here:
        if (!validateRequiredFields()) {

            return;
        }
        textFieldMouseClick(inputLastNameTextField1, 11);

    }//GEN-LAST:event_inputLastNameTextField1MouseClicked

    public void passData(EmployeeList employeelist, Shift shift) {
        this.employeelist = employeelist;
        this.shift = shift;
    }
    private ArrayList<Employee> employees;
    private EmployeeList employeelist;
    private Shift shift;
    private final String BAT_BUOC_NHAP = "Bắt buộc phải nhập!";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JScrollPane displayScrollPane;
    private javax.swing.JTable displayTable;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JPanel functionPanel;
    private javax.swing.ButtonGroup genderbuttonGroup;
    private javax.swing.JTextField inputAdressField;
    private javax.swing.JLabel inputAdressLabel;
    private javax.swing.JLabel inputAgeLabel;
    private javax.swing.JTextField inputAgeTextField;
    private javax.swing.JLabel inputCCCDLabel;
    private javax.swing.JTextField inputCCCDTextField;
    private javax.swing.JLabel inputFirstNameLabel;
    private javax.swing.JTextField inputFirstNameTextField;
    private javax.swing.JLabel inputGenderLabel;
    private javax.swing.JPanel inputInfoPanel;
    private javax.swing.JLabel inputLastNameLabel;
    private javax.swing.JTextField inputLastNameTextField1;
    private javax.swing.JLabel inputPhoneLabel;
    private javax.swing.JTextField inputPhoneTextField;
    private javax.swing.JLabel inputSalaryLabel;
    private javax.swing.JTextField inputSalaryTextField;
    private javax.swing.JRadioButton maleButton;
    private javax.swing.JRadioButton otherRadioButton;
    private javax.swing.JLabel quantityEmployLabel;
    private javax.swing.JTextField quantityEmploytextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchIDTextField;
    private javax.swing.JButton showAllButton;
    // End of variables declaration//GEN-END:variables
}
