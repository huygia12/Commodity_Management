/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Controllers.CustomerCardController;
import Controllers.CustomerCardListController;
import Controllers.GoodsController;
import Controllers.OrderController;
import Controllers.SettingsController;
import Models.*;
import Ultility.Cautions;
import Ultility.CustomPair;
import Ultility.FilterGoodsList;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.stream.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FPTSHOP
 */
public class PurchasePanel extends javax.swing.JPanel {

    /**
     * Creates new form orderPanel
     */
    public PurchasePanel() {
        initComponents();
        initVariables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proAndExpirDateBtnGroup = new javax.swing.ButtonGroup();
        aboutGoodsAndCusPanel = new javax.swing.JPanel();
        employeeAndCustomerPanel = new javax.swing.JPanel();
        cashierLabel = new javax.swing.JLabel();
        cashierTextField = new javax.swing.JTextField();
        customerIDLabel = new javax.swing.JLabel();
        customerPointLabel = new javax.swing.JLabel();
        customerPointCheckTextField = new javax.swing.JTextField();
        checkCustomerIDBtn = new javax.swing.JButton();
        customerIDText = new javax.swing.JTextField();
        customerDiscountOfferLabel = new javax.swing.JLabel();
        customerDiscountOfferTextField = new javax.swing.JTextField();
        orderIDLabel = new javax.swing.JLabel();
        goodsPanel = new javax.swing.JPanel();
        goodListScrollPane = new javax.swing.JScrollPane();
        goodsListTable = new javax.swing.JTable();
        aboutOrderPanel = new javax.swing.JPanel();
        feePanel = new javax.swing.JPanel();
        subFeePanel = new javax.swing.JPanel();
        shippingFeeLabel = new javax.swing.JLabel();
        customerMoneyLabel = new javax.swing.JLabel();
        discountLabel = new javax.swing.JLabel();
        shippingFeeText = new javax.swing.JTextField();
        customerMoneyText = new javax.swing.JTextField();
        discountText = new javax.swing.JTextField();
        pointDiscountLabel = new javax.swing.JLabel();
        pointDiscountText = new javax.swing.JTextField();
        paymentOptionLabel = new javax.swing.JLabel();
        paymentOptionCombobox = new javax.swing.JComboBox<>();
        taxLabel = new javax.swing.JLabel();
        taxText = new javax.swing.JTextField();
        mainFeePanel = new javax.swing.JPanel();
        subTotalLabel = new javax.swing.JLabel();
        discountAmountLabel = new javax.swing.JLabel();
        taxAmountLabel = new javax.swing.JLabel();
        pointDiscountAmountLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        changeAmountLabel = new javax.swing.JLabel();
        subTotalTextField = new javax.swing.JTextField();
        taxAmountTextField = new javax.swing.JTextField();
        discountAmountTextField = new javax.swing.JTextField();
        pointDiscountAmountTextField = new javax.swing.JTextField();
        totalTextField = new javax.swing.JTextField();
        changeAmountTextField = new javax.swing.JTextField();
        payAnfPrintBtn = new javax.swing.JButton();
        payBtn = new javax.swing.JButton();
        orderDisplayPanel = new javax.swing.JPanel();
        mainOrderFunctionPanel = new javax.swing.JPanel();
        quantityTextField = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        goodsIDTextField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        unitLabel = new javax.swing.JLabel();
        shipmentIDLabel = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        unitComboBox = new javax.swing.JComboBox<>();
        goodsIDLabel = new javax.swing.JLabel();
        shipmentIDTextField = new javax.swing.JTextField();
        priceRangeComboBox = new javax.swing.JComboBox<>();
        priceRangeLabel = new javax.swing.JLabel();
        keyWordLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        productionDateRadioBtn = new javax.swing.JRadioButton();
        keyWordTextField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        expirDateRadioBtn = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        fromDateTextField = new javax.swing.JTextField();
        toDateTextField = new javax.swing.JTextField();
        filterBtn = new javax.swing.JButton();
        filterSwitchRadioBtn = new javax.swing.JRadioButton();
        warningTextField = new javax.swing.JTextField();
        orderGoodsListScrollPane = new javax.swing.JScrollPane();
        orderGoodsListTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMaximumSize(new java.awt.Dimension(2147483647, 640));
        setMinimumSize(new java.awt.Dimension(980, 600));
        setPreferredSize(new java.awt.Dimension(980, 600));
        setLayout(new java.awt.BorderLayout());

        aboutGoodsAndCusPanel.setMinimumSize(new java.awt.Dimension(985, 190));
        aboutGoodsAndCusPanel.setPreferredSize(new java.awt.Dimension(968, 190));
        aboutGoodsAndCusPanel.setLayout(new java.awt.BorderLayout(5, 0));

        employeeAndCustomerPanel.setBackground(new java.awt.Color(255, 255, 255));
        employeeAndCustomerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        employeeAndCustomerPanel.setFocusable(false);
        employeeAndCustomerPanel.setMaximumSize(new java.awt.Dimension(280550, 2000000));
        employeeAndCustomerPanel.setMinimumSize(new java.awt.Dimension(280, 200));
        employeeAndCustomerPanel.setOpaque(false);
        employeeAndCustomerPanel.setPreferredSize(new java.awt.Dimension(280, 200));

        cashierLabel.setBackground(new java.awt.Color(255, 255, 255));
        cashierLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cashierLabel.setText("Thu Ngân-SĐT: ");

        cashierTextField.setEditable(false);
        cashierTextField.setBackground(new java.awt.Color(255, 255, 255));
        cashierTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        customerIDLabel.setBackground(new java.awt.Color(204, 204, 204));
        customerIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        customerIDLabel.setText("MÃ KHÁCH HÀNG: ");

        customerPointLabel.setText("Điểm hiện tại:");

        customerPointCheckTextField.setEditable(false);
        customerPointCheckTextField.setBackground(new java.awt.Color(255, 255, 255));
        customerPointCheckTextField.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        customerPointCheckTextField.setForeground(new java.awt.Color(255, 0, 51));
        customerPointCheckTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerPointCheckTextField.setBorder(null);
        customerPointCheckTextField.setMaximumSize(new java.awt.Dimension(80, 80));
        customerPointCheckTextField.setMinimumSize(new java.awt.Dimension(0, 0));

        checkCustomerIDBtn.setText("Kiểm tra");
        checkCustomerIDBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        checkCustomerIDBtn.setRolloverEnabled(false);
        checkCustomerIDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCustomerIDBtnActionPerformed(evt);
            }
        });

        customerIDText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerIDText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        customerIDText.setMinimumSize(new java.awt.Dimension(130, 22));
        customerIDText.setPreferredSize(new java.awt.Dimension(130, 22));
        customerIDText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerIDTextMouseClicked(evt);
            }
        });
        customerIDText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerIDTextKeyPressed(evt);
            }
        });

        customerDiscountOfferLabel.setText("Ưu đãi chiết khấu:");

        customerDiscountOfferTextField.setEditable(false);
        customerDiscountOfferTextField.setBackground(new java.awt.Color(255, 255, 255));
        customerDiscountOfferTextField.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        customerDiscountOfferTextField.setForeground(new java.awt.Color(255, 0, 51));
        customerDiscountOfferTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerDiscountOfferTextField.setBorder(null);
        customerDiscountOfferTextField.setMaximumSize(new java.awt.Dimension(80, 80));
        customerDiscountOfferTextField.setMinimumSize(new java.awt.Dimension(0, 0));

        orderIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        orderIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderIDLabel.setText("  ");
        orderIDLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout employeeAndCustomerPanelLayout = new javax.swing.GroupLayout(employeeAndCustomerPanel);
        employeeAndCustomerPanel.setLayout(employeeAndCustomerPanelLayout);
        employeeAndCustomerPanelLayout.setHorizontalGroup(
            employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeAndCustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeAndCustomerPanelLayout.createSequentialGroup()
                        .addComponent(orderIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(employeeAndCustomerPanelLayout.createSequentialGroup()
                        .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(employeeAndCustomerPanelLayout.createSequentialGroup()
                                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerPointLabel)
                                    .addComponent(cashierLabel)
                                    .addComponent(customerDiscountOfferLabel))
                                .addGap(18, 18, 18))
                            .addComponent(customerIDLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeAndCustomerPanelLayout.createSequentialGroup()
                                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerIDText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(cashierTextField, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeAndCustomerPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(customerDiscountOfferTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customerPointCheckTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeAndCustomerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(checkCustomerIDBtn)
                .addGap(37, 37, 37))
        );
        employeeAndCustomerPanelLayout.setVerticalGroup(
            employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeAndCustomerPanelLayout.createSequentialGroup()
                .addComponent(orderIDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkCustomerIDBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerPointCheckTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerPointLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerDiscountOfferTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerDiscountOfferLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeAndCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cashierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        aboutGoodsAndCusPanel.add(employeeAndCustomerPanel, java.awt.BorderLayout.LINE_START);

        goodsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin sản phẩm"));
        goodsPanel.setMaximumSize(new java.awt.Dimension(800, 190));
        goodsPanel.setMinimumSize(new java.awt.Dimension(700, 180));
        goodsPanel.setOpaque(false);

        goodsListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Nhà SX", "ĐV", "Giá Bán/ĐV", "Mã lô", "Ngày SX", "Hạn SD", "SL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        goodsListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        goodsListTable.setMaximumSize(new java.awt.Dimension(700, 0));
        goodsListTable.setMinimumSize(new java.awt.Dimension(675, 0));
        goodsListTable.setShowGrid(true);
        goodsListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goodsListTableMouseClicked(evt);
            }
        });
        goodListScrollPane.setViewportView(goodsListTable);
        goodsListTable.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout goodsPanelLayout = new javax.swing.GroupLayout(goodsPanel);
        goodsPanel.setLayout(goodsPanelLayout);
        goodsPanelLayout.setHorizontalGroup(
            goodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(goodsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(goodListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                .addContainerGap())
        );
        goodsPanelLayout.setVerticalGroup(
            goodsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(goodsPanelLayout.createSequentialGroup()
                .addComponent(goodListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        aboutGoodsAndCusPanel.add(goodsPanel, java.awt.BorderLayout.CENTER);

        add(aboutGoodsAndCusPanel, java.awt.BorderLayout.PAGE_START);

        aboutOrderPanel.setMinimumSize(new java.awt.Dimension(36, 390));
        aboutOrderPanel.setPreferredSize(new java.awt.Dimension(965, 390));
        aboutOrderPanel.setLayout(new java.awt.BorderLayout());

        feePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Chi tiết hóa đơn"));
        feePanel.setLayout(new java.awt.BorderLayout(0, 10));

        subFeePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        subFeePanel.setAutoscrolls(true);
        subFeePanel.setFocusable(false);
        subFeePanel.setMaximumSize(new java.awt.Dimension(32767, 170));
        subFeePanel.setOpaque(false);
        subFeePanel.setPreferredSize(new java.awt.Dimension(316, 170));

        shippingFeeLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        shippingFeeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-shipping-25.png"))); // NOI18N
        shippingFeeLabel.setText("Phí vận chuyển:");

        customerMoneyLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        customerMoneyLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/cashMoney.png"))); // NOI18N
        customerMoneyLabel.setText("Tiền mặt khách:");

        discountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        discountLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-discount-24.png"))); // NOI18N
        discountLabel.setText("Chiết khấu trực tiếp(%): ");

        shippingFeeText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        shippingFeeText.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        shippingFeeText.setMinimumSize(new java.awt.Dimension(64, 20));
        shippingFeeText.setNextFocusableComponent(customerMoneyText);
        shippingFeeText.setPreferredSize(new java.awt.Dimension(64, 20));
        shippingFeeText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shippingFeeTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                shippingFeeTextMouseExited(evt);
            }
        });
        shippingFeeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                shippingFeeTextKeyPressed(evt);
            }
        });

        customerMoneyText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerMoneyText.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        customerMoneyText.setMinimumSize(new java.awt.Dimension(64, 20));
        customerMoneyText.setPreferredSize(new java.awt.Dimension(64, 20));
        customerMoneyText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerMoneyTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                customerMoneyTextMouseExited(evt);
            }
        });
        customerMoneyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerMoneyTextKeyPressed(evt);
            }
        });

        discountText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        discountText.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        discountText.setPreferredSize(new java.awt.Dimension(64, 20));
        discountText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                discountTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                discountTextMouseExited(evt);
            }
        });
        discountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                discountTextKeyPressed(evt);
            }
        });

        pointDiscountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pointDiscountLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-loyalty-card-24.png"))); // NOI18N
        pointDiscountLabel.setText("Dùng điểm:");

        pointDiscountText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pointDiscountText.setPreferredSize(new java.awt.Dimension(64, 20));
        pointDiscountText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pointDiscountTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pointDiscountTextMouseExited(evt);
            }
        });
        pointDiscountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pointDiscountTextKeyPressed(evt);
            }
        });

        paymentOptionLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        paymentOptionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-payment-method-24.png"))); // NOI18N
        paymentOptionLabel.setText("PT thanh toán:");

        paymentOptionCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tiền Mặt", "Chuyển Khoản", "Thẻ Ngân Hàng" }));
        paymentOptionCombobox.setMaximumSize(new java.awt.Dimension(32767, 20));
        paymentOptionCombobox.setMinimumSize(new java.awt.Dimension(72, 20));
        paymentOptionCombobox.setPreferredSize(new java.awt.Dimension(72, 20));
        paymentOptionCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentOptionComboboxItemStateChanged(evt);
            }
        });

        taxLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        taxLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-tax-24.png"))); // NOI18N
        taxLabel.setText("Thuế(VAT-%):");

        taxText.setEditable(false);
        taxText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        taxText.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        taxText.setMinimumSize(new java.awt.Dimension(64, 20));
        taxText.setPreferredSize(new java.awt.Dimension(64, 20));

        javax.swing.GroupLayout subFeePanelLayout = new javax.swing.GroupLayout(subFeePanel);
        subFeePanel.setLayout(subFeePanelLayout);
        subFeePanelLayout.setHorizontalGroup(
            subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subFeePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subFeePanelLayout.createSequentialGroup()
                        .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pointDiscountLabel)
                            .addComponent(discountLabel))
                        .addGap(37, 37, 37)
                        .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(discountText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pointDiscountText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(subFeePanelLayout.createSequentialGroup()
                        .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shippingFeeLabel)
                            .addComponent(taxLabel)
                            .addComponent(customerMoneyLabel)
                            .addComponent(paymentOptionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shippingFeeText, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(taxText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerMoneyText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(paymentOptionCombobox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        subFeePanelLayout.setVerticalGroup(
            subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subFeePanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentOptionLabel)
                    .addComponent(paymentOptionCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taxText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taxLabel))
                .addGap(3, 3, 3)
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shippingFeeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(shippingFeeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerMoneyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerMoneyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3)
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountLabel)
                    .addComponent(discountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(subFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointDiscountText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pointDiscountLabel))
                .addContainerGap())
        );

        feePanel.add(subFeePanel, java.awt.BorderLayout.PAGE_START);

        mainFeePanel.setBackground(new java.awt.Color(255, 255, 255));
        mainFeePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(51, 51, 51), new java.awt.Color(153, 153, 153), new java.awt.Color(51, 51, 51)));
        mainFeePanel.setEnabled(false);
        mainFeePanel.setFocusable(false);
        mainFeePanel.setOpaque(false);

        subTotalLabel.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        subTotalLabel.setText("THÀNH TIỀN:");

        discountAmountLabel.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        discountAmountLabel.setText("KHOẢN CHIẾT KHẤU TAY:");

        taxAmountLabel.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        taxAmountLabel.setText("KHOẢN THUẾ:");

        pointDiscountAmountLabel.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        pointDiscountAmountLabel.setText("KHOẢN CHIẾT KHẤU ĐIỂM:");

        totalLabel.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        totalLabel.setText("TỔNG THANH TOÁN:");

        changeAmountLabel.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        changeAmountLabel.setText("TIỀN THỪA KHÁCH: ");

        subTotalTextField.setEditable(false);
        subTotalTextField.setBackground(new java.awt.Color(255, 255, 255));
        subTotalTextField.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        subTotalTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        subTotalTextField.setText("0.0");
        subTotalTextField.setBorder(null);
        subTotalTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        subTotalTextField.setMinimumSize(new java.awt.Dimension(64, 20));
        subTotalTextField.setPreferredSize(new java.awt.Dimension(64, 20));
        subTotalTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subTotalTextFieldMouseClicked(evt);
            }
        });

        taxAmountTextField.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        taxAmountTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        taxAmountTextField.setText("0.0");
        taxAmountTextField.setBorder(null);
        taxAmountTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        taxAmountTextField.setMinimumSize(new java.awt.Dimension(64, 20));
        taxAmountTextField.setPreferredSize(new java.awt.Dimension(64, 20));
        taxAmountTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taxAmountTextFieldMouseClicked(evt);
            }
        });

        discountAmountTextField.setEditable(false);
        discountAmountTextField.setBackground(new java.awt.Color(255, 255, 255));
        discountAmountTextField.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        discountAmountTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        discountAmountTextField.setText("0.0");
        discountAmountTextField.setBorder(null);
        discountAmountTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        discountAmountTextField.setMinimumSize(new java.awt.Dimension(64, 20));
        discountAmountTextField.setPreferredSize(new java.awt.Dimension(64, 20));
        discountAmountTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                discountAmountTextFieldMouseClicked(evt);
            }
        });

        pointDiscountAmountTextField.setEditable(false);
        pointDiscountAmountTextField.setBackground(new java.awt.Color(255, 255, 255));
        pointDiscountAmountTextField.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        pointDiscountAmountTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pointDiscountAmountTextField.setText("0.0");
        pointDiscountAmountTextField.setBorder(null);
        pointDiscountAmountTextField.setMaximumSize(new java.awt.Dimension(64, 20));
        pointDiscountAmountTextField.setMinimumSize(new java.awt.Dimension(64, 20));
        pointDiscountAmountTextField.setName(""); // NOI18N
        pointDiscountAmountTextField.setPreferredSize(new java.awt.Dimension(64, 20));
        pointDiscountAmountTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pointDiscountAmountTextFieldMouseClicked(evt);
            }
        });

        totalTextField.setEditable(false);
        totalTextField.setBackground(new java.awt.Color(255, 255, 255));
        totalTextField.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        totalTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTextField.setText("0.0");
        totalTextField.setBorder(null);
        totalTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        totalTextField.setMinimumSize(new java.awt.Dimension(64, 20));
        totalTextField.setPreferredSize(new java.awt.Dimension(64, 20));
        totalTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalTextFieldMouseClicked(evt);
            }
        });

        changeAmountTextField.setEditable(false);
        changeAmountTextField.setBackground(new java.awt.Color(255, 255, 255));
        changeAmountTextField.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        changeAmountTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        changeAmountTextField.setText("0.0");
        changeAmountTextField.setActionCommand("<Not Set>");
        changeAmountTextField.setBorder(null);
        changeAmountTextField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        changeAmountTextField.setMinimumSize(new java.awt.Dimension(64, 20));
        changeAmountTextField.setPreferredSize(new java.awt.Dimension(64, 20));
        changeAmountTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeAmountTextFieldMouseClicked(evt);
            }
        });

        payAnfPrintBtn.setBackground(new java.awt.Color(204, 204, 204));
        payAnfPrintBtn.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        payAnfPrintBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-print-30.png"))); // NOI18N
        payAnfPrintBtn.setText("THANH TOÁN & IN ");
        payAnfPrintBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51)));
        payAnfPrintBtn.setFocusable(false);
        payAnfPrintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payAnfPrintBtnActionPerformed(evt);
            }
        });

        payBtn.setBackground(new java.awt.Color(204, 204, 204));
        payBtn.setFont(new java.awt.Font("MTO Telephone", 1, 14)); // NOI18N
        payBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImageIcon/icons8-paid-bill-30.png"))); // NOI18N
        payBtn.setText("THANH TOÁN ");
        payBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51)));
        payBtn.setFocusable(false);
        payBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainFeePanelLayout = new javax.swing.GroupLayout(mainFeePanel);
        mainFeePanel.setLayout(mainFeePanelLayout);
        mainFeePanelLayout.setHorizontalGroup(
            mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainFeePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainFeePanelLayout.createSequentialGroup()
                        .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalLabel)
                            .addComponent(changeAmountLabel))
                        .addGap(60, 60, 60)
                        .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changeAmountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(mainFeePanelLayout.createSequentialGroup()
                        .addComponent(payAnfPrintBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(payBtn))
                    .addGroup(mainFeePanelLayout.createSequentialGroup()
                        .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pointDiscountAmountLabel)
                            .addComponent(discountAmountLabel)
                            .addComponent(taxAmountLabel)
                            .addComponent(subTotalLabel))
                        .addGap(10, 10, 10)
                        .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subTotalTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountAmountTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pointDiscountAmountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taxAmountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainFeePanelLayout.setVerticalGroup(
            mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainFeePanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subTotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taxAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taxAmountLabel))
                .addGap(3, 3, 3)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountAmountLabel)
                    .addComponent(discountAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pointDiscountAmountLabel)
                    .addComponent(pointDiscountAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalLabel)
                    .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeAmountLabel)
                    .addComponent(changeAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainFeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payAnfPrintBtn)
                    .addComponent(payBtn))
                .addContainerGap())
        );

        feePanel.add(mainFeePanel, java.awt.BorderLayout.CENTER);

        aboutOrderPanel.add(feePanel, java.awt.BorderLayout.LINE_END);

        orderDisplayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bộ lọc & Tìm kiếm"));
        orderDisplayPanel.setLayout(new java.awt.BorderLayout(0, 10));

        mainOrderFunctionPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102), new java.awt.Color(51, 51, 51)));
        mainOrderFunctionPanel.setEnabled(false);
        mainOrderFunctionPanel.setFocusable(false);
        mainOrderFunctionPanel.setMaximumSize(new java.awt.Dimension(630, 170));
        mainOrderFunctionPanel.setOpaque(false);
        mainOrderFunctionPanel.setPreferredSize(new java.awt.Dimension(629, 170));

        quantityTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        quantityTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantityTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quantityTextFieldMouseClicked(evt);
            }
        });
        quantityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantityTextFieldKeyPressed(evt);
            }
        });

        quantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quantityLabel.setText("Nhập Số Lượng:");

        goodsIDTextField.setEditable(false);
        goodsIDTextField.setBackground(new java.awt.Color(255, 255, 255));
        goodsIDTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        goodsIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        addBtn.setBackground(new java.awt.Color(0, 255, 0));
        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addBtn.setText("Thêm");
        addBtn.setMinimumSize(new java.awt.Dimension(84, 27));
        addBtn.setPreferredSize(new java.awt.Dimension(84, 27));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        removeBtn.setBackground(new java.awt.Color(255, 0, 0));
        removeBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        removeBtn.setForeground(new java.awt.Color(255, 255, 255));
        removeBtn.setText("Xóa");
        removeBtn.setPreferredSize(new java.awt.Dimension(84, 27));
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        resetBtn.setBackground(new java.awt.Color(51, 51, 51));
        resetBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        resetBtn.setForeground(new java.awt.Color(255, 255, 255));
        resetBtn.setText("Làm mới");
        resetBtn.setOpaque(true);
        resetBtn.setPreferredSize(new java.awt.Dimension(72, 27));
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(0, 255, 0));
        editBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        editBtn.setText("Sửa");
        editBtn.setPreferredSize(new java.awt.Dimension(7284, 27));
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        unitLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unitLabel.setText("Đơn Vị:");

        shipmentIDLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shipmentIDLabel.setText("Mã Lô:");

        fromLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fromLabel.setText("Từ:");

        toLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        toLabel.setText("Đến:");

        unitComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unitComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Trống" }));
        unitComboBox.setDoubleBuffered(true);
        unitComboBox.setFocusCycleRoot(true);
        unitComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                unitComboBoxItemStateChanged(evt);
            }
        });

        goodsIDLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        goodsIDLabel.setText("Mã SP:");

        shipmentIDTextField.setEditable(false);
        shipmentIDTextField.setBackground(new java.awt.Color(255, 255, 255));
        shipmentIDTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shipmentIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        priceRangeComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceRangeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Trống" }));
        priceRangeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                priceRangeComboBoxItemStateChanged(evt);
            }
        });

        priceRangeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceRangeLabel.setText("Khoảng Giá:");

        keyWordLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        keyWordLabel.setText("Nhập từ khóa tìm kiếm : ");
        keyWordLabel.setAutoscrolls(true);
        keyWordLabel.setVerifyInputWhenFocusTarget(false);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        proAndExpirDateBtnGroup.add(productionDateRadioBtn);
        productionDateRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        productionDateRadioBtn.setText("Ngày SX");
        productionDateRadioBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                productionDateRadioBtnItemStateChanged(evt);
            }
        });
        productionDateRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productionDateRadioBtnActionPerformed(evt);
            }
        });

        keyWordTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        keyWordTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keyWordTextField.setOpaque(true);
        keyWordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyWordTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyWordTextFieldKeyReleased(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(0, 255, 0));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchBtn.setText("Tìm kiếm");
        searchBtn.setMaximumSize(new java.awt.Dimension(90, 27));
        searchBtn.setMinimumSize(new java.awt.Dimension(85, 15));
        searchBtn.setOpaque(true);
        searchBtn.setPreferredSize(new java.awt.Dimension(88, 22));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        proAndExpirDateBtnGroup.add(expirDateRadioBtn);
        expirDateRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        expirDateRadioBtn.setText("Hạn SD  ");
        expirDateRadioBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                expirDateRadioBtnItemStateChanged(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        fromDateTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fromDateTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromDateTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fromDateTextFieldMouseClicked(evt);
            }
        });
        fromDateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromDateTextFieldKeyPressed(evt);
            }
        });

        toDateTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toDateTextField.setPreferredSize(new java.awt.Dimension(64, 26));
        toDateTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toDateTextFieldMouseClicked(evt);
            }
        });
        toDateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toDateTextFieldKeyPressed(evt);
            }
        });

        filterBtn.setBackground(new java.awt.Color(0, 255, 0));
        filterBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        filterBtn.setText("Lọc");
        filterBtn.setPreferredSize(new java.awt.Dimension(104, 27));
        filterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBtnActionPerformed(evt);
            }
        });

        filterSwitchRadioBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        filterSwitchRadioBtn.setText("Bật Bộ Lọc");
        filterSwitchRadioBtn.setRolloverEnabled(false);
        filterSwitchRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterSwitchRadioBtnActionPerformed(evt);
            }
        });

        warningTextField.setEditable(false);
        warningTextField.setText(" ");
        warningTextField.setAutoscrolls(false);
        warningTextField.setBorder(null);

        javax.swing.GroupLayout mainOrderFunctionPanelLayout = new javax.swing.GroupLayout(mainOrderFunctionPanel);
        mainOrderFunctionPanel.setLayout(mainOrderFunctionPanelLayout);
        mainOrderFunctionPanelLayout.setHorizontalGroup(
            mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unitLabel)
                            .addComponent(priceRangeLabel))
                        .addGap(18, 18, 18)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceRangeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unitComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                        .addComponent(productionDateRadioBtn)
                                        .addGap(8, 8, 8))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainOrderFunctionPanelLayout.createSequentialGroup()
                                        .addComponent(expirDateRadioBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fromLabel)
                                    .addComponent(toLabel)))
                            .addComponent(filterSwitchRadioBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(fromDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(toDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                        .addComponent(keyWordLabel)
                                        .addGap(28, 28, 28))
                                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                        .addComponent(keyWordTextField)
                                        .addGap(23, 23, 23)))
                                .addGap(5, 5, 5)
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(shipmentIDLabel)
                                    .addComponent(goodsIDLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shipmentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goodsIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantityLabel)
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(warningTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))))
        );
        mainOrderFunctionPanelLayout.setVerticalGroup(
            mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceRangeLabel)
                            .addComponent(priceRangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(unitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitLabel))
                        .addGap(5, 5, 5)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addComponent(productionDateRadioBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expirDateRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fromDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fromLabel))
                                .addGap(5, 5, 5)
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(toDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(toLabel))))
                        .addGap(3, 3, 3)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterSwitchRadioBtn)))
                    .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(goodsIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goodsIDLabel)
                            .addComponent(keyWordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(shipmentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(shipmentIDLabel))
                            .addComponent(keyWordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityLabel))
                            .addGroup(mainOrderFunctionPanelLayout.createSequentialGroup()
                                .addComponent(warningTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainOrderFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11))
        );

        orderDisplayPanel.add(mainOrderFunctionPanel, java.awt.BorderLayout.PAGE_START);

        orderGoodsListScrollPane.setPreferredSize(new java.awt.Dimension(452, 216));

        orderGoodsListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Tổng SL", "ĐV", "Giá Bán/ĐV", "Mã Lô", "SL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderGoodsListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        orderGoodsListTable.setMaximumSize(new java.awt.Dimension(700, 0));
        orderGoodsListTable.setShowGrid(true);
        orderGoodsListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderGoodsListTableMouseClicked(evt);
            }
        });
        orderGoodsListScrollPane.setViewportView(orderGoodsListTable);

        orderDisplayPanel.add(orderGoodsListScrollPane, java.awt.BorderLayout.CENTER);

        aboutOrderPanel.add(orderDisplayPanel, java.awt.BorderLayout.CENTER);

        add(aboutOrderPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void payBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBtnActionPerformed
        setDefaultOptionToTextField(warningTextField, 12);
        // xét các điều kiện
        if (order.getList().isEmpty()) { // Kiểm tra xem đã chọn sản phẩm nào chưa
            insertWarningToTextField(warningTextField, NOTHING_CHOOSEN_WARNING, 12);
            return;
        } else if (insufficientCustomerMoneyCheck(order.getCusMoney())) {
            return;
        }
        // thực hiện chức năng
        orderCtr.payOrder(order, shift, store);
//        tb.setTitle(" Mã Hóa Đơn - " + order.getID());
        order = null;
        initNewOrder();
    }//GEN-LAST:event_payBtnActionPerformed

    private void payAnfPrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payAnfPrintBtnActionPerformed
        setDefaultOptionToTextField(warningTextField, 12);
        // xét các điều kiện
        if (order.getList().isEmpty()) { // Kiểm tra xem đã chọn sản phẩm nào chưa
            insertWarningToTextField(warningTextField, NOTHING_CHOOSEN_WARNING, 12);
            return;
        } else if (insufficientCustomerMoneyCheck(order.getCusMoney())) { //Kiểm tra xem có thiếu tiền kh
            return;
        }
        // thực hiện chức năng
        orderCtr.payOrder(order, shift, store);
        orderCtr.getOrderView().printBillToFile(order, store);
        order = null;
        initNewOrder();
    }//GEN-LAST:event_payAnfPrintBtnActionPerformed

    private void goodsListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goodsListTableMouseClicked
        setDefaultOptionToTextField(warningTextField, 12);
        int selectedRow = goodsListTable.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }
        String shipmentID = (String) goodsListModel.getValueAt(selectedRow, 5);
        Goods selectedGoods = orderCtr.containGoodsForGUI(draftGoodsList, shipmentID);
        shipmentIDTextField.setText(shipmentID);
        keyWordTextField.setText(selectedGoods.getGoodsName());
        goodsIDTextField.setText(selectedGoods.getID());
        if (filterGoodsList != null) {
            selectedGoods = orderCtr.containGoodsForGUI(filterGoodsList, shipmentID);
        }
        GoodsList<Goods> bucket = new GoodsList<>();
        bucket.getList().add(selectedGoods);
        orderSelectedRow = -1;
        insertGoodsListToGoodsListTable(bucket);
    }//GEN-LAST:event_goodsListTableMouseClicked

    private void orderGoodsListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderGoodsListTableMouseClicked
        int selectedRow = orderGoodsListTable.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }
        String shipmentID = (String) orderGoodsListModel.getValueAt(selectedRow, 5);
        Goods selectedGoods = orderCtr.containGoodsForGUI(order, shipmentID);
        Goods goodsInDraftGoodsList = orderCtr.containGoods(draftGoodsList, selectedGoods.getID());
        Shipment selectedShipment = goodsCtr.containShipment(selectedGoods.getShipments(), shipmentID);
        shipmentIDTextField.setText(shipmentID);
        keyWordTextField.setText(selectedGoods.getGoodsName());
        goodsIDTextField.setText(selectedGoods.getID());
        quantityTextField.setText(selectedShipment.getQuantity() + "");
        orderSelectedRow = selectedRow;
        // hiển thị sản phẩm ở bảng order
        insertGoodsListToOrderGoodsListTable(order);
        // Hiển thị sản phẩm ở bảng goodsList
        GoodsList<Goods> bucket = new GoodsList<>();
        bucket.getList().add(goodsInDraftGoodsList);
        insertGoodsListToGoodsListTable(bucket);
        insertGoodsListToGoodsListTable(bucket);
    }//GEN-LAST:event_orderGoodsListTableMouseClicked

    private void checkCustomerIDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCustomerIDBtnActionPerformed
        CustomerCard customerCard = null;
        String customerID = customerIDText.getText();
        // Kiểm tra điều kiện
        if (customerID.isBlank()) { // Kiểm tra xem có trống hay không
            insertWarningToTextField(customerPointCheckTextField,
                    EMPTY_TEXT_FIELD_WARNING, 12);
            customerIDWarningCheck = false;
            setDefaultOptionToTextField(customerDiscountOfferTextField, 12);
            setDefaultOptionToTextField(pointDiscountText, 12);
            pointDiscountText.setEditable(false);
            order.setCustomerCard(customerCard);
            return;
        } else if (!ctions.checkIfANumberSequenceForGUI(customerID)) { // kiểm tra xem có phải là số hợp lệ không 
            insertWarningToTextField(customerPointCheckTextField,
                    INVALID_WARNING, 12);
            customerIDWarningCheck = false;
            setDefaultOptionToTextField(customerDiscountOfferTextField, 12);
            setDefaultOptionToTextField(pointDiscountText, 12);
            pointDiscountText.setEditable(false);
            order.setCustomerCard(customerCard);
            return;
        }
        // Thực hiện chức năng
        customerCard = customerCardListCtr
                .containCustomerCard(store.getCustomerCardList(), customerID);
        if (customerCard == null) { // kiểm tra xem thẻ có tồn tại hay không
            insertWarningToTextField(customerPointCheckTextField,
                    CUSTOMER_CARD_NOT_EXIST, 12);
            customerIDWarningCheck = false;
            setDefaultOptionToTextField(customerDiscountOfferTextField, 12);
            setDefaultOptionToTextField(pointDiscountText, 12);
            pointDiscountText.setEditable(false);
        } else {
            customerIDText.setText(customerID);
            pointDiscountText.setText("0");
            customerIDWarningCheck = true;
            customerPointCheckTextField.setText(customerCard.getPoint() + "");
            customerDiscountOfferTextField.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
            customerDiscountOfferTextField.setForeground(Color.RED);
            customerDiscountOfferTextField.setText(
                    cardCtr.getCustomerDiscountOffer(customerCard, store) + "%");
            pointDiscountText.setEditable(true);
        }
        order.setCustomerCard(customerCard);
        loadMainFee(order);
    }//GEN-LAST:event_checkCustomerIDBtnActionPerformed

    private void customerMoneyTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerMoneyTextMouseClicked
        if (!customerMoneyWarningCheck) {
            textFieldMouseClick(customerMoneyText, 12);
            return;
        }
        if (customerMoneyText.getText().length() > (customerMoneyText.getSize().getWidth() / 11)) {
            JOptionPane.showMessageDialog(mainFeePanel, feePanel, expirDateTo, HEIGHT, new ImageIcon());
        }
    }//GEN-LAST:event_customerMoneyTextMouseClicked

    private void discountTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountTextMouseClicked
        if (!discountWarningCheck) {
            textFieldMouseClick(discountText, 12);
        }
    }//GEN-LAST:event_discountTextMouseClicked

    private void pointDiscountTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pointDiscountTextMouseClicked
        if (!pointDiscountWarningCheck) {
            textFieldMouseClick(pointDiscountText, 12);
        }
        pointDiscountText.setEditable(customerIDWarningCheck);
    }//GEN-LAST:event_pointDiscountTextMouseClicked
    private void shippingFeeTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shippingFeeTextMouseClicked
        if (!shippingFeeWarningCheck) {
            textFieldMouseClick(shippingFeeText, 12);
        }
    }//GEN-LAST:event_shippingFeeTextMouseClicked

    private void shippingFeeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shippingFeeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String shippingFeeStr = shippingFeeText.getText();
            if (!ctions.checkIfAValidNumberForGUI(shippingFeeStr) && !shippingFeeStr.isBlank()) {// kiểm tra xem có phải số hợp lệ hay không
                insertWarningToTextField(shippingFeeText, INVALID_WARNING, 12);
                shippingFeeWarningCheck = false;
                return;
            }
            if (shippingFeeStr.isBlank()) {
                shippingFeeText.setText("0.0");
                order.setShippingFee(BigDecimal.ZERO);
                return;
            }
            order.setShippingFee(new BigDecimal(shippingFeeStr));
            shippingFeeText.setText(String.format("%.1f", order.getShippingFee()));
            shippingFeeWarningCheck = true;
            if (ifCashPayment) {
                customerMoneyText.requestFocus();
            } else {
                discountText.requestFocus();
            }
            loadMainFee(order);
        }
    }//GEN-LAST:event_shippingFeeTextKeyPressed

    private void customerMoneyTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerMoneyTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER
                && order.getPaymentOptions().equals(PaymentOptions.CASH_PAYMENT)) {
            String customerMoneyStr = customerMoneyText.getText();
            if (customerMoneyStr.isBlank()) { // kiểm tra xem textField có trống không
                insertWarningToTextField(customerMoneyText, EMPTY_TEXT_FIELD_WARNING, 12);
                customerMoneyWarningCheck = false;
                return;
            } else if (!ctions.checkIfAValidNumberForGUI(customerMoneyStr)) {// kiểm tra xem có phải số hợp lệ hay không
                insertWarningToTextField(customerMoneyText, INVALID_WARNING, 12);
                customerMoneyWarningCheck = false;
                return;
            }
            BigDecimal cusMoney = new BigDecimal(customerMoneyStr);
            if (insufficientCustomerMoneyCheck(cusMoney)) {
                return;
            }
            customerMoneyWarningCheck = true;
            BigDecimal customerMoney = new BigDecimal(customerMoneyStr);
            order.setCusMoney(customerMoney);
            customerMoneyText.setText(String.format("%.1f", order.getCusMoney()));
            discountText.requestFocus();
            loadMainFee(order);
        }
    }//GEN-LAST:event_customerMoneyTextKeyPressed

    private void discountTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String discountStr = discountText.getText();
            if (!ctions.checkIfAValidNumberForGUI(discountStr) && !discountStr.isBlank()) {// kiểm tra xem có phải số hợp lệ hay không
                discountWarningCheck = false;
                insertWarningToTextField(discountText, INVALID_WARNING, 12);
                return;
            }
            if (discountStr.isBlank()) {
                discountText.setText("0");
                order.setDiscount(0);
                return;
            }
            order.setDiscount(Math.min(100, Integer.parseInt(discountStr)));
            discountText.setText(order.getDiscount() + "");
            discountWarningCheck = true;
            if (order.getCustomerCard() != null) {
                pointDiscountText.requestFocus();
            }
            loadMainFee(order);
        }
    }//GEN-LAST:event_discountTextKeyPressed

    private void pointDiscountTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pointDiscountTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && order.getCustomerCard() != null) {
            String pointDiscountStr = pointDiscountText.getText();
            if (!ctions.checkIfANumberSequenceForGUI(pointDiscountStr) && !pointDiscountStr.isBlank()) {// kiểm tra xem có phải số hợp lệ hay không
                insertWarningToTextField(pointDiscountText, INVALID_WARNING, 12);
                pointDiscountWarningCheck = false;
                return;
            }
            if (pointDiscountStr.isBlank()) {
                pointDiscountText.setText("0");
                order.setPointDiscount(BigInteger.ZERO);
                return;
            }
            pointDiscountWarningCheck = true;
            BigInteger usedPoint = new BigInteger(pointDiscountStr);
            BigInteger customerPoint = order.getCustomerCard().getPoint();
            order.setPointDiscount(usedPoint.compareTo(customerPoint) >= 0 ? customerPoint : usedPoint);
            pointDiscountText.setText(order.getPointDiscount() + "");
            loadMainFee(order);
        }
    }//GEN-LAST:event_pointDiscountTextKeyPressed

    private void paymentOptionComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paymentOptionComboboxItemStateChanged
        boolean editable = true;
        // nếu order là chuyển khoản hoặc thẻ thì không cho nhập customerMoney nữa
        if (paymentOptionCombobox.getSelectedIndex() != 0) {
            order.setPaymentOptions(PaymentOptions.OTHER_PAYMENT);
            ifCashPayment = false;
            editable = false;
        } else {
            ifCashPayment = true;
            order.setPaymentOptions(PaymentOptions.CASH_PAYMENT);
        }
        setDefaultOptionToTextField(customerMoneyText, 12);
        customerMoneyText.setText((order.getPaymentOptions() == PaymentOptions.CASH_PAYMENT) ? "0.0" : "");
        customerMoneyText.setEditable(editable);
        shippingFeeText.requestFocus();
        loadMainFee(order);
    }//GEN-LAST:event_paymentOptionComboboxItemStateChanged

    private void customerIDTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerIDTextMouseClicked
        if (!customerIDWarningCheck) {
            textFieldMouseClick(customerIDText, 12);
        }
    }//GEN-LAST:event_customerIDTextMouseClicked

    private void shippingFeeTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shippingFeeTextMouseExited
        if (!shippingFeeText.isEnabled()) {
            return;
        }
        String shippingFeeStr = shippingFeeText.getText();
        if (!ctions.checkIfAValidNumberForGUI(shippingFeeStr) && !shippingFeeStr.isBlank()) {// kiểm tra xem có phải số hợp lệ hay không
            insertWarningToTextField(shippingFeeText, INVALID_WARNING, 12);
            shippingFeeWarningCheck = false;
            return;
        }
        if (shippingFeeStr.isBlank()) {
            shippingFeeText.setText("0.0");
            order.setShippingFee(BigDecimal.ZERO);
            return;
        }
        order.setShippingFee(new BigDecimal(shippingFeeStr));
        shippingFeeText.setText(String.format("%.1f", order.getShippingFee()));
        shippingFeeWarningCheck = true;
        loadMainFee(order);
    }//GEN-LAST:event_shippingFeeTextMouseExited

    private void customerMoneyTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerMoneyTextMouseExited
        if (!customerMoneyText.isEnabled()) {
            return;
        }
        if (order.getPaymentOptions().equals(PaymentOptions.CASH_PAYMENT)) {
            String customerMoneyStr = customerMoneyText.getText();
            if (customerMoneyStr.isBlank()) { // kiểm tra xemD textField có trống không
                customerMoneyText.setText("0.0");
                customerMoneyWarningCheck = false;
                return;
            } else if (!ctions.checkIfAValidNumberForGUI(customerMoneyStr)) {// kiểm tra xem có phải số hợp lệ hay không
                customerMoneyWarningCheck = false;
                insertWarningToTextField(customerMoneyText, INVALID_WARNING, 12);
                return;
            }
            customerMoneyWarningCheck = true;
            BigDecimal customerMoney = new BigDecimal(customerMoneyStr);
            order.setCusMoney(customerMoney);
            customerMoneyText.setText(String.format("%.1f", order.getCusMoney()));
            loadMainFee(order);
        }
    }//GEN-LAST:event_customerMoneyTextMouseExited

    private void discountTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountTextMouseExited
        if (!discountText.isEnabled()) {
            return;
        }
        String discountStr = discountText.getText();
        if (!ctions.checkIfAValidNumberForGUI(discountStr) && !discountStr.isBlank()) {// kiểm tra xem có phải số hợp lệ hay không
            discountWarningCheck = false;
            insertWarningToTextField(discountText, INVALID_WARNING, 12);
            return;
        }
        if (discountStr.isBlank()) {
            order.setDiscount(0);
            discountText.setText("0");
            return;
        }
        order.setDiscount(Math.min(100, Integer.parseInt(discountStr)));
        discountText.setText(order.getDiscount() + "");
        discountWarningCheck = true;
        loadMainFee(order);
        payBtn.requestFocus();
    }//GEN-LAST:event_discountTextMouseExited

    private void pointDiscountTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pointDiscountTextMouseExited
        if (!pointDiscountText.isEnabled()) {
            return;
        }
        if (order.getCustomerCard() != null) {
            String pointDiscountStr = pointDiscountText.getText();
            if (!ctions.checkIfANumberSequenceForGUI(pointDiscountStr) && !pointDiscountStr.isBlank()) {// kiểm tra xem có phải số hợp lệ hay không
                insertWarningToTextField(pointDiscountText, INVALID_WARNING, 12);
                pointDiscountWarningCheck = false;
                return;
            }
            if (pointDiscountStr.isBlank()) {
                order.setPointDiscount(BigInteger.ZERO);
                return;
            }
            pointDiscountWarningCheck = true;
            BigInteger usedPoint = new BigInteger(pointDiscountStr);
            BigInteger customerPoint = order.getCustomerCard().getPoint();
            order.setPointDiscount(usedPoint.compareTo(customerPoint) >= 0 ? customerPoint : usedPoint);
            pointDiscountText.setText(order.getPointDiscount() + "");
            loadMainFee(order);
        }
    }//GEN-LAST:event_pointDiscountTextMouseExited

    private void customerIDTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerIDTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkCustomerIDBtnActionPerformed(null);
        }
    }//GEN-LAST:event_customerIDTextKeyPressed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        setDefaultOptionToTextField(warningTextField, 12);
        String keyString = keyWordTextField.getText();
        GoodsList<Goods> goodsList = new GoodsList<>();
        // Kiểm tra điều kiện
        if (draftGoodsList.getList().isEmpty()) {
            insertWarningToTextField(warningTextField, EMPTY_LIST_WARNING, 12);
            return;
        }
        if (keyString.isBlank()) {
            if (filterGoodsList != null) {
                insertGoodsListToGoodsListTable(filterGoodsList);
            } else {
                insertGoodsListToGoodsListTable(draftGoodsList);
            }
            return;
        }
        // thực hiện chức năng
        Object searchedObject = orderCtr.searchGoods(keyString, draftGoodsList);
        if (searchedObject == null) {
            insertWarningToTextField(warningTextField, NOTHING_FOUND_WARNING, 12);
            return;
        } else if (searchedObject instanceof Goods goods) {
            goodsList.getList().add(goods);
        } else if (searchedObject instanceof GoodsList) {
            goodsList = (GoodsList<Goods>) searchedObject;
        }
        insertGoodsListToGoodsListTable(goodsList);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void keyWordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyWordTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchBtnActionPerformed(null);
        }
    }//GEN-LAST:event_keyWordTextFieldKeyPressed

    private void unitComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_unitComboBoxItemStateChanged
        int selectedIndex = unitComboBox.getSelectedIndex();
        unitFilterCheck = (selectedIndex != 0) && (selectedIndex != -1);
    }//GEN-LAST:event_unitComboBoxItemStateChanged

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        setDefaultOptionToTextField(warningTextField, 12);
        String shipmentID = shipmentIDTextField.getText();
        String goodsID = goodsIDTextField.getText();
        String strQuantityAfter = quantityTextField.getText();
        // kiểm tra điều kiện
        if (shipmentID.isBlank()) { // kiểm tra xem shipment text field có trốn không
            insertWarningToTextField(warningTextField, NOTHING_CHOOSEN_WARNING, 12);
            return;
        } else if (orderSelectedRow == -1) {// kiểm tra xem có chọn đúng bảng không
            insertWarningToTextField(warningTextField, CHOOSE_IN_GOODSLIST_TABLE, 12);
            return;
        } else if (strQuantityAfter.isBlank()) { // kiểm tra xem ô số lượng có trống không
            insertWarningToTextField(quantityTextField, EMPTY_TEXT_FIELD_WARNING, 14);
            return;
        } else if (!ctions.checkIfANumberSequenceForGUI(strQuantityAfter)) { // kiểm tra xem có phải là số hợp lệ không
            insertWarningToTextField(quantityTextField, INVALID_WARNING, 14);
            return;
        }
        // lấy goods và shipment cần chỉnh sửa trong order
        Goods editedGoods = orderCtr.containGoods(order, goodsID);
        Shipment editedShipment = goodsCtr.containShipment(editedGoods.getShipments(), shipmentID);
        // lấy goods và shipment cùng ID với goods và shipment cần chỉnh sửa trong draftGoodsList
        Goods remainGoods = orderCtr.containGoods(draftGoodsList, goodsID);
        Shipment remainShipment = goodsCtr.containShipment(remainGoods.getShipments(), shipmentID);
        // lấy số lượng trước, sau và còn lại
        BigDecimal quantityBefore = editedShipment.getQuantity();
        BigDecimal quantityRemain = remainShipment.getQuantity();
        BigDecimal quantityAfter = new BigDecimal(strQuantityAfter);
        if (quantityAfter.compareTo(quantityBefore
                .add(quantityRemain)) > 0) {// kiểm tra xem trong kho còn đủ sản phẩm không
            insertWarningToTextField(quantityTextField, NOT_ENOUGH_QUANTITY, 14);
            return;
        }
        // thực hiện chức năng
        orderCtr.editOrder(draftGoodsList, order,
                remainShipment, editedGoods, editedShipment,
                quantityBefore, quantityAfter, quantityRemain);
        setDefaultValuesToComponentsInMainOrderFunctionPanel();
        insertGoodsListToOrderGoodsListTable(order);
        insertGoodsListToGoodsListTable(draftGoodsList);
        loadMainFee(order);
    }//GEN-LAST:event_editBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        orderCtr.resetOrder(draftGoodsList, order);
        insertGoodsListToGoodsListTable(draftGoodsList);
        setDefaultValuesToComponentsInMainFeePanel();
        clearTableModel(orderGoodsListModel);
        filterGoodsList = null;
    }//GEN-LAST:event_resetBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        setDefaultOptionToTextField(warningTextField, 12);
        String shipmentID = shipmentIDTextField.getText();
        // Kiểm tra điều kiện
        if (shipmentID.isBlank()) {// Kiểm tra xem đã chọn hay chưa
            insertWarningToTextField(warningTextField, NOTHING_CHOOSEN_WARNING, 12);
            return;
        } else if (orderSelectedRow == -1) { // kiểm tra xem có chọn đúng bảng hay không
            insertWarningToTextField(warningTextField, CHOOSE_IN_GOODSLIST_TABLE, 12);
            return;
        }
        // thực hiện chức năng
        orderCtr.deleteFromOrder(store.getRepository(), draftGoodsList,
                order, shipmentID, goodsIDTextField.getText());
        setDefaultValuesToComponentsInMainOrderFunctionPanel();
        insertGoodsListToOrderGoodsListTable(order);
        insertGoodsListToGoodsListTable(draftGoodsList);
        loadMainFee(order);
    }//GEN-LAST:event_removeBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        setDefaultOptionToTextField(warningTextField, 12);
        String shipmentID = shipmentIDTextField.getText();
        String goodsID = goodsIDTextField.getText();
        String quantity = quantityTextField.getText();
        // kiểm tra điều kiện
        if (shipmentID.isBlank()) { // kiểm tra xem shipmentID textField có trống không
            insertWarningToTextField(warningTextField, NOTHING_CHOOSEN_WARNING, 12);
            return;
        } else if (quantity.isBlank()) {// kiểm tra xem quantity có trống không
            insertWarningToTextField(quantityTextField, EMPTY_TEXT_FIELD_WARNING, 14);
            return;
        } else if (!ctions.checkIfANumberSequenceForGUI(quantity)) {// kiểm tra xem có phải số hợp lệ hay không
            insertWarningToTextField(quantityTextField, INVALID_WARNING, 14);
            return;
        } else if (ctions.checkIfNumberEqualZero(new BigDecimal(quantity))) {
            insertWarningToTextField(quantityTextField, INVALID_WARNING, 14);
            return;
        }
        Shipment addedShipment = goodsCtr.containShipment(
                orderCtr.containGoods(draftGoodsList, goodsID).getShipments(), shipmentID);
        if (ctions.checkIfNumberNegativeForGUI(// kiểm tra xem còn đủ số lượng không
                addedShipment.getQuantity().subtract(new BigDecimal(quantity)))) {
            insertWarningToTextField(quantityTextField, NOT_ENOUGH_QUANTITY, 14);
            return;
        }
        // thực hiện chức năng
        orderCtr.addToOrder(draftGoodsList, order, quantity, goodsID, shipmentID);
        setDefaultValuesToComponentsInMainOrderFunctionPanel();
        insertGoodsListToOrderGoodsListTable(order);
        if (filterGoodsList != null) {
            insertGoodsListToGoodsListTable(filterGoodsList);
        } else {
            insertGoodsListToGoodsListTable(draftGoodsList);
        }
        loadMainFee(order);
    }//GEN-LAST:event_addBtnActionPerformed

    private void quantityTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addBtnActionPerformed(null);
        }
    }//GEN-LAST:event_quantityTextFieldKeyPressed

    private void quantityTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quantityTextFieldMouseClicked
        textFieldMouseClick(quantityTextField, 14);
    }//GEN-LAST:event_quantityTextFieldMouseClicked

    private void priceRangeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_priceRangeComboBoxItemStateChanged
        int selectedIndex = priceRangeComboBox.getSelectedIndex();
        rangeFilterCheck = (selectedIndex != 0) && (selectedIndex != -1);
    }//GEN-LAST:event_priceRangeComboBoxItemStateChanged

    private void productionDateRadioBtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_productionDateRadioBtnItemStateChanged
        fromDateTextField.setEditable(true);
        toDateTextField.setEditable(true);
        if (productionDateRadioBtn.isSelected()) {
            setDefaultOptionToTextField(fromDateTextField, 14);
            setDefaultOptionToTextField(toDateTextField, 14);
            fromDateTextField.setText(productionDateFrom);
            toDateTextField.setText(productionDateTo);
        }
    }//GEN-LAST:event_productionDateRadioBtnItemStateChanged

    private void fromDateTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromDateTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String fromDateStr = fromDateTextField.getText();
            if (productionDateRadioBtn.isSelected()) {
                if (!fromDateStr.isBlank() && !ctions.checkIfValidDate(fromDateStr)) {// kiểm tra dateString có hợp lệ không
                    insertWarningToTextField(fromDateTextField, INVALID_WARNING, 12);
                    productionDateFromValid = false;
                    productionDateFrom = "";
                    return;
                }
                productionDateFrom = fromDateStr;
                productionDateFromValid = true;
            } else if (expirDateRadioBtn.isSelected()) {
                if (!fromDateStr.isBlank() && !ctions.checkIfValidDate(fromDateStr)) {// kiểm tra dateString có hợp lệ không
                    insertWarningToTextField(fromDateTextField, INVALID_WARNING, 12);
                    expirationDateFromValid = false;
                    expirDateFrom = "";
                    return;
                }
                expirDateFrom = fromDateStr;
                expirationDateFromValid = true;
            }
        }
    }//GEN-LAST:event_fromDateTextFieldKeyPressed

    private void toDateTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toDateTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String toDateStr = toDateTextField.getText();
            if (productionDateRadioBtn.isSelected()) {
                if (!toDateStr.isBlank()&&!ctions.checkIfValidDate(toDateStr)) {// kiểm tra dateString có hợp lệ không
                    insertWarningToTextField(toDateTextField, INVALID_WARNING, 12);
                    productionDateToValid = false;
                    productionDateTo = "";
                    return;
                }
                productionDateTo = toDateStr;
                productionDateToValid = true;
            } else if (expirDateRadioBtn.isSelected()) {
                if (!toDateStr.isBlank()&&!ctions.checkIfValidDate(toDateStr)) {// kiểm tra dateString có hợp lệ không
                    insertWarningToTextField(toDateTextField, INVALID_WARNING, 12);
                    expirationDateToValid = false;
                    expirDateTo = "";
                    return;
                }
                expirDateTo = toDateStr;
                expirationDateToValid = true;
            }
        }
    }//GEN-LAST:event_toDateTextFieldKeyPressed

    private void expirDateRadioBtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_expirDateRadioBtnItemStateChanged
        fromDateTextField.setEditable(true);
        toDateTextField.setEditable(true);
        if (expirDateRadioBtn.isSelected()) {
            setDefaultOptionToTextField(fromDateTextField, 14);
            setDefaultOptionToTextField(toDateTextField, 14);
            fromDateTextField.setText(expirDateFrom);
            toDateTextField.setText(expirDateTo);
        }
    }//GEN-LAST:event_expirDateRadioBtnItemStateChanged

    private void fromDateTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromDateTextFieldMouseClicked
        if (productionDateRadioBtn.isSelected()) {
            if (!productionDateFromValid) {
                textFieldMouseClick(fromDateTextField, 14);
            }
        } else if (expirDateRadioBtn.isSelected()) {
            if (!expirationDateFromValid) {
                textFieldMouseClick(fromDateTextField, 14);
            }
        }
    }//GEN-LAST:event_fromDateTextFieldMouseClicked

    private void toDateTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toDateTextFieldMouseClicked
        if (productionDateRadioBtn.isSelected()) {
            if (!productionDateToValid) {
                textFieldMouseClick(toDateTextField, 14);
            }
        } else if (expirDateRadioBtn.isSelected()) {
            if (!expirationDateToValid) {
                textFieldMouseClick(toDateTextField, 14);
            }
        }
    }//GEN-LAST:event_toDateTextFieldMouseClicked

    private void filterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBtnActionPerformed
        filterGoodsList = orderCtr.makeDraftGoodsList(draftGoodsList);
        if (rangeFilterCheck) {
            String selectedRange = priceRangeComboBox.getSelectedItem().toString();
            CustomPair priceRange = settingsCtr.convertFromComparisonOperatorToRange(selectedRange);
            filterGoodsList = new FilterGoodsList(filterGoodsList)
                    .withinPriceRange((BigDecimal) priceRange.getK(), (BigDecimal) priceRange.getV());
        }
        if (unitFilterCheck) {
            String selectedUnit = unitComboBox.getSelectedItem().toString();
            filterGoodsList = new FilterGoodsList(filterGoodsList).withSameUnit(selectedUnit);
        }
        if (productionDateFromValid 
                && productionDateToValid 
                && !fromDateTextField.getText().isBlank()
                && !toDateTextField.getText().isBlank()) {
            productionDateFrom = fromDateTextField.getText();
            productionDateTo = toDateTextField.getText();
            if (ctions.checkIfDateIsBeforeAnotherDate(productionDateFrom, productionDateTo)) {
                filterGoodsList = new FilterGoodsList(filterGoodsList)
                        .withinProductionDateRange(
                                LocalDate.parse(productionDateFrom, DateTimeFormatter.ofPattern(INPUT_DATE_PATTERN)),
                                LocalDate.parse(productionDateTo, DateTimeFormatter.ofPattern(INPUT_DATE_PATTERN)));
                productionDateFromValid = true;
                productionDateToValid = true;
            } else {
                if (!ctions.checkIfValidDate(productionDateFrom)) {// kiểm tra dateString có hợp lệ không
                    productionDateRadioBtn.setSelected(true);
                    insertWarningToTextField(fromDateTextField, INVALID_WARNING, 12);
                    productionDateFromValid = false;
                    productionDateFrom = "";
                } 
                if (!ctions.checkIfValidDate(productionDateTo)) {// kiểm tra dateString có hợp lệ không
                    productionDateRadioBtn.setSelected(true);
                    insertWarningToTextField(toDateTextField, INVALID_WARNING, 12);
                    productionDateToValid = false;
                    productionDateTo = "";
                }
                return;
            }
        }
        if (expirationDateFromValid 
                && expirationDateToValid
                && !fromDateTextField.getText().isBlank()
                && !toDateTextField.getText().isBlank()) {
            expirDateFrom = fromDateTextField.getText();
            expirDateTo = toDateTextField.getText();
            if (ctions.checkIfDateIsBeforeAnotherDate(expirDateFrom, expirDateTo)) {
                filterGoodsList = new FilterGoodsList(filterGoodsList)
                        .withinExpirDateRange(
                                LocalDate.parse(expirDateFrom, DateTimeFormatter.ofPattern(INPUT_DATE_PATTERN)),
                                LocalDate.parse(expirDateTo, DateTimeFormatter.ofPattern(INPUT_DATE_PATTERN)));
                expirationDateFromValid  = true;
                expirationDateToValid = true;
            } else {
                if (!ctions.checkIfValidDate(expirDateFrom)) {// kiểm tra dateString có hợp lệ không
                    expirDateRadioBtn.setSelected(true);
                    insertWarningToTextField(fromDateTextField, INVALID_WARNING, 12);
                    expirationDateFromValid = false;
                    expirDateFrom = "";
                }
                if (!ctions.checkIfValidDate(expirDateTo)) {// kiểm tra dateString có hợp lệ không
                    expirDateRadioBtn.setSelected(true);
                    insertWarningToTextField(toDateTextField, INVALID_WARNING, 12);
                    expirationDateToValid = false;
                    expirDateTo = "";
                }
                return;
            }
        }
        insertGoodsListToGoodsListTable(filterGoodsList);
    }//GEN-LAST:event_filterBtnActionPerformed

    private void filterSwitchRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterSwitchRadioBtnActionPerformed
        if (filterSwitchRadioBtn.isSelected()) {
            setEnableFilterPanel(true);
        } else {
            filterGoodsList = null;
            setEnableFilterPanel(false);
        }
    }//GEN-LAST:event_filterSwitchRadioBtnActionPerformed

    private void totalTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalTextFieldMouseClicked
        if (totalTextField.getText().length() > (totalTextField.getSize().getWidth() / 9)) {
            JOptionPane.showMessageDialog(this,
                    totalTextField.getText(), "Tổng Thanh Toán",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_totalTextFieldMouseClicked

    private void pointDiscountAmountTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pointDiscountAmountTextFieldMouseClicked
        if (pointDiscountAmountTextField.getText().length() > (pointDiscountAmountTextField.getSize().getWidth() / 9)) {
            JOptionPane.showMessageDialog(this,
                    pointDiscountAmountTextField.getText(), "Khoản Chiết Khấu Điểm",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_pointDiscountAmountTextFieldMouseClicked

    private void taxAmountTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taxAmountTextFieldMouseClicked
        if (taxAmountTextField.getText().length() > (taxAmountTextField.getSize().getWidth() / 9)) {
            JOptionPane.showMessageDialog(this,
                    taxAmountTextField.getText(), "Khoản thuế",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_taxAmountTextFieldMouseClicked

    private void subTotalTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subTotalTextFieldMouseClicked
        if (subTotalTextField.getText().length() > (subTotalTextField.getSize().getWidth() / 9)) {
            JOptionPane.showMessageDialog(this,
                    subTotalTextField.getText(), "Thành Tiền",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_subTotalTextFieldMouseClicked

    private void discountAmountTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountAmountTextFieldMouseClicked
        if (discountAmountTextField.getText().length() > (discountAmountTextField.getSize().getWidth() / 9)) {
            JOptionPane.showMessageDialog(this,
                    discountAmountTextField.getText(), "Khoản Chiết Khấu Tay",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_discountAmountTextFieldMouseClicked

    private void changeAmountTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeAmountTextFieldMouseClicked
        if (changeAmountTextField.getText().length() > (changeAmountTextField.getSize().getWidth() / 9)) {
            JOptionPane.showMessageDialog(this,
                    changeAmountTextField.getText(), "Tiền Thừa Khách",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_changeAmountTextFieldMouseClicked

    private void productionDateRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productionDateRadioBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productionDateRadioBtnActionPerformed

    private void keyWordTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyWordTextFieldKeyReleased
        String keyString = keyWordTextField.getText();
        GoodsList<Goods> goodsList = new GoodsList<>();
        Object searchedObject = orderCtr.searchGoods(keyString, draftGoodsList);
        if (searchedObject == null) {
            insertWarningToTextField(warningTextField, NOTHING_FOUND_WARNING, 12);
            clearTableModel(goodsListModel);
            return;
        } else if (searchedObject instanceof Goods goods) {
            goodsList.getList().add(goods);
        } else if (searchedObject instanceof GoodsList) {
            goodsList = (GoodsList<Goods>) searchedObject;
        }
        if (!goodsList.getList().isEmpty()) {
            setDefaultOptionToTextField(warningTextField, 12);
        }
        insertGoodsListToGoodsListTable(goodsList);
    }//GEN-LAST:event_keyWordTextFieldKeyReleased

    private void textFieldMouseClick(javax.swing.JTextField textField, int size) {
        setDefaultOptionToTextField(textField, size);
        textField.setEditable(true);
    }

    private void setDefaultOptionToTextField(javax.swing.JTextField textField, int size) {
        textField.setFont(new java.awt.Font("Segoe UI", 0, size)); // NOI18N
        textField.setForeground(new java.awt.Color(0, 0, 0));
        textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textField.setText("");
    }

    private boolean insufficientCustomerMoneyCheck(BigDecimal customerMoney) {
        if (paymentOptionCombobox.getSelectedIndex() == 0) {
            if (orderCtr.getTotal(order, store).compareTo(customerMoney) == 1) {
                insertWarningToTextField(customerMoneyText, INSUFFICIENT_MONEY, 12);
                customerMoneyWarningCheck = false;
                return true;
            }
        }
        return false;
    }

    private void insertWarningToTextField(javax.swing.JTextField textField, String warningText, int size) {
        textField.setFont(new java.awt.Font("Segoe UI", 2, size)); // NOI18N
        textField.setForeground(new java.awt.Color(255, 0, 0));
        textField.setText(warningText);
        textField.setEditable(false);
    }

    private void insertGoodsListToGoodsListTable(GoodsList<Goods> goodsList) {
        clearTableModel(goodsListModel);
        for (Goods goods : goodsList.getList()) {
            int size = goods.getShipments().size();
            for (int i = 0; i < size; i++) {
                Shipment shipment = goods.getShipments().get(i);
                if (i == 0) {
                    insertNewGoodsToGoodsListTable(goods, shipment);
                } else {
                    insertExistedGoodsToGoodsListTable(shipment);
                }
            }
        }
    }

    private void insertNewGoodsToGoodsListTable(Goods goods, Shipment shipment) {
        goodsListModel.addRow(new Object[]{
            goods.getID(),
            goods.getGoodsName(),
            goods.getManufacture(),
            goods.getUnit(),
            goods.getListPrice(),
            shipment.getID(),
            (shipment.getNsx() == null) ? "" : shipment.getNsx().format(DateTimeFormatter.ofPattern(OUTPUT_DATE_PATTERN)),
            (shipment.getHsd() == null) ? "" : shipment.getHsd().format(DateTimeFormatter.ofPattern(OUTPUT_DATE_PATTERN)),
            shipment.getQuantity()
        });
    }

    private void insertExistedGoodsToGoodsListTable(Shipment shipment) {
        goodsListModel.addRow(new Object[]{
            "",
            "",
            "",
            "",
            "",
            shipment.getID(),
            (shipment.getNsx() == null) ? "" : shipment.getNsx().format(DateTimeFormatter.ofPattern(OUTPUT_DATE_PATTERN)),
            (shipment.getHsd() == null) ? "" : shipment.getHsd().format(DateTimeFormatter.ofPattern(OUTPUT_DATE_PATTERN)),
            shipment.getQuantity()
        });
    }

    private void insertGoodsListToOrderGoodsListTable(GoodsList<Goods> orderGoodsList) {
        clearTableModel(orderGoodsListModel);
        for (Goods goods : orderGoodsList.getList()) {
            int size = goods.getShipments().size();
            for (int i = 0; i < size; i++) {
                Shipment shipment = goods.getShipments().get(i);
                if (i == 0) {
                    insertNewGoodsToOrderGoodsListTable(goods, shipment);
                } else {
                    insertExistedGoodsToOrderGoodsListTable(shipment);
                }
            }
        }
    }

    private void insertNewGoodsToOrderGoodsListTable(Goods goods, Shipment shipment) {
        orderGoodsListModel.addRow(new Object[]{
            goods.getID(),
            goods.getGoodsName(),
            goodsCtr.getTotalQuanByShipments(goods),
            goods.getUnit(),
            goods.getListPrice(),
            shipment.getID(),
            shipment.getQuantity(),});
    }

    private void insertExistedGoodsToOrderGoodsListTable(Shipment shipment) {
        orderGoodsListModel.addRow(new Object[]{
            "",
            "",
            "",
            "",
            "",
            shipment.getID(),
            shipment.getQuantity()
        });
    }

    private void clearTableModel(DefaultTableModel tableModel) {
        int numberOfRow = tableModel.getRowCount();
        for (int i = 0; i < numberOfRow; i++) {
            tableModel.removeRow(0);
        }
    }

    private void computeSizeOfEachColumnInGoodsListTable() {
        // duyet tu dau den cuoi mang de tim MAX_SIZE cua giatri input tung thuoc tinh
        for (Goods goods : draftGoodsList.getList()) {
            if (goods.getID().length() + extraLength > goodsIDMaxSize) {
                goodsIDMaxSize = goods.getID().length() + extraLength;
            }
            if (goods.getGoodsName().length() + extraLength > goodsNameMaxSize) {
                goodsNameMaxSize = goods.getGoodsName().length() + extraLength;
            }
            if (goods.getManufacture().length() + extraLength > manufactureMaxSize) {
                manufactureMaxSize = goods.getManufacture().length() + extraLength;
            }
            if (goods.getUnit().length() + extraLength > unitMaxSize) {
                unitMaxSize = goods.getUnit().length() + extraLength;
            }
            if (String.format(".1f", goods.getListPrice()).length() + extraLength > listPriceMaxSize) {
                listPriceMaxSize = String.format(".1f", goods.getListPrice()).length() + extraLength;
            }
            if (String.format(".1f", goods.getTotalQuantity()).length() + extraLength > totalQuantityMaxSize) {
                totalQuantityMaxSize = String.format(".1f", goods.getTotalQuantity()).length() + extraLength;
            }
            for (Shipment shipment : goods.getShipments()) {
                if (shipment.getID().length() + extraLength > shipmentIDMaxSize) {
                    shipmentIDMaxSize = shipment.getID().length() + extraLength;
                }
                if (String.format(".1f", shipment.getQuantity()).length() + extraLength > shipmentQuantityMaxSize) {
                    shipmentQuantityMaxSize = String.format(".1f", shipment.getQuantity()).length() + extraLength;
                }
            }
        }
        goodsListTable.getColumnModel().getColumn(0).setMinWidth(goodsIDMaxSize);
        goodsListTable.getColumnModel().getColumn(1).setMinWidth(goodsNameMaxSize);
        goodsListTable.getColumnModel().getColumn(2).setMinWidth(manufactureMaxSize);
        goodsListTable.getColumnModel().getColumn(3).setMinWidth(unitMaxSize);
        goodsListTable.getColumnModel().getColumn(4).setMinWidth(listPriceMaxSize);
        goodsListTable.getColumnModel().getColumn(5).setMinWidth(shipmentIDMaxSize);
        goodsListTable.getColumnModel().getColumn(6).setMinWidth(productionDateMaxSize);
        goodsListTable.getColumnModel().getColumn(7).setMinWidth(expirationDateMaxSize);
        goodsListTable.getColumnModel().getColumn(8).setMinWidth(shipmentQuantityMaxSize);
    }

    private void computeSizeOfEachColumnInOrderGoodsListTable() {
        orderGoodsListTable.getColumnModel().getColumn(0).setMinWidth(goodsIDMaxSize);
        orderGoodsListTable.getColumnModel().getColumn(1).setMinWidth(goodsNameMaxSize);
        orderGoodsListTable.getColumnModel().getColumn(2).setMinWidth(totalQuantityMaxSize);
        orderGoodsListTable.getColumnModel().getColumn(3).setMinWidth(unitMaxSize);
        orderGoodsListTable.getColumnModel().getColumn(4).setMinWidth(listPriceMaxSize);
        orderGoodsListTable.getColumnModel().getColumn(5).setMinWidth(shipmentIDMaxSize);
        orderGoodsListTable.getColumnModel().getColumn(6).setMinWidth(shipmentIDMaxSize);
    }

    private void setDefaultValuesToComponentsInMainOrderFunctionPanel() {
        fromDateTextField.setText("");
        toDateTextField.setText("");
        keyWordTextField.setText("");
        goodsIDTextField.setText("");
        shipmentIDTextField.setText("");
        quantityTextField.setText("");
    }

    private void setDefaultValuesToComponentsInSubFeePanel() {
        paymentOptionCombobox.setSelectedIndex(0);
        taxText.setText(shift.getTax() + "");
        shippingFeeText.setText("0.0");
        customerMoneyText.setText("0.0");
        discountText.setText("0");
        pointDiscountAmountTextField.setText("");
    }

    private void setDefaultValuesToComponentsInMainFeePanel() {
        subTotalTextField.setText("0.0");
        taxAmountTextField.setText("0.0");
        discountAmountTextField.setText("0.0");
        pointDiscountAmountTextField.setText("0.0");
        totalTextField.setText("0.0");
        changeAmountTextField.setText("0.0");
    }

    private void setDefaultValuesToComponentsInEmployeeAndCustomerPanel() {
        cashierTextField.setText((shift.getCashier() == null) ? ""
                : shift.getCashier().toString());
        customerIDText.setText("");
        customerPointCheckTextField.setText("");
        customerDiscountOfferTextField.setText("");
    }

    private void setDefaultValuesToAllComponents() {
        pointDiscountText.setEditable(false);
        setDefaultValuesToComponentsInMainOrderFunctionPanel();
        setDefaultValuesToComponentsInSubFeePanel();
        setDefaultValuesToComponentsInMainFeePanel();
        setDefaultValuesToComponentsInEmployeeAndCustomerPanel();
    }

    private void setEnableFilterPanel(boolean enable) {
        priceRangeLabel.setEnabled(enable);
        priceRangeComboBox.setEnabled(enable);
        unitLabel.setEnabled(enable);
        unitComboBox.setEnabled(enable);
        productionDateRadioBtn.setEnabled(enable);
        expirDateRadioBtn.setEnabled(enable);
        fromLabel.setEnabled(enable);
        toLabel.setEnabled(enable);
        fromDateTextField.setEnabled(enable);
        toDateTextField.setEnabled(enable);
        filterBtn.setEnabled(enable);
    }

    private void setEnableToEmployeeAndCustomerPanel(boolean enable) {
        customerIDLabel.setEnabled(enable);
        customerIDText.setEnabled(enable);
        checkCustomerIDBtn.setEnabled(enable);
        customerPointLabel.setEnabled(enable);
        customerPointCheckTextField.setEnabled(enable);
        customerDiscountOfferLabel.setEnabled(enable);
        customerDiscountOfferTextField.setEnabled(enable);
        cashierLabel.setEnabled(enable);
        cashierTextField.setEnabled(enable);
    }

    private void setEnableToMainOrderFunctionPanel(boolean enable) {
        if (!enable) {
            setEnableFilterPanel(enable);
        }
        filterSwitchRadioBtn.setEnabled(enable);
        keyWordLabel.setEnabled(enable);
        keyWordTextField.setEnabled(enable);
        searchBtn.setEnabled(enable);
        quantityLabel.setEnabled(enable);
        quantityTextField.setEnabled(enable);
        goodsIDLabel.setEnabled(enable);
        goodsIDTextField.setEnabled(enable);
        shipmentIDLabel.setEnabled(enable);
        shipmentIDTextField.setEnabled(enable);
        addBtn.setEnabled(enable);
        removeBtn.setEnabled(enable);
        editBtn.setEnabled(enable);
        resetBtn.setEnabled(enable);
        warningTextField.setEnabled(enable);
    }

    private void setEnableToSubFeePanel(boolean enable) {
        paymentOptionLabel.setEnabled(enable);
        paymentOptionCombobox.setEnabled(enable);
        shippingFeeLabel.setEnabled(enable);
        shippingFeeText.setEnabled(enable);
        taxText.setEnabled(enable);
        taxLabel.setEnabled(enable);
        customerMoneyLabel.setEnabled(enable);
        customerMoneyText.setEnabled(enable);
        discountLabel.setEnabled(enable);
        discountText.setEnabled(enable);
        pointDiscountLabel.setEnabled(enable);
        pointDiscountText.setEnabled(enable);
    }

    private void setEnableToMainFeePanel(boolean enable) {
        totalLabel.setEnabled(enable);
        totalTextField.setEnabled(enable);
        taxAmountLabel.setEnabled(enable);
        taxAmountTextField.setEnabled(enable);
        discountAmountLabel.setEnabled(enable);
        discountAmountTextField.setEnabled(enable);
        pointDiscountAmountLabel.setEnabled(enable);
        pointDiscountAmountTextField.setEnabled(enable);
        subTotalLabel.setEnabled(enable);
        subTotalTextField.setEnabled(enable);
        changeAmountLabel.setEnabled(enable);
        changeAmountTextField.setEnabled(enable);
        payBtn.setEnabled(enable);
        payAnfPrintBtn.setEnabled(enable);
    }

    public void setEnableToAllPanel(boolean enable) {
        setEnableToEmployeeAndCustomerPanel(enable);
        setEnableToMainOrderFunctionPanel(enable);
        setEnableToSubFeePanel(enable);
        setEnableToMainFeePanel(enable);
        goodsListTable.setEnabled(enable);
        orderGoodsListTable.setEnabled(enable);
    }

    private void loadMainFee(Order order) {
        subTotalTextField.setText(String.format("%.1f", orderCtr.getSubTotal(order)));
        taxAmountTextField.setText(String.format("%.1f", orderCtr.getTaxAmount(order)));
        discountAmountTextField.setText(String.format("%.1f", orderCtr.getDiscountAmount(order)));
        BigDecimal pointDiscountAmount = (!customerIDWarningCheck)
                ? BigDecimal.ZERO : orderCtr.getPointDiscountAmount(order, store);
        pointDiscountAmountTextField.setText(String.format("%.1f", pointDiscountAmount));
        totalTextField.setText(String.format("%.1f", orderCtr.getTotal(order, store)));
        BigDecimal change = (order.getPaymentOptions().compareTo(PaymentOptions.OTHER_PAYMENT) == 0)
                ? BigDecimal.ZERO : orderCtr.getChange(order, store);
        changeAmountTextField.setText(String.format("%.1f", change));
    }

    private void passValueToUnitCombobox() {
        int bound = unitComboBox.getItemCount();
        if (bound > 1) {
            for (int i = 1; i < bound; i++) {
                unitComboBox.removeItemAt(1);
            }
        }
        store.getUnits().getBucket().stream().forEach(
                x -> unitComboBox.insertItemAt(x,
                        unitComboBox.getItemCount()));
    }

    private void passValueToPriceRangeComboBox() {
        int bound = priceRangeComboBox.getItemCount();
        if (bound > 1) {
            for (int i = 1; i < bound; i++) {
                priceRangeComboBox.removeItemAt(1);
            }
        }
        store.getSettings().getPriceAmountList().stream().forEach(
                x -> priceRangeComboBox.insertItemAt(x,
                        priceRangeComboBox.getItemCount()));
    }

    private void showWarningJOptionPane(String message) {
        JOptionPane.showMessageDialog(this, message,
                "Lỗi", JOptionPane.WARNING_MESSAGE);
    }

    private void initNewOrder() {
        // Tạo order mới
        order = orderCtr.makeNewOrder(shift, store.getiDGenerator());
        // Tạo danh sách nháp để làm việc
        draftGoodsList = orderCtr.makeDraftGoodsList(store.getRepository());
        lastGoodsList = new GoodsList(store.getRepository().getList()
                .stream()
                .map(x -> goodsCtr.cloneGoods(x))
                .collect(Collectors.toList()));
        // reset lại toàn bộ components theo order mới
        passValueToUnitCombobox();
        passValueToPriceRangeComboBox();
        setDefaultValuesToAllComponents();
        clearTableModel(orderGoodsListModel);
        computeSizeOfEachColumnInGoodsListTable();
        computeSizeOfEachColumnInOrderGoodsListTable();
        insertGoodsListToGoodsListTable(draftGoodsList);
        orderIDLabel.setText("Mã Hóa Đơn: " + order.getID());
        employeeAndCustomerPanel.setEnabled(false);
    }

    private void initVariables() {
        // set các visible, editable, enable là false khi khởi tạo
        priceRangeComboBox.setEnabled(false);
        unitComboBox.setEnabled(false);
        productionDateRadioBtn.setEnabled(false);
        expirDateRadioBtn.setEnabled(false);
        fromDateTextField.setEditable(false);
        toDateTextField.setEditable(false);
        filterBtn.setEnabled(false);
        setDefaultOptionToTextField(warningTextField, 12);
        // Title
//        tb = (TitledBorder) employeeAndCustomerPanel.getBorder();
//        tb.setTitleFont(new java.awt.Font("Segoe UI", 1, 14));
//        tb.setTitleJustification(TitledBorder.DEFAULT_POSITION);
        // set các biến khác được sử dụng 
        goodListScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        goodListScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        goodsListModel = (DefaultTableModel) goodsListTable.getModel();
        orderGoodsListScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        orderGoodsListScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        orderGoodsListModel = (DefaultTableModel) orderGoodsListTable.getModel();
        orderCtr = new OrderController();
        goodsCtr = new GoodsController();
        settingsCtr = new SettingsController();
        customerCardListCtr = new CustomerCardListController();
        cardCtr = new CustomerCardController();
        ctions = new Cautions();
        store = new Store();
    }

    public void passData(Store store, Shift shift) {
        this.store = store;
        this.shift = shift;
    }

    public void refresh(Shift shift) {
        this.shift = shift;
        if (shift.getState().equals(ShiftState.OPENED) && order == null) {
            initNewOrder();
            return;
        } else {
            draftGoodsList = orderCtr.makeDraftGoodsList(store.getRepository());
            cashierTextField.setText(shift.getCashier().toString());
            taxText.setText(shift.getTax() + "");
            passValueToUnitCombobox();
            passValueToPriceRangeComboBox();
        }
        if (!customerIDText.getText().isBlank()) { // kiem tra lai customerID tai textfield
            checkCustomerIDBtnActionPerformed(null);
        }
        if (lastGoodsList != null) {
            Iterator<Goods> goodsIt = order.getList().iterator();
            while (goodsIt.hasNext()) {
                Goods goodsInOrder = goodsIt.next();
                Goods goodsInRepo = orderCtr.containGoods(draftGoodsList, goodsInOrder.getID());
                Goods goodsInDraftGoodsList = orderCtr.containGoods(lastGoodsList, goodsInOrder.getID());
                if (goodsInRepo == null) {
                    showWarningJOptionPane(GOODS_HAS_BEEN_CHANGED_WARNING);
                    goodsIt.remove();
                } else {
                    if (!goodsCtr.compare(goodsInRepo, goodsInDraftGoodsList)) {
                        showWarningJOptionPane(GOODS_HAS_BEEN_CHANGED_WARNING);
                        goodsIt.remove();
                    } else {
                        // Giảm số lượng của những mặt hàng đã thêm vào order
                        for (Shipment orderShipment : goodsInOrder.getShipments()) {
                            Shipment repoShipment = goodsCtr
                                    .containShipment(goodsInRepo.getShipments(), orderShipment.getID());
                            repoShipment.setQuantity(repoShipment
                                    .getQuantity()
                                    .subtract(orderShipment.getQuantity()));
                        }
                    }
                }
            }
        }
        insertGoodsListToOrderGoodsListTable(order);
        insertGoodsListToGoodsListTable(draftGoodsList);
        loadMainFee(order);
    }

    private int orderSelectedRow = -1;
    private String productionDateFrom;
    private String productionDateTo;
    private String expirDateFrom;
    private String expirDateTo;
    private boolean rangeFilterCheck = false;
    private boolean productionDateFromValid = true;
    private boolean productionDateToValid = true;
    private boolean expirationDateFromValid = false;
    private boolean expirationDateToValid = false;
    private boolean unitFilterCheck = true;
    private boolean pointDiscountWarningCheck = false;
    private boolean discountWarningCheck = false;
    private boolean customerIDWarningCheck = false;
    private boolean shippingFeeWarningCheck = false;
    private boolean customerMoneyWarningCheck = false;
    private boolean ifCashPayment = true;
    private Order order;
    private Store store;
    private Shift shift;
    private Cautions ctions;
    private GoodsList<Goods> lastGoodsList;
    private GoodsList<Goods> filterGoodsList;
    private GoodsList<Goods> draftGoodsList;
    private OrderController orderCtr;
    private GoodsController goodsCtr;
    private SettingsController settingsCtr;
    private CustomerCardController cardCtr;
    private CustomerCardListController customerCardListCtr;
    private DefaultTableModel orderGoodsListModel;
    private DefaultTableModel goodsListModel;
    final String INPUT_DATE_PATTERN = "d/M/y";
    final String OUTPUT_DATE_PATTERN = "dd/MM/yyyy";
    private final String EMPTY_LIST_WARNING = "Danh sách trống!";
    private final String NOTHING_FOUND_WARNING = "Không tìm thấy từ khóa!";
    private final String NOTHING_CHOOSEN_WARNING = "Bạn chưa chọn mặt hàng nào!";
    private final String GOODS_HAS_BEEN_CHANGED_WARNING = "Mặt hàng bạn thêm đã bị thay đổi!\n Xóa khỏi hóa đơn...";
    private final String EMPTY_TEXT_FIELD_WARNING = "Ô nhập Trống!";
    private final String INVALID_WARNING = "Không hợp lệ!";
    private final String NOT_ENOUGH_QUANTITY = "Không đủ số lượng!";
    private final String CHOOSE_IN_GOODSLIST_TABLE = "Chọn ở bảng hóa đơn!";
    private final String CUSTOMER_CARD_NOT_EXIST = "Thẻ không tồn tại!";
    private final String INSUFFICIENT_MONEY = "Số dư âm!";
    private final int extraLength = 100;
    private int goodsIDMaxSize = "Mã SP".length() + extraLength;
    private int goodsNameMaxSize = "Tên SP".length() + extraLength;
    private int manufactureMaxSize = "Nhà sx".length() + extraLength;
    private int unitMaxSize = "ĐV".length() + extraLength;
    private int listPriceMaxSize = "Giá Bán/ĐV".length() + extraLength;
    private int shipmentIDMaxSize = "Mã lô".length() + extraLength;
    private final int productionDateMaxSize = "Ngày sx".length() + extraLength;
    private final int expirationDateMaxSize = "Hạn SD".length() + extraLength;
    private int shipmentQuantityMaxSize = "SL".length() + extraLength;
    private int totalQuantityMaxSize = "Tong SL".length() + extraLength;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aboutGoodsAndCusPanel;
    private javax.swing.JPanel aboutOrderPanel;
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel cashierLabel;
    private javax.swing.JTextField cashierTextField;
    private javax.swing.JLabel changeAmountLabel;
    private javax.swing.JTextField changeAmountTextField;
    private javax.swing.JButton checkCustomerIDBtn;
    private javax.swing.JLabel customerDiscountOfferLabel;
    private javax.swing.JTextField customerDiscountOfferTextField;
    private javax.swing.JLabel customerIDLabel;
    private javax.swing.JTextField customerIDText;
    private javax.swing.JLabel customerMoneyLabel;
    private javax.swing.JTextField customerMoneyText;
    private javax.swing.JTextField customerPointCheckTextField;
    private javax.swing.JLabel customerPointLabel;
    private javax.swing.JLabel discountAmountLabel;
    private javax.swing.JTextField discountAmountTextField;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountText;
    private javax.swing.JButton editBtn;
    private javax.swing.JPanel employeeAndCustomerPanel;
    private javax.swing.JRadioButton expirDateRadioBtn;
    private javax.swing.JPanel feePanel;
    private javax.swing.JButton filterBtn;
    private javax.swing.JRadioButton filterSwitchRadioBtn;
    private javax.swing.JTextField fromDateTextField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JScrollPane goodListScrollPane;
    private javax.swing.JLabel goodsIDLabel;
    private javax.swing.JTextField goodsIDTextField;
    private javax.swing.JTable goodsListTable;
    private javax.swing.JPanel goodsPanel;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel keyWordLabel;
    private javax.swing.JTextField keyWordTextField;
    private javax.swing.JPanel mainFeePanel;
    private javax.swing.JPanel mainOrderFunctionPanel;
    private javax.swing.JPanel orderDisplayPanel;
    private javax.swing.JScrollPane orderGoodsListScrollPane;
    private javax.swing.JTable orderGoodsListTable;
    private javax.swing.JLabel orderIDLabel;
    private javax.swing.JButton payAnfPrintBtn;
    private javax.swing.JButton payBtn;
    private javax.swing.JComboBox<String> paymentOptionCombobox;
    private javax.swing.JLabel paymentOptionLabel;
    private javax.swing.JLabel pointDiscountAmountLabel;
    private javax.swing.JTextField pointDiscountAmountTextField;
    private javax.swing.JLabel pointDiscountLabel;
    private javax.swing.JTextField pointDiscountText;
    private javax.swing.JComboBox<String> priceRangeComboBox;
    private javax.swing.JLabel priceRangeLabel;
    private javax.swing.ButtonGroup proAndExpirDateBtnGroup;
    private javax.swing.JRadioButton productionDateRadioBtn;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel shipmentIDLabel;
    private javax.swing.JTextField shipmentIDTextField;
    private javax.swing.JLabel shippingFeeLabel;
    private javax.swing.JTextField shippingFeeText;
    private javax.swing.JPanel subFeePanel;
    private javax.swing.JLabel subTotalLabel;
    private javax.swing.JTextField subTotalTextField;
    private javax.swing.JLabel taxAmountLabel;
    private javax.swing.JTextField taxAmountTextField;
    private javax.swing.JLabel taxLabel;
    private javax.swing.JTextField taxText;
    private javax.swing.JTextField toDateTextField;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JComboBox<String> unitComboBox;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JTextField warningTextField;
    // End of variables declaration//GEN-END:variables
}
