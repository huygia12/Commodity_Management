/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Controllers.EmployeeListController;
import Controllers.OrderController;
import Controllers.ShiftController;
import static GUI.MainFrame.employeeList;
import static GUI.MainFrame.idGenerator;
import static GUI.MainFrame.shift;
import Models.Employee;
import Models.EmployeeList;
import Models.Goods;
import Models.History;
import Models.Order;
import Models.Shift;
import Models.ShiftState;
import Models.Shipment;
import Models.Store;
import Ultility.Cautions;
import Ultility.IDGenerator;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FPTSHOP
 */
public class ShiftPanel extends javax.swing.JPanel {

    /**
     * Creates new form ShiftJPanel
     */
    public ShiftPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shiftDetailPanel = new javax.swing.JPanel();
        ordersAndShipsHistoryPanel = new javax.swing.JPanel();
        flowBtnPanel = new javax.swing.JPanel();
        orderHistoryBtn = new javax.swing.JButton();
        shipmentHistoryBtn = new javax.swing.JButton();
        currentShiftBtn = new javax.swing.JButton();
        searchAndTablePanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        orderIDLabel = new javax.swing.JLabel();
        orderIDTextField = new javax.swing.JTextField();
        cashierPhoneNumLable = new javax.swing.JLabel();
        cashierPhoneNumTextField = new javax.swing.JTextField();
        fromLabel = new javax.swing.JLabel();
        fromHourTextField = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        refreashBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        fromMinuteTextField = new javax.swing.JTextField();
        fromSecondTextField = new javax.swing.JTextField();
        separatorLabel4 = new javax.swing.JLabel();
        separatorLabel3 = new javax.swing.JLabel();
        toHourTextField = new javax.swing.JTextField();
        separatorLabel1 = new javax.swing.JLabel();
        toMinuteTextField = new javax.swing.JTextField();
        toSecondTextField = new javax.swing.JTextField();
        separatorLabel2 = new javax.swing.JLabel();
        orderDateTextField = new javax.swing.JTextField();
        orderDateLabel = new javax.swing.JLabel();
        overViewTableJScrollPane = new javax.swing.JScrollPane();
        orderListTable = new javax.swing.JTable();
        otherFunctionPanel = new javax.swing.JPanel();
        currentShiftOverViewPanel = new javax.swing.JPanel();
        openBalanceLabel = new javax.swing.JLabel();
        openBalanceTextField = new javax.swing.JTextField();
        surchargeLabel = new javax.swing.JLabel();
        shiftEmployeeListLabel = new javax.swing.JLabel();
        surchargeTextField = new javax.swing.JTextField();
        shiftEmployeeListComboBox = new javax.swing.JComboBox<>();
        shiftCashierLabel = new javax.swing.JLabel();
        shiftCashierComboBox = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        grossRevenueLabel = new javax.swing.JLabel();
        netRevenueLabel = new javax.swing.JLabel();
        taxShiftLabel = new javax.swing.JLabel();
        taxTextField = new javax.swing.JTextField();
        numberOfOrderLabel = new javax.swing.JLabel();
        numberOfOrderTextField = new javax.swing.JTextField();
        netRevenueTextField = new javax.swing.JTextField();
        grossRevenueTextField = new javax.swing.JTextField();
        endShiftBtn = new javax.swing.JButton();
        noteScrollPane = new javax.swing.JScrollPane();
        noteArea = new javax.swing.JTextArea();
        orderDetailJScrollPane = new javax.swing.JScrollPane();
        orderDetailTable = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(977, 645));
        setPreferredSize(new java.awt.Dimension(977, 645));
        setLayout(new java.awt.BorderLayout());

        shiftDetailPanel.setLayout(new java.awt.BorderLayout(10, 0));

        ordersAndShipsHistoryPanel.setPreferredSize(new java.awt.Dimension(350, 595));
        ordersAndShipsHistoryPanel.setLayout(new java.awt.BorderLayout(10, 0));

        flowBtnPanel.setPreferredSize(new java.awt.Dimension(350, 34));

        orderHistoryBtn.setText("Lịch sử HĐ");
        orderHistoryBtn.setMaximumSize(new java.awt.Dimension(200, 23));
        orderHistoryBtn.setMinimumSize(new java.awt.Dimension(50, 23));
        orderHistoryBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        orderHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderHistoryBtnActionPerformed(evt);
            }
        });
        flowBtnPanel.add(orderHistoryBtn);

        shipmentHistoryBtn.setText("Lịch sử nhập");
        shipmentHistoryBtn.setMaximumSize(new java.awt.Dimension(200, 200));
        shipmentHistoryBtn.setMinimumSize(new java.awt.Dimension(110, 23));
        shipmentHistoryBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        flowBtnPanel.add(shipmentHistoryBtn);

        currentShiftBtn.setText("Ca hiện tại");
        currentShiftBtn.setOpaque(true);
        currentShiftBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        currentShiftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentShiftBtnActionPerformed(evt);
            }
        });
        flowBtnPanel.add(currentShiftBtn);

        ordersAndShipsHistoryPanel.add(flowBtnPanel, java.awt.BorderLayout.PAGE_START);

        searchAndTablePanel.setPreferredSize(new java.awt.Dimension(350, 562));
        searchAndTablePanel.setLayout(new java.awt.BorderLayout(0, 10));

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm Kiếm"));
        searchPanel.setPreferredSize(new java.awt.Dimension(350, 200));

        orderIDLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        orderIDLabel.setText("Mã HĐ: ");

        orderIDTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        orderIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cashierPhoneNumLable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cashierPhoneNumLable.setText("SĐT Thu Ngân:");

        cashierPhoneNumTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cashierPhoneNumTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        fromLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fromLabel.setText("Từ:");

        fromHourTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fromHourTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromHourTextField.setText("00");
        fromHourTextField.setMaximumSize(new java.awt.Dimension(64, 26));

        toLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        toLabel.setText("Đến:");

        refreashBtn.setBackground(new java.awt.Color(255, 0, 0));
        refreashBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        refreashBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreashBtn.setText("Làm Mới");
        refreashBtn.setMaximumSize(new java.awt.Dimension(107, 27));
        refreashBtn.setMinimumSize(new java.awt.Dimension(107, 27));
        refreashBtn.setPreferredSize(new java.awt.Dimension(107, 27));
        refreashBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreashBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(0, 255, 0));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchBtn.setText("Tìm Kiếm");
        searchBtn.setMaximumSize(new java.awt.Dimension(107, 27));
        searchBtn.setMinimumSize(new java.awt.Dimension(107, 27));
        searchBtn.setPreferredSize(new java.awt.Dimension(107, 27));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        fromMinuteTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fromMinuteTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromMinuteTextField.setText("00");
        fromMinuteTextField.setMaximumSize(new java.awt.Dimension(64, 26));

        fromSecondTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fromSecondTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fromSecondTextField.setText("00");

        separatorLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel4.setText("/");

        separatorLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel3.setText("/");

        toHourTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        toHourTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toHourTextField.setText("00");

        separatorLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel1.setText("/");

        toMinuteTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        toMinuteTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toMinuteTextField.setText("00");

        toSecondTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        toSecondTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toSecondTextField.setText("00");

        separatorLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        separatorLabel2.setText("/");

        orderDateTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        orderDateTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        orderDateLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        orderDateLabel.setText("Ngày lập HĐ:");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreashBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cashierPhoneNumLable)
                            .addComponent(orderIDLabel)
                            .addComponent(orderDateLabel))
                        .addGap(29, 29, 29)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(cashierPhoneNumTextField)
                            .addComponent(orderIDTextField)))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(fromLabel)
                        .addGap(0, 0, 0)
                        .addComponent(fromHourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(separatorLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(fromMinuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(separatorLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(fromSecondTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(toLabel)
                        .addGap(2, 2, 2)
                        .addComponent(toHourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(separatorLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(toMinuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(separatorLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(toSecondTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderIDLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashierPhoneNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashierPhoneNumLable))
                .addGap(6, 6, 6)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromLabel)
                    .addComponent(fromHourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel4)
                    .addComponent(fromMinuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel3)
                    .addComponent(fromSecondTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(toHourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel2)
                    .addComponent(toMinuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorLabel1)
                    .addComponent(toSecondTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreashBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        searchAndTablePanel.add(searchPanel, java.awt.BorderLayout.PAGE_START);

        orderListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã HD", "Thời Gian Lập", "Tổng Tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        orderListTable.setPreferredSize(new java.awt.Dimension(350, 80));
        orderListTable.setShowGrid(true);
        orderListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderListTableMouseClicked(evt);
            }
        });
        overViewTableJScrollPane.setViewportView(orderListTable);

        searchAndTablePanel.add(overViewTableJScrollPane, java.awt.BorderLayout.CENTER);

        ordersAndShipsHistoryPanel.add(searchAndTablePanel, java.awt.BorderLayout.CENTER);

        shiftDetailPanel.add(ordersAndShipsHistoryPanel, java.awt.BorderLayout.LINE_START);

        otherFunctionPanel.setLayout(new java.awt.BorderLayout(0, 10));

        currentShiftOverViewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        currentShiftOverViewPanel.setPreferredSize(new java.awt.Dimension(617, 234));

        openBalanceLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        openBalanceLabel.setText("Số Dư Đầu Ca : ");

        openBalanceTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        openBalanceTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        surchargeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        surchargeLabel.setText("Chi Tiêu Trong Ca : ");

        shiftEmployeeListLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shiftEmployeeListLabel.setText("Nhân Viên Trực Ca:");

        surchargeTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        surchargeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        shiftEmployeeListComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shiftEmployeeListComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thay đổi" }));
        shiftEmployeeListComboBox.setAutoscrolls(true);

        shiftCashierLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shiftCashierLabel.setText("Thu Ngân Ca:");

        shiftCashierComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        shiftCashierComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thay đổi" }));
        shiftCashierComboBox.setAutoscrolls(true);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        grossRevenueLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        grossRevenueLabel.setText("Doanh Thu Hiện Tại: ");

        netRevenueLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        netRevenueLabel.setText("Lợi Nhuận Ròng:");

        taxShiftLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        taxShiftLabel.setText("Thuế(VAT-%):");

        taxTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        taxTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        numberOfOrderLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberOfOrderLabel.setText("Tổng Số Hóa Đơn:");

        numberOfOrderTextField.setEditable(false);
        numberOfOrderTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberOfOrderTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        netRevenueTextField.setEditable(false);
        netRevenueTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        netRevenueTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        grossRevenueTextField.setEditable(false);
        grossRevenueTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        grossRevenueTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        grossRevenueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grossRevenueTextFieldActionPerformed(evt);
            }
        });

        endShiftBtn.setBackground(new java.awt.Color(255, 0, 0));
        endShiftBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        endShiftBtn.setForeground(new java.awt.Color(255, 255, 255));
        endShiftBtn.setText("Chốt Ca");
        endShiftBtn.setPreferredSize(new java.awt.Dimension(107, 27));
        endShiftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endShiftBtnActionPerformed(evt);
            }
        });

        noteArea.setColumns(20);
        noteArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        noteArea.setRows(5);
        noteArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Ghi chú ca"));
        noteScrollPane.setViewportView(noteArea);

        javax.swing.GroupLayout currentShiftOverViewPanelLayout = new javax.swing.GroupLayout(currentShiftOverViewPanel);
        currentShiftOverViewPanel.setLayout(currentShiftOverViewPanelLayout);
        currentShiftOverViewPanelLayout.setHorizontalGroup(
            currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(taxShiftLabel)
                            .addComponent(openBalanceLabel)
                            .addComponent(shiftEmployeeListLabel)
                            .addComponent(shiftCashierLabel)
                            .addComponent(surchargeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shiftEmployeeListComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 146, Short.MAX_VALUE)
                            .addComponent(shiftCashierComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taxTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(openBalanceTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(surchargeTextField))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endShiftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(numberOfOrderLabel)
                        .addGap(23, 23, 23)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(netRevenueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(grossRevenueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(numberOfOrderTextField)))
                    .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRevenueLabel)
                            .addComponent(grossRevenueLabel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        currentShiftOverViewPanelLayout.setVerticalGroup(
            currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberOfOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberOfOrderLabel))
                        .addGap(6, 6, 6)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(grossRevenueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(grossRevenueLabel))
                        .addGap(6, 6, 6)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(netRevenueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(netRevenueLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(noteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(currentShiftOverViewPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openBalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openBalanceLabel))
                        .addGap(6, 6, 6)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(taxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(taxShiftLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shiftEmployeeListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shiftEmployeeListLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shiftCashierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shiftCashierLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(currentShiftOverViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(surchargeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(surchargeLabel))
                        .addGap(15, 15, 15)
                        .addComponent(endShiftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );

        otherFunctionPanel.add(currentShiftOverViewPanel, java.awt.BorderLayout.PAGE_START);

        orderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "ĐV", "Đơn Giá/ĐV", "Tổng SL", "Mã Lô", "SL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetailTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        orderDetailTable.setShowGrid(true);
        orderDetailJScrollPane.setViewportView(orderDetailTable);

        otherFunctionPanel.add(orderDetailJScrollPane, java.awt.BorderLayout.CENTER);

        shiftDetailPanel.add(otherFunctionPanel, java.awt.BorderLayout.CENTER);

        add(shiftDetailPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void orderHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderHistoryBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderHistoryBtnActionPerformed

    private void grossRevenueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grossRevenueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_grossRevenueTextFieldActionPerformed

    private void orderListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderListTableMouseClicked
        int selectedRow = orderListTable.getSelectedRow();
        if (selectedRow != -1) {
            String orderID = orderListTable.getValueAt(selectedRow, 0).toString();
            Order selectedOrder = shiftCtr.containOrder(shift.getOrderHisPerShift(), orderID);
            insertorderGoodsListToDisplayDetailTable(selectedOrder);
            orderIDTextField.setText(orderID);
            cashierPhoneNumTextField.setText(selectedOrder.getCashier().getPhoneNumber());
            orderDateTextField.setText(selectedOrder
                    .getOrderDateTime()
                    .format(DateTimeFormatter.ofPattern(OUTPUT_DATE_PATTERN)));
        }
    }//GEN-LAST:event_orderListTableMouseClicked

    private void endShiftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endShiftBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endShiftBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed

    }//GEN-LAST:event_searchBtnActionPerformed

    private void refreashBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreashBtnActionPerformed
        insertOrderHistoryToOverViewTable(shift.getOrderHisPerShift(), myStore);
    }//GEN-LAST:event_refreashBtnActionPerformed

    private void currentShiftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentShiftBtnActionPerformed
        reloadOnShiftMode();
    }//GEN-LAST:event_currentShiftBtnActionPerformed

    private void showComboBoxSelectedItem(javax.swing.JComboBox comboBox) {
        if (comboBox.getItemCount() > 1) {
            comboBox.setSelectedIndex(1);
        } else {
            comboBox.setSelectedIndex(-1);
        }
    }

    private void passValueToEmployeeListComboBox() {
        int bound = shiftEmployeeListComboBox.getItemCount();
        if (bound > 1) {
            for (int i = 1; i < bound; i++) {
                shiftEmployeeListComboBox.removeItemAt(1);
            }
        }
        shift.getEmployeeOfThisShift().getList().stream().forEach(
                e -> shiftEmployeeListComboBox.insertItemAt(e.toString(),
                        shiftEmployeeListComboBox.getItemCount()));
        showComboBoxSelectedItem(shiftEmployeeListComboBox);
    }

    private void passValueToCashierComboBox() {
        if (shiftCashierComboBox.getItemCount() > 1) {
            shiftCashierComboBox.removeItemAt(1);
        }
        shiftCashierComboBox.insertItemAt(shift.getCashier().toString(), 1);
        showComboBoxSelectedItem(shiftCashierComboBox);
    }

    private void clearTableModel(DefaultTableModel tableModel) {
        int numberOfRow = tableModel.getRowCount();
        for (int i = 0; i < numberOfRow; i++) {
            tableModel.removeRow(0);
        }
    }
    
    private void setDefaultOptionToTextField(JTextField textField, int size) {
        textField.setFont(new java.awt.Font("Segoe UI", 0, size));
        textField.setForeground(new java.awt.Color(0, 0, 0));
        textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textField.setText("");
    }

    private void insertWarningToTextField(JTextField textField, String warningText, int size) {
        textField.setFont(new java.awt.Font("Segoe UI", 2, size)); // NOI18N
        textField.setForeground(new java.awt.Color(255, 0, 0));
        textField.setText(warningText);
        textField.setEditable(false);
    }

    private void insertorderGoodsListToDisplayDetailTable(Order order) {
        clearTableModel(orderDetailModel);
        for (Goods goods : order.getList()) {
            int size = goods.getShipments().size();
            for (int i = 0; i < size; i++) {
                Shipment shipment = goods.getShipments().get(i);
                if (i == 0) {
                    insertNewOrderGoodsToDisplayDetailTable(goods, shipment);
                } else {
                    insertExistedOrderGoodsToDisplayDetailTable(shipment);
                }
            }
        }
    }

    private void insertNewOrderGoodsToDisplayDetailTable(Goods goods, Shipment shipment) {
        orderDetailModel.addRow(new Object[]{
            goods.getID(),
            goods.getGoodsName(),
            goods.getUnit(),
            goods.getListPrice(),
            goods.getTotalQuantity(),
            shipment.getID(),
            shipment.getQuantity()
        });
    }

    private void insertExistedOrderGoodsToDisplayDetailTable(Shipment shipment) {
        orderDetailModel.addRow(new Object[]{
            "",
            "",
            "",
            "",
            "",
            shipment.getID(),
            shipment.getQuantity()
        });
    }

    private void insertOrderHistoryToOverViewTable(List<Order> orderHistory, Store store) {
        clearTableModel(orderListModel);
        for (Order order : orderHistory) {
            insertOrderToOverViewTable(order, store);
        }
    }

    private void insertOrderToOverViewTable(Order order, Store store) {
        orderListModel.addRow(new Object[]{
            order.getID(),
            order.getOrderDateTime().format(DateTimeFormatter
            .ofPattern(OUTPUT_DATE_TIME_PATTERN)),
            orderCtr.getTotal(order, store)
        });
    }

    private void setEnableComponentsInSearchPanel(boolean enable) {
        orderIDLabel.setEnabled(enable);
        orderIDTextField.setEnabled(enable);
        cashierPhoneNumLable.setEnabled(enable);
        cashierPhoneNumTextField.setEnabled(enable);
        orderDateLabel.setEnabled(enable);
        orderDateTextField.setEnabled(enable);
        fromLabel.setEnabled(enable);
        fromHourTextField.setEnabled(enable);
        fromMinuteTextField.setEnabled(enable);
        fromSecondTextField.setEnabled(enable);
        toLabel.setEnabled(enable);
        toHourTextField.setEnabled(enable);
        toMinuteTextField.setEnabled(enable);
        toSecondTextField.setEnabled(enable);
        separatorLabel1.setEnabled(enable);
        separatorLabel2.setEnabled(enable);
        separatorLabel3.setEnabled(enable);
        separatorLabel4.setEnabled(enable);
        searchBtn.setEnabled(enable);
        refreashBtn.setEnabled(enable);
    }

    private void setEnableComponentsInCurrentShiftOverViewPanel(boolean enable) {
        openBalanceLabel.setEnabled(enable);
        openBalanceTextField.setEnabled(enable);
        taxShiftLabel.setEnabled(enable);
        taxTextField.setEnabled(enable);
        shiftEmployeeListLabel.setEnabled(enable);
        shiftEmployeeListComboBox.setEnabled(enable);
        shiftCashierComboBox.setEnabled(enable);
        shiftCashierLabel.setEnabled(enable);
        surchargeLabel.setEnabled(enable);
        surchargeTextField.setEnabled(enable);
        endShiftBtn.setEnabled(enable);
        //
        numberOfOrderLabel.setEnabled(enable);
        numberOfOrderTextField.setEnabled(enable);
        grossRevenueLabel.setEnabled(enable);
        grossRevenueTextField.setEnabled(enable);
        netRevenueLabel.setEnabled(enable);
        netRevenueTextField.setEnabled(enable);
        noteArea.setEnabled(enable);
        noteScrollPane.setEnabled(enable);
    }

    public void setEnableAllComponents(boolean enable) {
        if (lastState == enable) {
            return;
        }
        lastState = enable;
        setEnableComponentsInCurrentShiftOverViewPanel(enable);
        setEnableComponentsInSearchPanel(enable);
        orderListTable.setEnabled(enable);
        orderDetailTable.setEnabled(enable);
    }

    private void computeSizeOfEachColumnInTable() {
        // duyet tu dau den cuoi mang de tim MAX_SIZE cua giatri input tung thuoc tinh
        for (Order order : shift.getOrderHisPerShift()) {
            if (order.getID().length() + extraLength > orderIDMaxSize) {
                goodsIDMaxSize = order.getID().length() + extraLength;
            }
            if (order.getOrderDateTime().format(DateTimeFormatter
                    .ofPattern(OUTPUT_DATE_TIME_PATTERN)).length() + extraLength > orderDateMaxSize) {
                orderDateMaxSize = order.getOrderDateTime().format(DateTimeFormatter
                        .ofPattern(OUTPUT_DATE_TIME_PATTERN)).length() + extraLength;
            }
            if (String.format(".1f", orderCtr.getTotal(order, myStore)).length() + extraLength
                    > orderTotalMaxSize) {
                orderTotalMaxSize = String.format(".1f", orderCtr.getTotal(order, myStore)).length() + extraLength;
            }
            for (Goods goods : order.getList()) {
                if (goods.getID().length() + extraLength > goodsIDMaxSize) {
                    goodsIDMaxSize = goods.getID().length() + extraLength;
                }
                if (goods.getGoodsName().length() + extraLength > goodsNameMaxSize) {
                    goodsNameMaxSize = goods.getGoodsName().length() + extraLength;
                }
                if (goods.getUnit().length() + extraLength > unitMaxSize) {
                    unitMaxSize = goods.getUnit().length() + extraLength;
                }
                if (String.format(".1f", goods.getListPrice()).length() + extraLength > listPriceMaxSize) {
                    listPriceMaxSize = String.format(".1f", goods.getListPrice()).length() + extraLength;
                }
                if (String.format(".1f", goods.getTotalQuantity()).length() + extraLength > totalQuantityMaxSize) {
                    totalQuantityMaxSize = String.format(".1f", goods.getTotalQuantity()).length() + extraLength;
                }
                for (Shipment shipment : goods.getShipments()) {
                    if (shipment.getID().length() + extraLength > shipmentIDMaxSize) {
                        shipmentIDMaxSize = shipment.getID().length() + extraLength;
                    }
                    if (String.format(".1f", shipment.getQuantity()).length() + extraLength > shipmentQuantityMaxSize) {
                        shipmentQuantityMaxSize = String.format(".1f", shipment.getQuantity()).length() + extraLength;
                    }
                }
            }
        }
        orderListTable.getColumnModel().getColumn(0).setMinWidth(orderIDMaxSize);
        orderListTable.getColumnModel().getColumn(1).setMinWidth(orderDateMaxSize);
        orderListTable.getColumnModel().getColumn(2).setMinWidth(orderTotalMaxSize);
        orderDetailTable.getColumnModel().getColumn(0).setMinWidth(goodsIDMaxSize);
        orderDetailTable.getColumnModel().getColumn(1).setMinWidth(goodsNameMaxSize);
        orderDetailTable.getColumnModel().getColumn(2).setMinWidth(unitMaxSize);
        orderDetailTable.getColumnModel().getColumn(3).setMinWidth(listPriceMaxSize);
        orderDetailTable.getColumnModel().getColumn(4).setMinWidth(totalQuantityMaxSize);
        orderDetailTable.getColumnModel().getColumn(5).setMinWidth(shipmentIDMaxSize);
        orderDetailTable.getColumnModel().getColumn(6).setMinWidth(shipmentQuantityMaxSize);
    }

    private void popupOpenShiftFrame() {
        openShiftFrame.setVisible(true);
        openShiftFrame.reload();
    }

    public void reloadOnShiftMode() {
        boolean checkOpenShift = shift.getState().equals(ShiftState.OPENED);
        setEnableAllComponents(checkOpenShift);
        if (checkOpenShift) { // nếu đã mở ca thì reload lại các thông số ca
            TitledBorder tb = (TitledBorder) currentShiftOverViewPanel.getBorder();
            tb.setTitle(" Mã Ca - " + shift.getID());
            tb.setTitleFont(new java.awt.Font("Segoe UI", 1, 14));
            tb.setTitlePosition(TitledBorder.CENTER);
            computeSizeOfEachColumnInTable();
            //
            insertOrderHistoryToOverViewTable(shift.getOrderHisPerShift(), myStore);
            numberOfOrderTextField.setText(shiftCtr.getNumberOfOrder(shift) + "");
            grossRevenueTextField.setText(String.format("%.1f", shiftCtr.getGrossRevenue(shift)));
            netRevenueTextField.setText(String.format("%.1f", shiftCtr.getGrossRevenue(shift)));
            noteArea.setText(shift.getNote());
            //
            openBalanceTextField.setText(String.format("%.1f", shift.getOpeningBalance()));
            taxTextField.setText(shift.getTax() + "");
            passValueToCashierComboBox();
            passValueToEmployeeListComboBox();
        } else { // nếu chưa mở ca thì thực hiện popup màn hình mở ca
            popupOpenShiftFrame();
        }
    }

    private void reloadOnOrderHistoryMode() {

    }

    private void reloadOnImportGoodsHistoryMode() {
    }

    public void reload() {
        switch (selectedMode) {
            case 0:
                reloadOnShiftMode();
            case 1:
                reloadOnOrderHistoryMode();
            case 2:
                reloadOnImportGoodsHistoryMode();
        }
    }

    private void initVariables() {
        // Table
        orderListModel = (DefaultTableModel) orderListTable.getModel();
        overViewTableJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        overViewTableJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        orderDetailModel = (DefaultTableModel) orderDetailTable.getModel();
        orderDetailJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        orderDetailJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        // open shift frame
        openShiftFrame = new OpenShiftFrame();
        openShiftFrame.passData(employeeList, shift, idGenerator, this);
        // Biến khác
        lastState = !shift.getState().equals(ShiftState.OPENED);
        orderCtr = new OrderController();
        shiftCtr = new ShiftController();
        employeeListCtr = new EmployeeListController();
        ctions = new Cautions();
    }

    public void passData(Shift shift, History history,
            EmployeeList employeeList, Store myStore, MainFrame mainFrame) {
        this.shift = shift;
        this.history = history;
        this.employeeList = employeeList;
        this.myStore = myStore;
        this.mainFrame = mainFrame;
        //
        initVariables();
    }

    private boolean lastState;
    private int selectedMode = 0;
    private final int ON_CURRENT_SHIFT = 0;
    private final int ON_ORDER_HISTORY = 1;
    private final int ON_IMPORTGOODS_HISTORY = 2;
    private ShiftController shiftCtr;
    private EmployeeListController employeeListCtr;
    private OrderController orderCtr;
    private DefaultTableModel orderDetailModel;
    private DefaultTableModel orderListModel;
    private OpenShiftFrame openShiftFrame;
    private Shift shift;
    private History history;
    private EmployeeList employeeList;
    private Store myStore;
    private Cautions ctions;
    private MainFrame mainFrame;
    private final String OUTPUT_DATE_PATTERN = "dd/MM/yyyy";
    private final String OUTPUT_DATE_TIME_PATTERN = "HH:mm:ss dd/MM/yyyy";
    private final String EMPTY_TEXT_FIELD_WARNING = "Ô nhập trống!";
    private final String INVALID_CASHIER_WARNING = "Thu ngân không hợp lệ!";
    private final String INVALID_WARNING = "Không hợp lệ!";
    private final int extraLength = 100;
    private int goodsIDMaxSize = "Mã SP".length() + extraLength;
    private int goodsNameMaxSize = "Tên SP".length() + extraLength;
    private int unitMaxSize = "ĐV".length() + extraLength;
    private int listPriceMaxSize = "Đơn giá/ĐV".length() + extraLength;
    private int shipmentIDMaxSize = "Mã lô".length() + extraLength;
    private int shipmentQuantityMaxSize = "SL".length() + extraLength;
    private int totalQuantityMaxSize = "Tong SL".length() + extraLength;
    private int orderIDMaxSize = "Mã HD".length() + extraLength;
    private int orderDateMaxSize = "Thời gian lập".length() + extraLength;
    private int orderTotalMaxSize = "Tổng tiền".length() + extraLength;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cashierPhoneNumLable;
    private javax.swing.JTextField cashierPhoneNumTextField;
    private javax.swing.JButton currentShiftBtn;
    private javax.swing.JPanel currentShiftOverViewPanel;
    private javax.swing.JButton endShiftBtn;
    private javax.swing.JPanel flowBtnPanel;
    private javax.swing.JTextField fromHourTextField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JTextField fromMinuteTextField;
    private javax.swing.JTextField fromSecondTextField;
    private javax.swing.JLabel grossRevenueLabel;
    private javax.swing.JTextField grossRevenueTextField;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel netRevenueLabel;
    private javax.swing.JTextField netRevenueTextField;
    private javax.swing.JTextArea noteArea;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.JLabel numberOfOrderLabel;
    private javax.swing.JTextField numberOfOrderTextField;
    private javax.swing.JLabel openBalanceLabel;
    private javax.swing.JTextField openBalanceTextField;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JTextField orderDateTextField;
    private javax.swing.JScrollPane orderDetailJScrollPane;
    private javax.swing.JTable orderDetailTable;
    private javax.swing.JButton orderHistoryBtn;
    private javax.swing.JLabel orderIDLabel;
    private javax.swing.JTextField orderIDTextField;
    private javax.swing.JTable orderListTable;
    private javax.swing.JPanel ordersAndShipsHistoryPanel;
    private javax.swing.JPanel otherFunctionPanel;
    private javax.swing.JScrollPane overViewTableJScrollPane;
    private javax.swing.JButton refreashBtn;
    private javax.swing.JPanel searchAndTablePanel;
    private javax.swing.JButton searchBtn;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel separatorLabel1;
    private javax.swing.JLabel separatorLabel2;
    private javax.swing.JLabel separatorLabel3;
    private javax.swing.JLabel separatorLabel4;
    private javax.swing.JComboBox<String> shiftCashierComboBox;
    private javax.swing.JLabel shiftCashierLabel;
    private javax.swing.JPanel shiftDetailPanel;
    private javax.swing.JComboBox<String> shiftEmployeeListComboBox;
    private javax.swing.JLabel shiftEmployeeListLabel;
    private javax.swing.JButton shipmentHistoryBtn;
    private javax.swing.JLabel surchargeLabel;
    private javax.swing.JTextField surchargeTextField;
    private javax.swing.JLabel taxShiftLabel;
    private javax.swing.JTextField taxTextField;
    private javax.swing.JTextField toHourTextField;
    private javax.swing.JLabel toLabel;
    private javax.swing.JTextField toMinuteTextField;
    private javax.swing.JTextField toSecondTextField;
    // End of variables declaration//GEN-END:variables
}
